/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::ParsingXml.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/

#include "../Parsing.h"
#include "../ParsingDefinitions.h"
#include "../ParsingAutomaton.h"
#include "ParsingXml_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace xml
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Text : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CData : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content (XmlUnescapeCData);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Attribute : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\ttoken value (XmlUnescapeAttributeValue)\t\t@Color(\"AttValue\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Comment : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content (XmlUnescapeComment);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Element : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\ttoken closingName\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\tAttribute[] attributes;"
L"\r\n" L"\tNode[] subNodes (XmlMergeTextFragment);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Instruction : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\tAttribute[] attributes;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Document : Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] prologs;"
L"\r\n" L"\tElement rootElement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Lexer"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"token INSTRUCTION_OPEN = \"/</?\"\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token INSTRUCTION_CLOSE = \"/?/>\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMPLEX_ELEMENT_OPEN = \"/<//\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token SINGLE_ELEMENT_CLOSE = \"///>\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token ELEMENT_OPEN = \"/<\"\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ELEMENT_CLOSE = \"/>\"\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token EQUAL = \"/=\";"
L"\r\n" L""
L"\r\n" L"token NAME = \"[a-zA-Z0-9:._/-]+\"\t\t\t\t\t\t\t\t@ContextColor();"
L"\r\n" L"token ATTVALUE = \"\"\"[^<>\"\"]*\"\"|\'[^<>\']*\'\"\t\t\t\t\t\t@ContextColor();"
L"\r\n" L"token COMMENT = \"/</!--([^/->]|-[^/->]|--[^>])*--/>\"\t\t\t@Color(\"Comment\");"
L"\r\n" L"token CDATA = \"/</!/[CDATA/[([^/]]|/][^/]]|/]/][^>])*/]/]/>\";"
L"\r\n" L"token TEXT = \"([^<>=\"\"\' /r/n/ta-zA-Z0-9:._/-])+|\"\"|\'\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rules"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule Attribute XAttribute = NAME:name \"=\" ATTVALUE:value as Attribute;"
L"\r\n" L"rule Text XText = (NAME:content | EQUAL:content | ATTVALUE:content | TEXT:content) as Text;"
L"\r\n" L"rule CData XCData = CDATA:content as CData;"
L"\r\n" L"rule Comment XComment = COMMENT:content as Comment;"
L"\r\n" L"rule Element XElement = \"<\" NAME:name {XAttribute:attributes} (\"/>\" | \">\" {XSubNode:subNodes} \"</\" NAME:closingName \">\") as Element;"
L"\r\n" L"rule Node XSubNode = !XText | !XCData | !XComment | !XElement;"
L"\r\n" L"rule Instruction XInstruction = \"<?\" NAME:name {XAttribute:attributes} \"?>\" as Instruction;"
L"\r\n" L"rule Document XDocument = {XInstruction:prologs | XComment:prologs} XElement:rootElement as Document;"
;

			vl::WString XmlGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 4461; // 18926 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 365;
const vint parserBufferRows = 5;
const char* parserBuffer[] = {
"\x00\x0E\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x86\x81\x21\x6F\x6C\x2F\x32\x37\x84\x87\x02\x86\x00\x17\x82\x81\x24\x3C\x3A\x27\x30\x6D\x65\x06\x98\x8A\x80\x8E\x86\x00\x10\x92\x94\x98\x88\x04\x97\x80\x8E\x74\x56\x21\x2C\x35\x3A\x91\x8A\x84\x25\x8C\xA7\x89\x93\x8F\x98\x82\x8D\x08\xC0\x94\x21\x37\x37\x8D\x91\x91\x0C\xB9\x88\x9B\x91\x8D\x9C\x8C\xA0\x3F\x83\x83\xA5\xA0\x96\x98\x93\x93\x04\xCC\xAA\x9E\x93\x80\xA9\xAE\xA9\x44\xC6\x96\xA9\xA8\xAB\x82\xAC\xA7\x0C\xAD\xA9\xA3\x82\x27\x35\x3A\x37\x64\x61\x32\x39\x38\xA0\x9D\xB3\x86\x03\xBC\xAB\x8B\xBC\xB8\x01\xB7\xB7\x71\xF3\xB5\xA4\x8A\xA1\xAD\xBD\xA6\x7B\x88\xAA\xAA\xCC\xB6\xB4\xB8\xB9\x74\xDC\x82\x85\xC6\xB7\xC3\xAC\x97\x7D\xFF\x8F\xC2\xC2\xCD\x83\xBA\x00\x67\x89\xC4\x8B\xC3\xD5\xC4\xC0\xC8\x83\x89\x9F\xC1\xDD\xCC\xD3\x81\xC5\x9A\x81\xD1\xC4\x9C\x00\x8D\xDB\x87\x6F\x6E\x34\x25\x38\x3C\x3A\xBC\x8C\x05\x9D\xFF\x77\xD8\x84\xE0\x88\xDD\xBC\xBE\xC8\xC0\xE9\xD3\xCB\xD4\xCB\x68\xC1\x8F\xA7\xCD\x31\x92\xDC\xD7\x02\x89\x18\x9A\xEB\x8D\x8E\x39\x34\x62\x75\x3B\xDF\x74\xF5\xF0\xF3\xE7\x0F\xC4\x21\x34\x31\x36\xF2\xF2\xAF\x02\xC0\x90\x95\xE5\x32\xDE\xF7\xF2\xD8\x80\x0B\xC4\x2F\x33\x31\x3A\xEB\x74\x37\x74\x78\x7C\x19\x43\x45\x10\x1B\x65\x00\x82\x83\x3F\x0B\x18\x4D\x82\x40\x49\x2E\x13\x1C\x1D\x72\x35\x13\x18\x1D\x69\x39\x6B\x80\x01\x18\x5C\x82\x42\x13\x6F\x24\x12\x4A\x80\x1E\x88\x45\x88\x15\xC9\x4B\x8D\x03\x76\x2C\x9D\x74\x84\x78\xE2\x65\x15\x88\x41\x25\xAE\x15\x54\x70\xDC\x48\x49\x8C\x4C\xDF\x61\x7B\x6C\x7A\x00\x36\x13\x4D\x4D\x9D\x40\x93\x12\x7A\xEC\x44\x80\x53\x18\xB9\x7B\x66\x7E\x80\x4A\x94\x70\x81\x94\x02\x4C\x98\x73\x93\xF7\x79\x7B\x7D\x7F\xFF\x75\x74\x1C\x95\x00\x30\x12\x1D\x53\x67\x33\x1B\x82\x96\x03\x7C\x7E\x7C\x80\x0F\x88\x4D\x9B\x98\x6F\x34\x17\x81\x82\x5E\x8B\x80\x9B\x9C\x00\x8A\x08\x46\x9E\x02\x6B\x7F\x8A\x8F\x65\x26\x90\x97\x74\x02\x78\x9E\x95\x9B\x04\x6D\x93\x1A\x44\x73\x29\x1E\x18\x55\x21\x43\x04\xA2\x74\x85\x88\x80\x83\x8C\x03\x75\x85\x56\x00\x93\x91\x55\xA4\x9D\xD7\x58\x60\x03\x1C\x75\x22\x10\x8A\x88\x82\xB7\x78\xA3\x40\x6D\x91\x83\x85\x85\x17\x99\x8E\x18\x9F\x08\x74\xAE\x9D\x8F\x31\xA9\xAE\x7B\xAA\x02\x6D\xA2\x84\x85\x16\x98\x89\x6C\xA6\x02\x5A\xA1\x48\xB1\x00\x08\xB7\x89\x72\x60\x96\x9E\x91\x80\x02\x90\x08\x45\x0C\x18\x52\xB0\x73\xB5\x38\x4B\x82\x80\xB6\x49\x5A\xB7\x7C\xB7\xD9\x9E\xB6\x78\xB8\x84\x62\xB6\x7A\xB5\x08\x68\xB9\x12\x13\x53\x14\x12\x15\x15\x43\x14\x19\x13\x13\x4E\x1F\x1F\x10\x14\x45\x0E\x1A\xB3\x40\x2F\x3C\x0F\x0B\x0F\xC0\x5F\x61\x04\x46\x03\xD0\x8C\xBA\xBB\xF0\xB2\xB4\xBF\x17\x43\x0C\x1F\x13\x14\x45\x3B\xB2\x43\xBF\x2F\x3E\x0D\x66\x01\x18\x54\x09\xC5\x5E\x4F\x0D\x10\x14\x13\x45\x18\x1F\x15\x11\x20\xCD\x19\xBC\x15\xF6\xB8\xBA\xBD\x87\xFC\xBE\xBF\x08\xA7\x16\x5B\xCC\x42\xC6\x02\x53\x1B\xBB\x11\x20\xE3\xC5\xCB\xC9\x0C\xCE\xC0\xC6\xC4\x00\x2F\x02\xD2\x0F\x92\xBD\x54\x40\x71\x47\xC6\x8B\xCE\x13\x28\xF7\xB9\xBC\xCC\x08\x50\xDD\xBC\xB2\x39\x84\x4B\x88\x43\x57\xC0\x04\xC9\x11\x26\xCC\xDD\xCF\xC3\x45\x10\xD4\x42\xD4\x3E\x1F\x64\xAE\x61\x3A\x46\x81\x15\x15\x41\x0C\x12\xDB\x40\x52\xFD\x08\xC5\xB7\xF7\x40\xDE\x11\x10\x26\xC5\xC8\x42\xDE\x5B\x21\x1D\x0A\x1E\x41\x2D\x0A\x14\x0C\x2D\x39\x0A\x0E\x0B\x5F\x2F\x0D\x09\x17\x2B\x04\x8C\xAE\x7E\xA2\x81\x14\x14\x15\x56\x2D\xD5\x15\x11\x13\x18\x49\xE6\x40\x22\x1B\x1E\x14\x0F\x3E\x22\x0D\x16\x0A\x22\x3C\x17\x0A\xE7\xA0\xE7\x03\xEB\x09\xF9\x48\xDF\x55\xCC\x0F\x5D\xCD\xD4\x15\x22\x18\x45\xEF\xC4\xFE\xA1\x0D\x09\x0B\x28\x1E\xEA\xE2\x0F\x5D\x3C\x1D\x0A\xEF\x2D\x00\xF2\xF3\xF0\x5E\x00\xF9\x0A\x0A\xBB\xD5\xC5\xD7\x40\x59\xE8\xDB\x51\x5E\x44\x12\xE1\x10\x0B\x18\x58\xF8\xEF\x0B\x21\x2F\x0B\x17\x91\xD6\xDE\xFD\xEE\x17\x2F\x1D\x11\xF1\xF9\xBE\xE6\xFC\x1D\xF9\xE8\xC9\xFD\x17\xF2\xEC\xDD\x15\xC7\xD9\x09\x64\x8C\xCA\x40\x54\x21\xC4\x14\x09\x18\x7C\xF2\x43\xF8\xA0\x7D\x06\x08\x27\x00\x05\x17\x32\x0F\x05\x6E\x0F\x04\x7B\x7F\x61\x71\xC1\x45\x77\x70\x89\x6B\x71\x0A\x2B\x0C\x0F\xD2\x67\x07\x71\x0B\x45\x4A\x49\x03\x23\x0A\x28\x01\x0B\x08\x45\x05\x68\x42\x22\x8F\x05\x39\x2B\x06\x75\x93\x22\x40\xB5\x0C\x23\x6E\x84\x2D\x80\x0B\x47\x4B\x3D\x18\x68\x54\x20\x74\x70\x80\x49\x61\x0E\x06\x14\x6F\x01\x4F\x29\x2C\x3A\x0E\x74\x0F\x71\x9B\x40\x00\x04",
"\x12\x3C\x07\x86\x32\x9E\x05\x0B\x84\x2F\x85\x18\xAC\x38\x85\x00\x04\x38\x12\xEC\x3E\x04\x1F\xB2\x2C\x0E\xF4\x62\x20\xAD\x44\x87\x88\x27\xA1\x0A\x89\x18\x2D\x88\x0E\xE8\x42\x21\x29\xB9\x81\x06\x23\x18\x21\x1A\x82\x2D\x8A\x1C\xBE\x02\x07\x20\x00\x7C\x15\x41\x00\x04\x38\x8E\x5E\x4B\x20\x01\x0F\x1C\x71\x88\x86\x20\x0B\x8B\x20\x62\x92\x85\x40\x0C\x23\x90\x00\x26\x8A\x87\x3C\x92\x4C\x5C\x42\x83\x20\x23\xA6\x8E\x07\x20\x00\x08\x19\x86\x93\x0B\x52\x67\x55\x0C\x59\x80\x00\xAD\x58\x05\x92\x53\x61\x45\x0C\x2E\x11\x05\x0D\x18\x23\x94\x36\x9C\x96\x92\x9F\x8F\x8C\x08\x21\x08\x0A\x14\x7D\x30\x04\x7C\x0B\x96\x19\xB0\x92\x97\xF9\x00\x44\x96\xAC\x86\x52\x6E\x12\x92\x54\x2C\x3A\x90\x8B\x7B\x43\x22\x2F\x96\x5E\x4A\x17\x36\x06\x01\x92\x28\x9A\x29\xBF\x9A\x94\x11\x3C\x02\x04\x20\x17\x6E\xC9\x75\x80\x04\x1B\x61\x20\x04\x7B\x00\x04\x16\x3C\x40\x47\xDD\x14\x9F\x56\xDD\x81\x50\x08\x7D\x00\x04\x14\x20\x02\x04\x15\x70\x99\x2C\xA2\x01\x75\x48\x99\x9F\x94\x9E\x82\x44\x35\xA4\x51\x9E\x71\xA4\x9E\x99\x2F\x10\x9A\x34\xC5\x04\x9B\x45\x6F\x0D\x51\x8F\x42\x2F\x39\xED\x99\x05\x3C\xBB\x8F\x97\x0D\x0A\x03\x11\xCC\x90\x8E\x67\xBA\x98\x6F\xFC\x90\x8E\x35\xE5\x08\x9A\x6D\x9C\x98\x50\xDF\x9E\x39\x38\xFB\x84\x9C\x73\xA8\x9D\x9D\xEB\x81\x74\x11\xEF\x9D\x93\x4B\xB3\x98\x95\xA8\x43\x9F\x39\xFE\x5F\xA1\x69\xB6\x8C\x51\x8E\x50\x50\x45\xEC\x90\x9B\x82\xBA\x88\x04\xBF\x93\x90\x3C\x97\x94\x87\x81\x36\x85\xA4\x9F\x88\x91\x9C\x45\x00\x2F\xE8\x50\x7D\x91\x47\x80\xAA\x88\x10\x9C\x97\xBE\x03\x98\x54\xC0\x8C\x23\x26\xBF\x9E\x05\x1A\x06\x10\x23\x57\xAB\x98\x31\xBA\x3D\x99\x67\x91\x98\xA2\xD4\x93\xA1\x45\xDB\x9A\xA2\x8C\xB0\x88\x9C\x80\x5C\xA1\x39\xE7\x99\x9C\x5A\xB4\xA3\xAC\x4A\xB4\xA0\x1C\xF4\x97\x92\xB5\xB8\x9A\x04\x44\x9B\x9D\x3F\xB0\xA1\xA1\xAA\x03\xA5\xA6\x06\xB8\xA7\x56\xF4\x00\x49\x56\x8C\x5B\x52\x86\xBD\x35\x28\xD8\x08\x22\xC6\xA6\x96\x95\x74\x0A\x96\x5E\xF6\x8D\x48\x3C\xB1\x95\x08\x6B\x6D\x6D\x3F\x95\xBA\x36\x5A\x92\x74\x72\x96\x71\xA0\x08\x77\x8D\xB3\x58\xB9\x7D\x95\x9B\xB7\x48\x1D\x01\xB0\xB3\xA6\x8C\x35\x8C\xB6\x9E\x49\x26\x9B\x91\xB6\xDD\x21\x91\x05\x18\x38\xB6\x29\xB5\xB1\xB2\x38\x83\x0A\x76\x27\x69\xB7\xB3\x01\xBC\xB6\xD7\xA5\x35\x8C\xBF\x93\xB6\x30\xD4\xA1\x07\xAC\x88\x26\xB9\x0B\xA3\xB1\x57\xF8\xAF\xAA\x97\x95\x9E\xAF\xEF\x97\xA1\x8C\x19\xAF\x4F\x5C\x6A\xA6\xA3\x6D\xA1\xA4\x34\xA4\xA8\xA4\xB9\xA0\x04\xAE\x9F\x96\xAC\x4B\xD5\xB2\xB4\x7F\x80\xA2\xA6\x7F\xA0\x06\x4D\x87\xA3\xB0\x9D\x89\xB9\x98\xC8\xA3\xB2\x0B\x37\x0E\xB8\x82\x10\xBF\xA9\x00\x53\xB8\x7B\xE1\xA8\xBA\x8B\xA5\xAB\xBB\x67\xA7\xC3\x6E\x6A\xA0\xBC\x90\xB1\xBC\xBC\xF5\x87\xA5\x3D\xEA\xB9\x9F\x01\xEF\xA7\x9F\x31\xA2\x2C\x11\xEF\xA3\xBE\xC1\x90\xAD\xB0\x90\xA6\xAA\x40\x59\x69\xB0\x3A\x02\xAA\x91\x64\x0A\xBA\x40\x0E\x90\xB2\xA6\xBA\xA4\xB7\x3D\xA2\x22\x0D\xBC\xB7\xC4\xA2\xA4\x0A\xC4\x00\x19\x6A\x23\xBC\xBC\xA9\xE7\x59\x3A\x98\x6A\x5D\x4A\x6E\x0C\x95\x8D\x20\xC0\x46\x05\x32\x00\x0C\x46\x4A\xC6\x94\x23\xDE\x4A\x95\x40\x0F\x9E\xAB\x40\x51\x57\xDC\x14\x9A\x4C\x64\x5B\x8D\x2C\xB0\x8F\x0C\xFA\x1D\xB0\x8E\x58\xD2\x21\x99\x2A\xA0\xC0\x3C\xB0\x88\x4E\x72\x43\xB1\x60\xCE\xC1\x54\xA7\xB7\xBA\xAA\xCB\xBA\xBF\x0C\x4A\x98\x20\x3A\xD1\xB8\xAA\x02\xD3\xB3\x75\xD7\x91\xCA\x03\xDD\xBE\x9B\x09\xDF\xCE\x3D\xEB\xAF\xA2\x75\x8F\xC2\x9B\x71\xB2\xC1\x5D\xAA\xA7\xAE\x0B\xE3\xB4\xAF\xF0\xBC\xC1\x60\x88\xAA\xA1\x32\xDC\xAD\xA1\x5E\xBA\xCF\x44\xA3\xAE\xCE\x5C\x40\xD1\x8F\x0A\xC3\xD1\x83\x86\xDF\xAC\x08\xE6\xA3\xAE\xE5\xB4\xC1\x4B\xED\xB0\xD2\x81\x92\xD7\xA6\x39\xBD\x97\x9B\xB5\x51\xCE\xA8\x88\xCD\xBF\x03\x3F\xBC\x43\xAB\xAB\xD4\x02\xD7\x99\xBB\xA1\xDC\xBA\xA7\xA2\xDC\xAC\x07\xE5\xD0\xD1\xE5\xAA\xD1\x7A\x8C\xDB\xBC\x3D\xEE\xB9\xC3\x7E\xAF\xD4\x7D\xD0\xA0\x08\x28\x92\x8B\xCA\xB0\x42\x5A\x1B\x05\x94\x21\x42\x98\x08\xDB\xC1\x52\x55\x28\xD1\x08\x22\x72\xE6\x90\xDC\x55\xCE\x0D\x57\xBF\x04\xBA\x4D\xC5\xC4\xAC\x82\xC2\xDB\x46\x8C\xDF\x07\x76\xB7\xA0\xDD\xDA\xCA\xC6\x21\xDA\xBB\x36\x6B\xC2\x9C\xDF\xA0\x91\x04\x0F\x18\x23\xE0\x53\x80\xE2\xB2\x60\xB2\xA1\x55\x1B\xC2\x80\x10\x1F\xB5\x72\x4C\x17\x70\x35\xC2\x44\x26\x8A\xB7\xA0\xE0\xF6\xA3\xB1\x8C\x80\x06\x86\xAA\xBB\x83\xA8\x45\xB8\x22\x8E\xF7\xC1\xC1\x48\xBE\xC0\x00\x39\x58\x08\x9B\xC1\x8E\x40\x20",
"\xDC\x4F\xC8\x31\x0C\xC8\x42\x32\xE7\x89\x95\xEA\x92\xCA\xBF\x59\xDA\xAC\x57\xC3\x4C\x31\xDA\xCA\x9B\xBC\xBC\xE5\x96\xE4\xCF\x96\x6A\xA8\xCD\xE8\x37\xAB\xE5\xB5\xB6\x32\x98\x7C\xF2\x54\xDB\x03\x3E\xDA\xD3\xB9\x38\xC8\x52\x18\x26\xEA\xE7\xD9\xE5\xB8\xB9\x3B\xDD\x5E\xCA\xE1\x24\x9C\xD0\xDF\xB0\xF2\xD9\xAC\x7A\xF6\xDB\x8F\x53\xEE\x0D\x42\xC7\x89\xED\xAE\xCE\xD2\xAC\x7D\xC2\xED\x38\xE4\xEE\xBB\x7B\xB5\xD8\x9A\xF7\xDA\xE9\xBA\xFA\xD2\xEE\x40\x7E\xDD\x8C\x00\xE8\xC9\xC1\x88\x23\xF1\x23\x87\xE0\x8E\xEE\xD7\x9A\x08\x02\x84\x89\x87\xE1\xB3\xE2\x43\x56\xE3\x1E\x80\xE7\xE5\x94\xEB\xE2\x6F\x04\x3A\x6E\xCA\xAF\xE5\x99\x8F\xE8\xC0\xEA\x02\x25\x92\x23\xB6\xE1\x93\xBF\xC6\x91\xED\xA0\xE0\x21\xD3\xFA\xEA\xDA\x17\x33\x06\xDC\x08\x30\xF4\xDB\xAC\xF2\x56\xB7\xC9\xF4\xA2\xC0\xD1\xDD\xA0\xC3\xD6\xAF\xBB\xC1\xB1\xED\x40\x1C\xEC\xC0\xA6\xFD\xEF\x18\x6E\xF3\xF0\x04\x25\xF1\xF1\xBB\x38\xE0\xEB\xA2\xAB\xF1\xD0\x8E\xF1\xC4\xA2\xB4\xE3\x9A\x01\xB0\xE0\x4B\xEC\x23\xB5\xB4\xF9\x36\x9A\x48\x26\xFB\xDF\xDC\xFA\x1B\x35\xC0\x2E\xCC\xC3\x22\x6F\x8E\x8D\xED\x24\xC2\xF1\xD4\x09\x18\x26\xFD\x80\xE1\xD4\xF9\xE4\x0F\x00\x8C\x35\xFB\xC5\x86\xE1\xD6\x8B\xBD\x9C\xB6\xF8\xC8\x26\xFF\x5C\x6E\x65\x26\x6E\x79\x56\x40\x44\x38\x69\x35\x44\x4B\x63\x5D\x61\x60\x2F\x6B\x80\x5E\x29\x7A\xDE\x64\x63\x05\x84\x07\xA6\x7C\x45\x01\x8C\x80\xB2\x63\x58\xFE\x74\x10\x00\x8E\x71\x89\x43\x81\x07\x83\x10\x09\x84\x72\x4F\x69\x71\x50\x50\x81\xB5\x67\x64\x13\x85\x81\x20\x04\x82\x5C\x5A\x53\x71\x5B\x81\x03\x10\x80\x71\x57\x62\x20\x82\x72\x22\x85\x44\x49\x55\x5E\x3E\x00\x83\xE5\x58\x82\x65\x45\x83\x2B\x8C\x74\x02\x16\x81\x71\x5E\x03\xEC\x72\x68\xDE\x74\x10\xE0\x71\x78\x04\x8F\x43\x74\x07\x7F\x08\x12\x85\x23\x8B\x7C\x65\x08\x84\xF8\x5B\x6F\xA1\x6B\x71\x36\x41\x78\x13\x80\x84\x00\x06\x81\x07\x70\x62\xC9\x12\x85\x04\x12\x85\x25\x66\x83\x50\x8A\x6F\x55\x8D\x62\x64\x8D\x1B\x44\x66\x48\x90\x55\x45\x50\x85\x79\x39\x87\x44\x2D\x64\x7C\x69\x76\x01\x18\x1C\x87\x65\x49\x76\x6A\x87\x45\xE6\x72\x10\x7A\x35\x85\x6D\x7A\x87\xE2\x72\x83\x02\x10\x80\x80\x83\x81\x5C\x87\x87\xE1\x7F\x2A\x5B\x7A\x6E\x76\x85\x64\x9C\x7A\x1B\x9B\x38\x10\x99\x8B\x79\x6B\x2D\x79\x1F\x80\x85\x60\x85\x85\x36\x75\x89\x86\x4B\x72\x66\x83\x10\x68\x8B\x72\x74\x87\x45\x21\x85\x84\x2D\x8C\x89\x42\x61\x59\x7F\x42\x10\x81\x4C\x1E\x2F\x68\x43\x48\x6B\x46\x08\x1A\x8B\x6D\x49\x44\xBE\x55\x3D\x73\x42\x5C\x78\x47\x53\x5E\x46\x5C\xAF\x12\x4C\xBC\x5C\x77\x34\x62\x03\xBA\x58\x10\xCD\x8D\x45\x0E\x87\x69\x71\x40\x5C\x4C\x32\x8C\x9D\x54\x8C\xD1\x84\x07\xC6\x82\x10\x8B\x16\x69\x51\x54\x6B\xF9\x56\x6B\x34\x08\x6B\x02\x1A\x6B\xD2\x58\x69\x5E\x7B\x67\xB8\x7D\x69\x73\x7B\x7B\xF3\x6D\x51\xC5\x64\x6A\xED\x46\x6A\x9F\x4A\x6C\x29\x57\x4F\xCD\x69\x70\x8F\x68\x61\x7D\x5A\x78\x04\x53\x69\x83\x51\x7C\x59\x86\x85\xC4\x71\x78\x34\x08\x7C\x03\x1A\x7C\x87\x7F\x76\xD1\x6D\x70\xD2\x72\x71\x70\x45\x7D\x92\x7E\x70\xA1\x60\x04\x6F\x8F\x25\x88\x53\x87\x32\x0E\x58\x08\x1C\x91\x78\x89\x1C\xCD\x7D\x5E\x9C\x5B\x5A\x97\x59\x59\x4C\x06\x8D\x24\x9E\x70\x93\x30\x71\x10\x93\x5A\x23\x94\x4B\xA7\x54\x05\x28\x9C\x5A\xC9\x19\x7D\xC5\x1B\x7A\x92\x89\x6E\x60\x81\x89\x54\x6D\x7A\x34\x00\x7B\x04\x12\x7B\x3C\x9A\x73\x5C\x78\x69\xEC\x6C\x90\xBF\x6C\x8E\x66\x50\x6A\x82\x6D\x7B\x67\x70\x02\xC0\x74\x8A\xB0\x8C\x26\x2D\x76\x89\x9D\x86\x5B\x33\x02\x73\x04\x14\x73\x53\x9F\x64\x70\x48\x73\x39\x9A\x6D\x42\x7E\x73\xB4\x47\x81\x66\x60\x02\x61\x6F\x06\x63\x64\x4E\xDE\x86\x74\x89\x48\x74\x7B\x4A\x74\xF9\x13\x8B\x00\x05\x8B\x61\x06\x24\x38\x44\x2E\xF5\x39\x25\xFC\x79\x8D\x60\x2C\x5B\xC0\x1C\x01\x24\x12\x20\x26\x83\x25\x93\x2F\x4B\xC0\x1E\x01\x83\x9C\x97\x4E\x51\x57\x76\x3F\x49\xC0\x10\x02\x8B\x9E\x1E\x49\x83\x6C\xA4\x80\x70\xC0\x17\x3B\xE1\x2E\x1E\x17\x90\x34\x90\x50\x1C\xFE\x3B\x99\xE6\x18\x88\x61\x92\x2B\x71\x89\x76\xC0\x16\x02\x93\x96\x1E\x52\x9B\x72\x93\x4B\x72\xC0\x18\x02\xAB\x95\x1E\x10\x02\x42\x09\x12\x1C\xC0\x1D\x19\x7A\x9B\x9B\xBC\x9C\x1C\xC2\x19\x7A\x6F\x3D\x9B\x00\x0D\x19\xBA\x9D\x29\xAF\x30\x00\xA4\x54\x07\xC0\x14\x97\x76\x93\x19\xC2\x1D\x19\xB6\x92\x9C\xC3\x92\x9D\xD2\x32\x3D\x5E\x4B\x9C\x61\x48\x8C\x38\x4D\x1C\x05\x11\x9C\xC9\x2B\x9B\x9D\x11\x02\x18\x11\x9D\xC2\x98\x97\x32\x48\x9D\x2C\x4A\x9D",
"\x32\x44\x97\xE2\x94\x9D\xB4\x89\x9D\xB0\x58\x43\xE4\x9E\x9E\xC7\x5F\x5A\x94\x45\x5E\xF4\x9E\x9B\x24\x17\x31\xF9\x9A\x9F\x49\x1E\x9D\x9F\x19\x9B\x1B\x4C\x10\xDE\x94\x97\x01\xAB\x9B\x3E\x85\x4F\xDE\x90\x1C\x93\x48\x5E\xA8\x2C\xA0\x19\x80\x55\xD2\x9C\x9D\xFF\x04\x97\x04\x2D\x9F\xC1\x14\x12\xF9\x19\x49\xBC\x90\xA0\x03\xAE\x9E\x85\x9E\x25\x9F\x1D\x9E\x20\xAD\x4B\x71\x59\xA1\x49\x19\x49\xF9\x1C\x9B\xF3\x90\x24\xD4\x91\xA2\xBA\x13\xA2\xF9\x99\xA0\x97\x45\x9C\xB0\x34\x29\xC8\x93\x92\x01\x3F\xA1\x25\x64\xA1\x8F\x3B\xA2\xBB\x9D\xA2\x1F\xAF\xA2\x11\xA0\x20\x32\xA4\x9F\x34\xAF\x49\x36\xA8\xA3\x9E\x29\xA3\xAA\x5B\xA3\x69\x35\x46\x90\x54\xA1\x50\x40\xA4\x7A\x92\xA4\x51\xA5\xA2\x6E\x63\x58\x47\xAA\xA5\xF6\x9B\x53\x4A\xAB\x9B\xCD\x2A\xA3\x43\xA5\x19\x52\xA9\x22\xC2\x18\x63\x27\x7C\xA2\x65\xA8\x17\x48\xA5\xA4\x22\xA8\x11\x24\xA4\xA4\x8D\x95\x5E\x4B\xAD\xA4\x4D\xA9\x9C\x10\xAE\x54\xBC\x54\xA1\xC0\x99\x9F\x58\xA3\x3D\x6F\xAB\xA5\x1F\x62\xA7\x33\xA6\xA2\x76\xA2\xA6\x93\x2A\xA7\xF0\x9E\x42\xEA\x9C\x1E\x14\xA7\x8A\xDC\x80\xA8\x6D\xA0\x1A\x87\xA4\xA8\x46\xA6\xA8\x83\xAF\xA5\x71\x57\xA7\xC7\x99\xA7\x64\xA9\xA5\xD2\x35\x62\x18\xAE\x9C\x24\x11\x87\xD4\x94\x9C\xBB\x91\x87\xCF\x6D\x8F\x65\x0B\xA7\x5F\xA8\x98\x84\x1F\x9C\x44\x8E\x9E\x9E\xA8\x2D\x9E\x99\x1C\x50\xA2\xA8\x72\x88\xA6\x24\x1E\x9D\xC8\x22\xA0\x0C\x13\xA7\x03\x13\x9F\xBC\x99\xAB\xBD\x1B\xAB\xA3\xA0\x59\xEC\x99\x9F\x17\x96\xAC\x97\xAC\xA9\xF8\x94\x2E\x14\xAD\x19\x38\x6C\x9B\xB7\xA7\x2D\x7F\x99\x8D\xB0\xA5\x9F\x66\x96\x1F\xF3\x9F\x0F\xDE\x99\x7A\xC2\xAE\x8C\xE3\x99\x9F\xDB\xA2\x80\xDD\xA7\x8C\xB0\x59\x8D\x74\x9D\x8C\x74\xAF\xA5\xBC\x5B\xA0\xC6\x91\x1F\x03\x19\x96\x65\x28\x23\x2D\x25\x8A\x97\x81\x20\xC0\xA0\x9E\x9A\xA3\x42\xE8\xA3\x29\x80\x92\x2A\xDE\xAC\x5B\xCD\xAB\xA9\x07\xB9\x8D\xD0\xAA\xB0\xEC\xA7\x9F\xF5\x42\xAE\x18\x14\xAE\x18\x1D\x19\xA9\x7D\xB0\xE4\x29\xAE\x00\x2B\xAE\x93\xAD\xAE\x02\x84\x97\x14\xBA\x97\x0D\x82\x80\xF4\xA7\xA3\x4D\xA8\xAF\x73\x0A\xAF\x0C\x16\x79\xFD\xAD\x9F\x3E\xA6\x7F\xF9\x9A\xAA\x7A\x90\x34\x13\x5C\xB1\x90\x31\x8E\x1B\xB0\x2E\x14\xA7\x72\x1B\x75\xAA\x3E\xB4\xAD\xC2\x18\x2C\x83\x8D\x9B\x1A\x44\x48\xF9\x9D\x9A\x2D\xB6\xAA\x49\x1B\xA1\x31\xB5\xA9\x21\xB4\x2E\x48\xB7\x95\xCA\x97\x9B\x24\x1A\xA6\xF9\x9E\xA1\x46\xB4\x9F\x51\xB1\x8B\xD9\xA3\xA6\x4F\xA6\xB0\x0F\xBF\xAD\x53\xBB\x9F\x24\x14\x20\x3D\xBE\xB2\xC2\x17\x72\x07\xA9\x9F\x2F\xBC\x10\x8A\x8D\x9B\x58\xB3\x85\xD1\xAE\xAD\xBF\x49\xAD\x34\xB7\x23\x59\x84\x10\x9B\x48\x99\xB3\xA4\xB6\x0C\x19\x89\xA9\xA3\xB0\x37\xA2\xAB\x46\x31\xB6\xBF\x4F\x0F\xE1\xAE\x9D\x4B\x8C\x2D\x9D\x10\xAF\xC5\xA2\xB8\x38\xA4\xB8\xF6\x94\xB7\x83\x5F\xAE\x73\xB6\xB8\x83\x59\xAD\x71\x87\x74\x83\x5A\xB2\x3A\x2E\x72\x52\xB2\xB1\x0C\x11\xAC\x15\xB1\xB0\x04\x18\xB1\xE0\x27\x27\x9D\xB0\xB6\x1D\xB6\x48\xBF\x49\xB0\x5E\xA4\xB9\x50\x58\xBA\xD2\x99\xA4\x22\x22\xBA\xDF\x70\xB0\x59\xB2\xB0\xF4\x9A\xBA\x12\xAC\xBA\x37\xBE\xBA\x95\xB3\xB1\x97\xBD\xBA\xDE\x8A\xB9\x55\x90\x00\x9C\xBF\xBB\x2B\xBB\xAF\x5D\x9A\x1B\x68\xB7\xAA\x18\x15\x01\x4D\xBC\x10\x76\xB7\x3F\x00\x05\xB3\xB5\xA9\x34\x7F\x82\x7E\x7A\x94\xA1\x99\x4E\x87\x3F\xBC\xB6\xB4\xAC\x10\x17\x05\xBD\xB1\xBF\xB0\xB0\x9B\xAF\x04\x1C\xB2\x52\xB3\xA1\xC2\x1F\x19\x18\x03\xBE\x7E\xB8\x13\x8F\x3F\xB6\x1D\xA5\xA9\xD4\xB4\x9F\xA4\x9D\x93\xB2\x27\xBD\xA3\xB3\x10\xDA\xB0\x67\x04\xCA\x85\x82\x6C\x9B\x54\xA8\x11\x19\x08\xBE\x04\x19\xAD\x40\x22\x91\xC0\x15\x99\xE1\x44\x9D\xD5\xA8\x11\x1A\x0C\xC0\xD2\x97\x9A\xDE\xBB\xBD\x03\x1B\x7D\xA5\x9A\x21\xDE\x98\xBB\xDD\x6A\xBB\xE6\xAC\x10\xB4\xB8\x2D\x1A\xCF\xC1\x6E\x00\x1C\xFD\xB4\x94\x6E\x06\xB9\xFC\xB5\xAB\x43\x93\x89\x25\xBC\xA4\xC7\x98\xB2\x9E\xBD\xBE\xA0\xB1\x8B\x22\xC1\x75\x24\xC3\xC2\x26\xC9\x9F\x29\xCE\xBF\xB9\x1C\xC2\x32\xC9\x76\x20\xB9\x9F\x2D\xC4\xC3\x8A\xA7\xA3\x38\xCC\xBE\x03\x1E\xBE\xB1\x8F\xBD\xE5\xB8\x10\x1B\x08\xC1\xC2\x97\x99\xA1\x61\xC1\x03\x90\x70\x3D\xC3\x19\xDE\x9B\xBF\xE4\x2D\x19\x62\xC7\xBA\x47\xBB\xAF\x7C\xB5\xC0\x7A\xBF\x6F\xA1\x64\x97\x65\xC2\x9D\x12\xC0\x28\x35\xCB\xC6\x05\xC8\x56\xB9\x26\xC4\xDA\x78\x93\x44\xCE\x06\x5F\xC0\x00\x92\xA7\x2D\x9D\x1F\xC7\x27\xC7\x2D\x5A\xC7\xC0\x79\xB3\x10\x7B\xBD\xC6\x30\xB4\x9F\x71\xC1\x23\x73\xC8\xC8\x59\x86\xC7\x0B\x66\xB3\xDD",
"\x82\xB9\xF4\xBC\x2D\x14\xA0\x1C\x1D\x07\xC9\x3F\xB4\xA1\x56\xB4\x9F\x32\xB9\xB1\x8B\xA1\xAA\x93\xB1\xB6\x05\xB9\xC9\x18\x1F\x01\x9C\xC4\x9F\x14\xAC\xB4\xAB\xCD\xB7\x49\x10\x1C\xC4\xAF\xCA\xBB\x9D\xCA\x87\xC2\x9C\x45\xB8\x10\xB3\xCD\x9B\xB6\xBF\xAA\xE0\xB0\xBC\xF9\xB2\xAA\x03\x1B\xCB\xBC\x9D\xCB\x5D\xB3\xCA\x5F\xB2\xCC\x6E\xAD\xAB\xBD\x1D\xB6\xA5\xC2\x9C\x71\xB4\x10\xC4\xC8\xA0\x88\xA5\x4F\xC7\xC7\xA3\x8C\xAA\xCC\x96\xA7\xA6\xCD\xC2\x1C\x55\xA7\xB5\x95\xA3\xCD\x22\xB5\xCD\x35\xAD\xC4\x38\xA9\xCD\xBC\xAB\xAC\xBE\xA9\x14\x9F\xCE\x9E\xD1\xC3\xCC\xC5\xB1\xBC\x60\xA2\x22\xD7\xC7\xCE\xA4\xC5\x9F\x0B\xB2\x80\x7E\xA8\x11\x8F\xC8\x2D\xEF\xC2\x10\xE2\xC4\x2E\xC6\xC6\xCE\xA0\xA9\xCC\x8E\xA9\x9E\xF1\x92\x43\x91\xA0\xCC\xBB\x9F\xCF\x00\x01\xD0\xE0\x23\xD0\x7A\x9E\xB5\xCF\x2A\xAC\x66\xAC\xCC\x01\x28\x9B\x6A\x44\xCB\xAC\xC2\x1C\xF7\xB8\xC5\xD3\x93\xB3\xD8\xB3\xC0\xE0\x85\xD2\x56\x80\xCB\x38\x10\x1C\x25\x0C\xD1\x14\xC2\x1C\x2A\xA0\xD2\xF5\xC5\xD0\x15\xD5\xA9\x27\x1D\xA3\x1E\xDC\xD0\x7A\x91\xCA\xA9\xB8\xCC\x33\xDA\xCD\x35\xD3\xA5\xDE\xC8\xD3\x63\xC5\xBA\x13\xDC\xD3\x5E\x26\xD1\xCB\xC4\xAA\x28\xA8\x13\x7F\xC6\xA5\x43\xD6\xBD\x04\xD7\x9C\xE8\xC5\x9D\x17\xD6\xD3\x24\x10\x1C\x27\x0C\xD2\x40\xB4\x12\x42\xBA\xD5\x28\xD4\x18\xC0\x1E\xB8\x5E\xD9\x14\x41\xB4\x30\x20\xDF\x19\x62\xDD\x9B\x5B\xB9\xB3\x4B\xD4\x18\xAE\xC6\xAB\x95\xA9\xD6\xBC\x9B\xD6\x47\xD4\xB5\xEC\xC0\xC5\xD0\xC1\xD7\x67\xCD\xBC\x56\x9C\xB5\x51\xD6\xAF\x55\x27\xCF\x0F\xB9\xCF\x6C\xD3\xD6\x86\xD4\xBF",
};

			void XmlGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void XmlMergeTextFragment(vl::collections::List<vl::Ptr<XmlNode>>& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeAttributeValue(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeCData(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeComment(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class XmlTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				void Fill(vl::Ptr<XmlNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<XmlText> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<XmlCData> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						XmlUnescapeCData(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<XmlAttribute> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					if(SetMember(tree->value, obj->GetMember(L"value"), tokens))
					{
						XmlUnescapeAttributeValue(tree->value, tokens);
					}
				}

				void Fill(vl::Ptr<XmlComment> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						XmlUnescapeComment(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<XmlElement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					SetMember(tree->closingName, obj->GetMember(L"closingName"), tokens);
					SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
					if(SetMember(tree->subNodes, obj->GetMember(L"subNodes"), tokens))
					{
						XmlMergeTextFragment(tree->subNodes, tokens);
					}
				}

				void Fill(vl::Ptr<XmlInstruction> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
				}

				void Fill(vl::Ptr<XmlDocument> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->prologs, obj->GetMember(L"prologs"), tokens);
					SetMember(tree->rootElement, obj->GetMember(L"rootElement"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Text")
					{
						vl::Ptr<XmlText> tree = new XmlText;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"CData")
					{
						vl::Ptr<XmlCData> tree = new XmlCData;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Attribute")
					{
						vl::Ptr<XmlAttribute> tree = new XmlAttribute;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Comment")
					{
						vl::Ptr<XmlComment> tree = new XmlComment;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Element")
					{
						vl::Ptr<XmlElement> tree = new XmlElement;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Instruction")
					{
						vl::Ptr<XmlInstruction> tree = new XmlInstruction;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Document")
					{
						vl::Ptr<XmlDocument> tree = new XmlDocument;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> XmlConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				XmlTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<XmlText> XmlText::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlText>();
			}

			vl::Ptr<XmlCData> XmlCData::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlCData>();
			}

			vl::Ptr<XmlAttribute> XmlAttribute::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlAttribute>();
			}

			vl::Ptr<XmlComment> XmlComment::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlComment>();
			}

			vl::Ptr<XmlElement> XmlElement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlElement>();
			}

			vl::Ptr<XmlInstruction> XmlInstruction::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlInstruction>();
			}

			vl::Ptr<XmlDocument> XmlDocument::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlDocument>();
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseDocumentAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XDocument");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseDocumentAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseDocumentAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<XmlDocument> XmlParseDocument(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XDocument");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return XmlConvertParsingTreeNode(node, state.GetTokens()).Cast<XmlDocument>();
				}
				return 0;
			}

			vl::Ptr<XmlDocument> XmlParseDocument(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseDocument(input, table, errors, codeIndex);
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseElementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XElement");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseElementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseElementAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<XmlElement> XmlParseElement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XElement");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return XmlConvertParsingTreeNode(node, state.GetTokens()).Cast<XmlElement>();
				}
				return 0;
			}

			vl::Ptr<XmlElement> XmlParseElement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseElement(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> XmlLoadTable()
			{
				vl::stream::MemoryStream stream;
				XmlGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
