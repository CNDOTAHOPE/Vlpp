/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::ParsingXml.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/

#include "../Parsing.h"
#include "../ParsingDefinitions.h"
#include "../ParsingAutomaton.h"
#include "ParsingXml_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace xml
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Text : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CData : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content (XmlUnescapeCData);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Attribute : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\ttoken value (XmlUnescapeAttributeValue)\t\t@Color(\"AttValue\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Comment : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content (XmlUnescapeComment);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Element : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\ttoken closingName\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\tAttribute[] attributes;"
L"\r\n" L"\tNode[] subNodes (XmlMergeTextFragment);"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Instruction : Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name\t\t\t\t\t\t\t\t\t@Color(\"TagName\");"
L"\r\n" L"\tAttribute[] attributes;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Document : Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] prologs;"
L"\r\n" L"\tElement rootElement;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Lexer"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"token INSTRUCTION_OPEN = \"/</?\"\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token INSTRUCTION_CLOSE = \"/?/>\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMPLEX_ELEMENT_OPEN = \"/<//\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token SINGLE_ELEMENT_CLOSE = \"///>\"\t\t@Color(\"Boundary\");"
L"\r\n" L"token ELEMENT_OPEN = \"/<\"\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ELEMENT_CLOSE = \"/>\"\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token EQUAL = \"/=\";"
L"\r\n" L""
L"\r\n" L"token NAME = \"[a-zA-Z0-9:._/-]+\"\t\t\t\t\t\t\t\t@ContextColor();"
L"\r\n" L"token ATTVALUE = \"\"\"[^<>\"\"]*\"\"|\'[^<>\']*\'\"\t\t\t\t\t\t@ContextColor();"
L"\r\n" L"token COMMENT = \"/</!--([^/->]|-[^/->]|--[^>])*--/>\"\t\t\t@Color(\"Comment\");"
L"\r\n" L"token CDATA = \"/</!/[CDATA/[([^/]]|/][^/]]|/]/][^>])*/]/]/>\";"
L"\r\n" L"token TEXT = \"([^<>=\"\"\' /r/n/ta-zA-Z0-9:._/-])+|\"\"|\'\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rules"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule Attribute XAttribute = NAME:name \"=\" ATTVALUE:value as Attribute;"
L"\r\n" L"rule Text XText = (NAME:content | EQUAL:content | ATTVALUE:content | TEXT:content) as Text;"
L"\r\n" L"rule CData XCData = CDATA:content as CData;"
L"\r\n" L"rule Comment XComment = COMMENT:content as Comment;"
L"\r\n" L"rule Element XElement = \"<\" NAME:name {XAttribute:attributes} (\"/>\" | \">\" {XSubNode:subNodes} \"</\" NAME:closingName \">\") as Element;"
L"\r\n" L"rule Node XSubNode = !XText | !XCData | !XComment | !XElement;"
L"\r\n" L"rule Instruction XInstruction = \"<?\" NAME:name {XAttribute:attributes} \"?>\" as Instruction;"
L"\r\n" L"rule Document XDocument = {XInstruction:prologs | XComment:prologs} XElement:rootElement as Document;"
;

			vl::WString XmlGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 4461; // 18926 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 365;
const vint parserBufferRows = 5;
const char* parserBuffer[] = {
"\x00\x0E\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x86\x81\x21\x6F\x6C\x2F\x32\x37\x84\x87\x02\x86\x00\x17\x82\x81\x24\x3C\x3A\x27\x30\x6D\x65\x06\x98\x8A\x80\x8E\x86\x00\x10\x92\x94\x98\x88\x04\x97\x80\x8E\x74\x56\x21\x2C\x35\x3A\x91\x8A\x84\x25\x8C\xA7\x89\x93\x8F\x98\x82\x8D\x08\xC0\x94\x21\x37\x37\x8D\x91\x91\x0C\xB9\x88\x9B\x91\x8D\x9C\x8C\xA0\x3F\x83\x83\xA5\xA0\x96\x98\x93\x93\x04\xCC\xAA\x9E\x93\x80\xA9\xAE\xA9\x44\xC6\x96\xA9\xA8\xAB\x82\xAC\xA7\x0C\xAD\xA9\xA3\x82\x27\x35\x3A\x37\x64\x61\x32\x39\x38\xA0\x9D\xB3\x86\x03\xBC\xAB\x8B\xBC\xB8\x01\xB7\xB7\x71\xF3\xB5\xA4\x8A\xA1\xAD\xBD\xA6\x7B\x88\xAA\xAA\xCC\xB6\xB4\xB8\xB9\x74\xDC\x82\x85\xC6\xB7\xC3\xAC\x97\x7D\xFF\x8F\xC2\xC2\xCD\x83\xBA\x00\x67\x89\xC4\x8B\xC3\xD5\xC4\xC0\xC8\x83\x89\x9F\xC1\xDD\xCC\xD3\x81\xC5\x9A\x81\xD1\xC4\x9C\x00\x8D\xDB\x87\x6F\x6E\x34\x25\x38\x3C\x3A\xBC\x8C\x05\x9D\xFF\x77\xD8\x84\xE0\x88\xDD\xBC\xBE\xC8\xC0\xE9\xD3\xCB\xD4\xCB\x68\xC1\x8F\xA7\xCD\x31\x92\xDC\xD7\x02\x89\x18\x9A\xEB\x8D\x8E\x39\x34\x62\x75\x3B\xDF\x74\xF5\xF0\xF3\xE7\x0F\xC4\x21\x34\x31\x36\xF2\xF2\xAF\x02\xC0\x90\x95\xE5\x32\xDE\xF7\xF2\xD8\x80\x0B\xC4\x2F\x33\x31\x3A\xEB\x74\x37\x74\x78\x7C\x19\x43\x45\x10\x1B\x65\x00\x82\x83\x3F\x0B\x18\x4D\x82\x40\x49\x2E\x13\x1C\x1D\x72\x35\x13\x18\x1D\x69\x39\x6B\x80\x01\x18\x5C\x82\x42\x13\x6F\x24\x12\x4A\x80\x1E\x88\x45\x88\x15\xC9\x4B\x8D\x03\x76\x2C\x9D\x74\x84\x78\xE2\x65\x15\x88\x41\x25\xAE\x15\x54\x70\xDC\x48\x49\x8C\x4C\xDF\x61\x7B\x6C\x7A\x00\x36\x13\x4D\x4D\x9D\x40\x93\x12\x7A\xEC\x44\x80\x53\x18\xB9\x7B\x66\x7E\x80\x4A\x94\x70\x81\x94\x02\x4C\x98\x73\x93\xF7\x79\x7B\x7D\x7F\xFF\x75\x74\x1C\x95\x00\x30\x12\x1D\x53\x67\x33\x1B\x82\x96\x03\x7C\x7E\x7C\x80\x0F\x88\x4D\x9B\x98\x6F\x34\x17\x81\x82\x5E\x8B\x80\x9B\x9C\x00\x8A\x08\x46\x9E\x02\x6B\x7F\x8A\x8F\x65\x26\x90\x97\x74\x02\x78\x9E\x95\x9B\x04\x6D\x93\x1A\x44\x73\x29\x1E\x18\x55\x21\x43\x04\xA2\x74\x85\x88\x80\x83\x8C\x03\x75\x85\x56\x00\x93\x91\x55\xA4\x9D\xD7\x58\x60\x03\x1C\x75\x22\x10\x8A\x88\x82\xB7\x78\xA3\x40\x6D\x91\x83\x85\x85\x17\x99\x8E\x18\x9F\x08\x74\xAE\x9D\x8F\x31\xA9\xAE\x7B\xAA\x02\x6D\xA2\x84\x85\x16\x98\x89\x6C\xA6\x02\x5A\xA1\x48\xB1\x00\x08\xB7\x89\x72\x60\x96\x9E\x91\x80\x02\x90\x08\x45\x0C\x18\x52\xB0\x73\xB5\x38\x4B\x82\x80\xB6\x49\x5A\xB7\x7C\xB7\xD9\x9E\xB6\x78\xB8\x84\x62\xB6\x7A\xB5\x08\x68\xB9\x12\x13\x53\x14\x12\x15\x15\x43\x14\x19\x13\x13\x4E\x1F\x1F\x10\x14\x45\x0E\x1A\xB3\x40\x2F\x3C\x0F\x0B\x0F\xC0\x5F\x61\x04\x46\x03\xD0\x8C\xBA\xBB\xF0\xB2\xB4\xBF\x17\x43\x0C\x1F\x13\x14\x45\x3B\xB2\x43\xBF\x2F\x3E\x0D\x66\x01\x18\x54\x09\xC5\x5E\x4F\x0D\x10\x14\x13\x45\x18\x1F\x15\x11\x20\xCD\x19\xBC\x15\xF6\xB8\xBA\xBD\x87\xFC\xBE\xBF\x08\xA7\x16\x5B\xCC\x42\xC6\x02\x53\x1B\xBB\x11\x20\xE3\xC5\xCB\xC9\x0C\xCE\xC0\xC6\xC4\x00\x2F\x02\xD2\x0F\x92\xBD\x54\x40\x71\x47\xC6\x8B\xCE\x13\x28\xF7\xB9\xBC\xCC\x08\x50\xDD\xBC\xB2\x39\x84\x4B\x88\x43\x57\xC0\x04\xC9\x11\x26\xCC\xDD\xCF\xC3\x45\x10\xD4\x42\xD4\x3E\x1F\x64\xAE\x61\x3A\x46\x81\x15\x15\x41\x0C\x12\xDB\x40\x52\xFD\x08\xC5\xB7\xF7\x40\xDE\x11\x10\x26\xC5\xC8\x42\xDE\x5B\x21\x1D\x0A\x1E\x41\x2D\x0A\x14\x0C\x2D\x39\x0A\x0E\x0B\x5F\x2F\x0D\x09\x17\x2B\x04\x8C\xAE\x7E\xA2\x81\x14\x14\x15\x56\x2D\xD5\x15\x11\x13\x18\x49\xE6\x40\x22\x1B\x1E\x14\x0F\x3E\x22\x0D\x16\x0A\x22\x3C\x17\x0A\xE7\xA0\xE7\x03\xEB\x09\xF9\x48\xDF\x55\xCC\x0F\x5D\xCD\xD4\x15\x22\x18\x45\xEF\xC4\xFE\xA1\x0D\x09\x0B\x28\x1E\xEA\xE2\x0F\x5D\x3C\x1D\x0A\xEF\x2D\x00\xF2\xF3\xF0\x5E\x00\xF9\x0A\x0A\xBB\xD5\xC5\xD7\x40\x59\xE8\xDB\x51\x5E\x44\x12\xE1\x10\x0B\x18\x58\xF8\xEF\x0B\x21\x2F\x0B\x17\x91\xD6\xDE\xFD\xEE\x17\x2F\x1D\x11\xF1\xF9\xBE\xE6\xFC\x1D\xF9\xE8\xC9\xFD\x17\xF2\xEC\xDD\x15\xC7\xD9\x09\x64\x8C\xCA\x40\x54\x21\xC4\x14\x09\x18\x7C\xF2\x43\xF8\xA0\x7D\x06\x08\x27\x00\x05\x17\x32\x0F\x05\x6E\x0F\x04\x7B\x7F\x61\x71\xC1\x45\x77\x70\x89\x6B\x71\x0A\x2B\x0C\x0F\xD2\x67\x07\x71\x0B\x45\x4A\x49\x03\x23\x0A\x28\x01\x0B\x08\x45\x05\x68\x42\x22\x8F\x05\x39\x2B\x06\x75\x93\x22\x40\xB5\x0C\x24\x7E\x81\x34\x50\x0B\x3C\x50\x47\x6E\x34\x68\x20\x1A\xB0\x86\x3B\x32\x85\x0E\x0B\x52\x0F\x0D\x38\x53\x0C\x3D\x72\x14\x0F\x03\x18\x23\x88",
"\x81\x00\x08\x04\x24\x1C\x07\x0D\xFF\x41\x46\x1F\x2D\x80\x00\x2F\x91\x84\xA0\x68\x54\x20\x74\x4B\x88\x57\xBB\x2E\x07\x0F\xF2\x24\x0F\x80\x0C\x26\x8B\x00\x07\x8A\x12\xD2\x8D\x89\x27\x91\x88\x87\x80\x48\x84\x00\x44\x37\x8B\x1C\xAE\x01\x06\x3C\x18\x21\x1C\x82\x23\x8C\x34\x8D\x8A\x07\x20\x17\x6E\xC9\x20\x08\x8E\x1B\x61\x27\x88\x22\x02\x80\x08\x12\x74\x72\xCB\x45\x0C\x8F\x20\x02\x48\x4D\x65\x00\x05\x30\x33\x0B\x90\x76\x9B\x36\x19\x83\x2D\x8D\x34\xB6\x34\x92\x64\x99\x8A\x0C\x73\x88\x20\x4E\xB5\x8C\x89\xBB\x3E\x04\x1E\xFA\x87\x91\x3E\x95\x28\x04\x81\x82\x07\x11\x84\x95\x72\x26\x17\x70\x91\x8A\x95\x25\x23\x8F\x99\x93\x32\x13\x92\x20\x95\x91\x46\x1A\xEC\x85\x96\x17\x33\x04\x93\x04\x3E\x91\x2E\xA1\x93\x94\xBC\x65\x90\x04\x7E\x8C\x91\x2A\x83\x93\x73\x56\xAF\x90\x8F\xB1\x8C\x92\x23\x90\x90\x95\x32\x00\x0F\x96\x00\x03\x99\x19\x12\x08\x22\x6E\xB8\x95\x97\x3C\x91\x4D\x11\x70\x25\x88\x84\x25\x99\x89\xDA\x9E\x04\x08\x40\x08\x4C\x5C\x86\x52\x37\xD8\x98\x0B\x3B\xF4\x0E\x04\x19\x0E\x02\x32\xF7\x94\x8E\x3C\x96\x5E\x4A\x51\xA8\x94\x07\x22\x19\x8E\x31\x88\x99\x99\x23\xBB\x08\x04\xDA\x88\x93\xAD\x39\x8F\x91\x3E\x20\x00\x05\xA8\x95\x61\x40\xFC\x08\x95\xD0\x60\x07\xA0\x58\x13\x09\xA9\x27\x5C\x90\x3C\xA4\x56\x54\x21\x41\x50\x08\x0E\xA2\x04\x7F\x41\xA4\x94\x88\x8B\x53\x1B\x0D\x5F\x50\xB1\x15\xA1\xA0\x29\x13\x94\x08\x73\x9D\x00\x05\x0A\x8B\x9E\xFE\x85\xA7\x49\x83\xA6\x95\x90\x2B\x98\xA3\xB5\x8A\xA1\x24\xA2\xAE\xA0\x88\xA2\x02\xA2\x20\x14\xA2\x08\x16\xA8\xA2\x8D\xA0\xA2\x44\x88\x9F\xA0\x47\x8D\xAF\x9F\x17\x3B\xA3\x8F\x78\x8A\xA4\x4B\x90\x5A\x98\x8B\xB1\xA3\x9A\xF3\x9B\x94\x25\xAE\x50\x59\x58\x79\x30\x8C\x04\x20\x8C\x16\x64\xA0\x56\x61\x6E\x0E\x97\xA4\x18\x21\x5C\xFA\x9C\xAD\x60\x72\x51\xA7\x3C\x1F\x07\x55\xC7\x99\x99\x9F\x88\xA1\xA8\x78\x8B\xA0\xA0\x54\xA2\x05\x1F\x16\xA3\x9A\x75\xA6\xAE\x1B\x35\xAA\x89\xC4\xAE\xA8\xAF\x7A\xA2\xA0\x56\xC8\x95\x2A\x83\xBF\xAB\xA8\x42\xB5\x98\x61\x86\xB1\xA0\xC4\xBF\x55\xAD\xB2\x4D\x9D\x36\xF3\x91\x9F\x79\xBE\x96\x10\x18\x28\xB6\x3E\xB8\xA8\x8E\x9D\x92\xB4\xAF\xA7\x80\xA8\x66\x81\xB3\xA8\xAA\x86\xA8\xA9\x4A\xAC\xA8\x42\xCE\xAC\xA3\xA8\x9B\xA1\xA4\x84\xA6\xA7\x6B\xA9\xAC\x50\x47\x5C\xAF\xA5\x20\x1F\xAB\x23\xF3\x9C\x9C\x51\x7B\x98\x54\x74\x05\xB4\x3F\xBA\x3E\x04\x1A\x39\x98\x21\xD7\xB7\xA7\x74\xF4\x08\xAF\xBD\x84\xA1\xB6\x97\xB5\x99\x66\xD8\x84\xA9\x87\x91\xA6\xA2\xB9\xAA\x97\x45\xBB\xBF\xB6\xA8\x9E\xA5\xBD\xE5\xA5\xA6\x55\xC3\xB9\xAB\xE2\xAD\xA7\x94\x4B\xB0\xA6\x4C\xB4\xA6\xA7\xE7\x80\x45\xBB\xF4\xB4\xB2\x4F\xB2\xB2\xBC\xDA\x9A\xB3\xA4\xE6\xA7\xA8\x7A\xC8\xB0\x09\xA6\xB0\xBE\xB7\x4F\xB1\xBE\x70\xA8\xA5\xBF\x95\x86\xBE\xA5\xF9\xA9\xBB\x7E\xDB\xB2\xAC\x5C\x8E\xB2\x56\x68\xA3\x22\x5A\x9F\xC9\x37\x7A\x91\x08\x23\x27\xD4\xAF\x67\xF6\xA9\x36\xC8\x9E\xBD\xA7\x8C\x84\xC0\x79\xE3\xBC\xA0\x04\xC5\xB7\xB0\x8F\x84\xC6\x1B\x40\x0F\x79\xEC\x14\x92\x4D\x5D\x5A\x37\xE3\x6D\x48\x0A\x20\xC0\x47\x8D\x60\x18\x21\x92\xFA\x96\xC9\x7E\xB8\x88\xA3\x3A\xC8\x92\x98\x64\x4F\x90\x8A\x98\x0B\x3E\x00\x52\xCB\x98\x12\x25\x4C\x04\xFE\xBE\x4B\x88\x90\x4E\x9C\x5B\xB2\xA7\x26\xFA\x35\xB9\x7D\x3F\xCA\x6E\x54\x83\x20\x2B\xA6\xB1\x9C\x72\x50\x2D\xF4\x50\x73\x20\x74\xB8\xA3\x9D\xA2\xB9\xA0\x7C\xF1\x9C\xB7\x90\xAF\x8D\x06\x18\x20\xD2\x3E\xFD\xC2\x44\x7F\xA1\x00\x0B\x28\x5D\x35\x52\xA0\x07\xD1\x23\x6B\x39\x0C\x8B\xCD\xD3\x1B\x74\x3A\x37\x48\xEA\xCC\x0E\x68\xCC\x32\x3B\xDB\xB2\xBA\xE8\xAE\x06\x06\xAA\xA8\x21\xA8\xDA\xB0\xBA\x00\xD4\xC2\xC0\x31\xC1\xBF\x8C\x86\xC4\xBC\xDB\xA7\xBB\xA2\xC8\xAE\xC1\x84\x90\xC3\xAA\x1B\xE6\xA7\x88\xA7\xDA\xAB\x85\xF8\xBE\xAB\x0D\xD0\xB8\x48\x88\xCC\x5B\xA4\x41\xDD\x37\x37\x98\x08\x23\xC7\xDA\x9D\xA2\xDC\xB5\x99\xC9\x8E\x58\xCC\x14\xA5\x0B\xDA\x6D\x69\xA5\x26\x50\xDC\x99\x85\x8E\x97\x31\xCF\xD5\xD2\x8A\xB9\x78\xD1\xD5\xD7\x48\x1D\x32\xAB\xD8\x20\x33\x68\x21\xE7\xD7\xC8\x92\x61\x09\xCE\x47\xEC\x3F\x8D\x23\x18\x21\xBC\xFA\x9E\xDD\x30\x3E\x98\x7C\x54\x01\x09\xB8\xCF\x52\xA7\x7A\xD9\xD5\x34\xB8\x98\xCA\x97\x71\x92\xE0\xEA\xB1\x01\x05\x18\x28\xE0\xBD\x93\xDF\xBE\x3C\x83\x0A\x76\x27\x7B\xDC\x98\xD3\x95\xE0\x4C\xF9\xCC\xB4\x7B\x54\x92\x69\xB1\x01\xD4\x82\x23\xD7\xD2\xDD\xB8\xD4\x4F\xA8\xDB\xBD\x84\xAC\xD5\xC6\x45\xAF\xD7\xA2\x99\xC2\xD7\xDE",
"\xAF\xB9\xC2\xC1\xB3\xBD\xAE\xF6\xB7\xB9\x0C\xCA\xBB\xA6\xDB\xBD\xC4\x00\x39\x45\xC8\x2E\x6C\x4E\x41\x3F\xDE\xE6\x97\x75\x9B\xC8\x84\x05\xEA\x89\x66\xCC\xDA\x5F\xEB\xAB\xC4\xC5\x9A\xCC\xCA\x8B\xD7\xC8\xC3\xE0\xC8\x8F\x29\xDC\xCC\xAA\x97\xC1\xCD\x0F\xE3\xC0\xBB\x32\xC2\xEA\x37\x1D\xD9\x9A\x8E\xB4\x84\x20\x1B\xBA\xC3\x87\x5B\xE3\x9C\x19\x7A\x64\x20\xBD\x68\x9A\xC7\xEA\x9C\xC5\x8B\x59\x99\xE8\xB6\xC3\x22\x6F\x3D\xEB\x4F\xD0\xF0\xCA\xED\x10\xC2\x20\x8C\xE8\x89\xE9\xDC\xF9\xC4\xD1\x32\x2C\xCA\x20\x56\x85\xF0\xDA\xE2\x92\xCE\x8C\x19\x68\x9D\x85\xE3\xF2\x73\x98\xEC\x84\x8D\xDB\xBE\x05\x37\x1D\xE3\x40\x1F\xEC\xB5\x7F\xAF\xC4\xE4\x32\xD9\x84\x8D\x83\xB8\xC1\xDB\x8B\xC4\xE5\xEC\xB3\xD7\xCB\xB5\xD4\xA5\x09\xE3\xE2\xD7\xF7\xBF\x8C\x72\xB7\xE3\x9E\x60\xCB\xDB\xCE\x02\x39\x68\xB1\xF4\x9C\xEE\xB8\x18\x98\x9D\xCB\xD1\xEF\xB9\x84\x29\xDD\x7A\xFE\xE8\x20\x94\x95\xDF\xE2\xF1\xC4\x0D\x21\xF5\xCA\x89\xF5\xD2\xF1\x9A\x95\xE7\xF0\x00\x16\x8D\xE2\xCB\xEA\xEC\xEE\x80\x0F\xF0\xE8\xD3\xEA\x37\x71\xE1\xEC\xD3\xAF\x5C\xC4\x37\x07\xFB\xC4\x4D\xEE\xAF\x1B\xA9\xC8\x20\xF6\xCD\xB1\xFD\x77\xAD\xB5\x5E\xEA\xB7\xD5\xBE\xA1\xF0\x50\xA3\xF9\x56\x8D\x9C\xB2\xA6\x1D\xF6\xF1\x39\xE5\x44\x10\xE5\x4B\x7B\xCB\x7B\x45\x41\x48\x4D\x47\x40\x7C\xC9\x15\x36\x1B\x48\x4B\xCB\x6E\x7C\x0E\x89\x1C\x5A\x40\x44\x74\x0A\x73\x39\x22\x46\xBB\x7E\x03\xC3\x73\x10\xC5\x7B\x6E\xD5\x77\x7D\xEB\x65\x80\x14\x80\x81\x61\x48\x44\xD0\x7B\x6E\x1A\x88\x11\x1D\x8F\x68\xE2\x7A\x7C\x06\x81\x5D\x19\x76\x44\x20\x07\x82\x8F\x6E\x03\x16\x81\x74\x7A\x7A\x1B\x9B\x38\x10\x3B\x89\x77\x41\x6C\x7B\x5B\x7F\x82\xE7\x73\x10\x09\x88\x74\x5F\x7C\x5D\x37\x88\x4B\x49\x71\x80\x03\x13\x80\x49\x73\x81\x5C\x4B\x7D\x59\x38\x81\x82\x7D\x6E\xDF\x74\x07\xDE\x48\x10\x59\x82\x75\x94\x60\x84\x3E\x44\x81\x52\x84\x84\x26\x8C\x85\xFF\x56\x85\x5D\x83\x84\x01\x77\x85\x50\x81\x44\x61\x78\x81\x15\x7E\x03\x17\x7B\x5D\x59\x84\x10\x5B\x8F\x66\x41\x80\x86\x8E\x72\x86\x76\x6B\x5D\x70\x83\x79\xDB\x58\x86\xA3\x57\x79\x2F\x8D\x86\x33\x80\x72\x84\x70\x5F\x73\x83\x10\x5B\x8A\x78\x70\x6F\x82\x61\x82\x83\x90\x70\x5F\x7D\x89\x66\x85\x70\x88\x7A\x61\x61\x6B\x84\x07\x84\x8A\x44\x91\x72\x7E\x3A\x66\x01\x18\x10\x8A\x1E\x60\x7F\x25\x6D\x88\x14\x86\x77\x02\x1A\x37\x45\x83\x7E\x65\x5F\x58\x9E\x84\x8A\x6E\x09\x88\x02\x1B\x85\x67\x7F\x82\x1F\x82\x86\xEF\x74\x7E\x8A\x5E\x44\x31\x89\x4D\xB5\x42\x7E\xBD\x44\x03\xC0\x43\x10\xC2\x45\x4B\xFE\x45\x7F\xF8\x52\x48\xAC\x46\x48\xB0\x43\x24\xD2\x44\x4B\x43\x50\x04\xFF\x7D\x1B\x60\x24\x80\x32\x09\x6C\x08\x18\x8D\x4A\x41\x7C\xCD\x6B\x6D\xD6\x6D\x6D\x33\x53\x6D\x4C\x02\x71\xE0\x8B\x8C\xDA\x64\x8E\xE3\x6E\x6D\xFA\x38\x8E\xE4\x69\x1C\xE6\x6A\x82\xC9\x7B\x6E\xED\x61\x82\x32\x03\x6F\x08\x16\x8F\x34\x8C\x1E\xF7\x65\x3D\xF9\x6C\x8E\x14\x7B\x6E\x72\x7C\x10\x3C\x79\x74\x24\x8E\x83\x47\x63\x03\x45\x74\x10\x47\x76\x90\x4E\x65\x72\x51\x65\x75\x5B\x6F\x06\x5D\x66\x65\x15\x7F\x74\x57\x7E\x65\xF3\x4A\x75\xE2\x44\x66\xD3\x49\x74\xFF\x6F\x1A\xC9\x77\x85\x04\x7A\x86\x32\x0A\x70\x08\x16\x92\xDE\x7D\x85\xF7\x60\x71\x4C\x3E\x8F\x8F\x45\x71\x1F\x92\x10\x8B\x17\x69\x9D\x67\x64\x35\x0A\x79\x02\x1C\x79\x7C\x82\x7F\x9F\x76\x7F\xAA\x62\x7A\x27\x74\x7A\x29\x7A\x60\xB0\x68\x7A\x97\x8E\x72\x20\x02\x55\xC0\x56\x6B\x32\x7F\x7A\x34\x78\x61\xBD\x60\x56\xDB\x50\x04\xAF\x8A\x8B\x6E\x56\x89\x67\x74\x03\xEC\x74\x10\xEE\x7C\x8A\xA0\x5D\x62\xF2\x71\x59\xC8\x83\x60\x3F\x98\x7F\x41\x9A\x7F\x24\x5C\x7F\x9E\x56\x95\xB2\x21\x93\x50\x4D\x8B\xDA\x49\x84\x00\x05\x4B\xE4\x25\x3F\xF7\x13\x8D\x74\x00\x34\xCB\x60\x1C\x1C\x04\x12\x02\x2B\x81\x02\x1B\x82\xEC\x16\x24\xEB\x60\x1C\x1E\x0E\x97\xF7\x12\x97\x0C\x91\x2A\x7D\x19\x74\xC0\x10\x02\x88\x9E\x1E\x66\x83\x25\x93\x25\x71\xC0\x17\x3B\xE1\x22\x99\x7E\x80\x5D\x77\x2B\x5D\xC0\x1E\x3F\x99\x96\x1E\x87\x81\x61\x76\x31\x52\xC0\x16\x02\x91\x96\x1E\x55\x9D\x8A\xB2\x24\x82\x3A\x60\x1C\x28\x09\x9A\xE5\x10\x01\x22\x49\x10\xC2\x10\x1C\x9D\x15\x97\xBA\x9B\x9B\x38\x12\x1C\x8F\x3F\x36\xBC\x90\x00\x9D\x19\x9B\xF7\x36\x22\x03\x19\x4C\xC0\x11\x4F\x74\x94\x2E\xCD\x15\x10\x4F\x45\x9B\xC1\x91\x9D\x24\x12\x1C\x6A\x48\x2C\xBB\x93\x9C\xBA\x90\x24\xD1\x49\x9C\x70\x9B\x9C\x93\x12\x1C\x1A\x42\x9D\x02\x14\x9C\x75\x92\x97\xDE\x95\x2B\xDD\x93\x54",
"\xFF\x00\x9C\x05\x1C\x9E\x04\x28\x9B\x9D\x23\x10\xD0\x91\x9C\xE6\x93\x54\xDC\x95\x79\xDF\x43\x54\x80\x95\x20\xE2\x9F\x96\xF8\x9E\x8B\x43\x5C\x9E\xF7\x98\x9E\x7D\x25\x5B\xC0\x1B\x9A\x5F\x9E\x06\xEB\x90\x8F\x75\x97\x31\x18\x13\x9F\xBC\x95\x9F\xD5\x43\xA0\x04\x17\x46\xD5\x4B\x9F\xFB\x9B\x9B\xCA\x91\xA0\xBA\x98\x4D\x82\x59\x2B\xC0\x11\x87\xD0\x5D\x9F\x75\x9D\x9C\xFF\x04\x20\xF9\x14\xA2\xDF\x94\x12\x72\x9A\xA2\xBD\x94\x12\xBF\x94\xA2\xEC\x9F\x19\x19\xAA\x9B\x22\xA0\x20\xE4\x96\x9C\x0C\x16\x2C\x65\x04\xA1\x03\x16\xA1\xE4\x57\x2D\x26\xA6\x36\x2E\xAC\x2D\x26\xA1\xA3\xFD\x93\xA3\xF1\x91\x9C\x08\xA5\x7E\x39\xA4\x23\xC5\x98\x9C\xBD\x85\xA1\x98\x46\x9F\x84\x10\x9E\x97\x4D\x9F\x4F\xAC\x2D\x9D\x93\xA2\xA2\x20\x70\x81\x80\x5D\xFF\x00\xA1\x0B\xA8\x35\xBA\x9D\x19\x27\x0F\xA0\x24\xAD\xA5\x00\x21\xA2\x9B\x90\x20\xFB\x99\xA6\xFD\x97\xA3\x5E\x20\xA1\x2A\xA3\x9A\x1C\x55\xA6\x6E\x27\xA6\x18\x11\x02\x6A\xAD\x9F\x6C\xAE\x25\x6E\xA9\x66\xF3\x4B\x9F\x7E\xA3\xA7\x6F\xAE\x25\x5B\xAD\x2B\x40\x72\x10\x62\x63\x4F\x38\x23\x77\x8B\x91\x20\xEC\x9F\x38\xF0\x9C\x10\x3B\x84\x10\x76\xAA\x9B\x81\xAA\x1B\x83\xAA\x69\x61\xA0\xA7\x9A\x34\xA2\x74\xAA\x1B\x8B\xA0\x00\x24\x8F\xA8\x9E\x93\x77\x04\x13\x90\x47\x81\x9D\x26\xAB\x9F\xC7\x7E\xA2\x26\xA9\x1F\xB2\x8C\x9B\x4A\xA2\x90\xA4\xA9\xA8\xBA\x1F\x19\x72\xA2\x9E\x78\xA6\x9A\x26\xAF\x44\x4C\x81\x9C\x10\xAF\x19\x3A\x7B\x9B\xA5\xA4\x07\xBE\xAB\xAB\x94\x80\x5F\xA7\xAD\x2C\xDF\x84\x07\x01\x3D\x80\xD9\x4B\x6C\x47\xA4\x44\x24\xA7\xAC\xAC\xA1\x9D\xCB\xAD\xAC\x88\xAF\xAC\x11\x61\xAD\x93\x2C\x6D\xD4\xA6\xAD\xD2\x3B\x7B\x26\xAA\x46\xC5\xAC\x9B\xDC\xAA\xAB\xE1\xA0\xAA\x97\x60\xAE\xC0\xAE\x5C\x85\x74\xAE\xB0\x30\x00\xE6\xA5\xAD\x69\x31\x81\xBD\x16\xA2\xDB\x78\x8A\xEE\xA8\xAE\x03\x19\xAC\x36\xAC\xAB\xCC\xA8\x11\xBF\xA2\x9D\xC1\xA2\x22\xF8\xA4\x29\xFA\xA3\xAD\x9F\xA0\xA6\x64\x85\x27\xC2\x17\x7C\xD5\x7B\x9B\xEF\xAA\x23\xCE\xA2\xAF\xB5\x7A\xB0\x1D\xB4\xB1\xF7\xAC\xA9\xE5\xA2\xB1\x0C\xA8\x6E\xF1\x8F\x68\x26\xAD\xAE\xED\xAA\xB1\x04\xBE\x63\xF1\xA4\xB1\x1F\xBC\x10\x0B\xBE\xAD\xF6\xA0\xAD\x24\xB9\xAF\xFB\xAF\xB2\xA0\x14\x49\x7B\x96\xA2\x9D\x14\x76\xD1\x97\xAA\xC0\x1E\x9A\xB0\x87\xA0\x59\xA2\x76\xB0\x8A\xA7\x84\x1C\x9E\x99\xAC\x2D\x9D\x17\xA8\x23\x44\xA2\x46\xBC\x96\xB9\x18\xB4\x0C\x1C\x46\x3A\x66\xA8\x24\xAD\xA4\x8A\x52\xA0\x4B\xAC\x9F\x61\x21\x91\x65\x21\xA9\xF0\xA4\x77\x47\x8C\xB4\x03\x1F\xB4\xD8\x2D\x19\x6C\xB0\x00\x9B\xA5\x97\x55\xBC\x9A\x57\xB9\xB4\x49\x33\x8A\x56\xBE\x06\xFB\x9F\xB6\xBB\x9E\xB5\x6E\x50\xB6\xF9\xAE\x29\x63\xB4\x65\x66\xBC\xB1\x4A\x8F\xAA\xCC\x98\xA5\x0C\x15\x01\x24\xA4\xB4\x5F\xA0\x92\x02\x1E\x98\xDD\xA0\xB3\x68\xB9\x83\xE7\xA5\xA4\xB6\x93\x9D\xA1\x88\xB9\x57\xA4\x12\xEC\x96\xB0\x0C\x1D\x19\x3A\x7C\x9E\xFB\x90\xBA\xE4\x2D\xB0\x65\x00\xB8\xA0\xA0\xA6\x4A\x98\x2A\x13\xB0\xB9\xA1\xA2\xA8\x24\xA9\xAD\x0C\x17\x01\x8D\xB8\x11\xA7\xA4\x82\xB0\x7C\x55\xAF\xB2\x93\x96\x7E\xA5\x99\xB9\x14\x9D\x18\x01\xB7\xBD\x9F\x7A\x99\x1C\xFC\xA3\x3D\xFE\xA1\x20\xC2\x1C\x9E\xDB\x77\xA9\x08\x15\xB3\x02\x11\xB7\xE4\x27\xBC\xBD\x19\xBC\xE9\xAB\x6C\x71\xA4\xA2\x78\x94\xBD\x0C\xB7\xB3\x11\x65\xA2\x8A\xB8\x10\x19\x05\xBC\xE2\x94\x98\x8F\x60\x1C\x18\xA9\xB2\xEC\x16\xA2\xCE\xBC\xA7\x34\xBF\xA7\xE7\xB6\xAD\xF5\x6A\xBE\x27\xBA\x6E\x8F\x6B\xBD\xFD\x9B\xBE\x01\x7B\x6E\xDE\xB6\xB3\xE2\xAC\x51\xE2\xBA\xB9\x0C\x1A\x01\xE6\xB2\x9D\x60\x26\x99\x8F\xBE\xBB\x69\x8D\x85\x63\xAE\xB9\x79\x8D\xA0\x20\xBC\x10\xFF\xB8\x2D\x09\xC7\x85\xBD\xB0\x39\x0D\xC2\xAA\xF1\xB1\xB3\xB0\xB5\xB1\xBA\x15\xC1\xBC\x98\xBA\x6A\xB2\x10\x7C\xB8\xBB\x7D\xA2\xBF\x08\xC5\x99\x18\xCB\xC0\x1A\xC9\x4D\x15\x7C\xB5\x1E\xCC\xC0\x30\xC7\x85\xAA\xB2\xB8\x82\xB6\x75\x12\x93\x07\x85\xBD\xAA\x38\x8F\x83\x25\xC0\x00\x27\xC1\xBA\xA3\xA4\xC1\x6B\xAC\xC2\x5D\x89\xC1\x33\x91\xC3\x45\xC5\xAF\xD3\x76\xC3\x39\xB0\xB1\x3A\xC5\xB6\x93\xBB\x73\x3F\xCD\xA6\xB3\xBE\x9B\x27\xB2\x9D\xD8\x95\x97\x40\x32\xA5\x46\x3F\xC1\x90\xA4\xC0\x38\x18\x2C\x1B\x07\xC0\x95\x18\xA9\x24\xAA\x98\x92\xB1\x1C\x24\x16\xAB\x68\xC8\x17\x6A\xCD\x9F\x6C\xC8\xB8\x2B\xA9\x14\x01\xB2\xA3\x3C\xB3\xC4\xE4\x25\xC7\x96\xBF\xB0\x82\xBB\xB3\x61\xC4\xC3\x20\xC7\xB9\x9C\xBC\xB9\x26\xAA\x73\x29\xA7\xC8\x8C\xC7\xC8\xB4\xB0\xB1\x5C\xC8\xC2\x5E\xC1\xA5\x37",
"\x26\xB7\x03\x1A\xB5\x47\xB1\xBC\x38\x10\x1C\x1D\x0D\xC8\xB4\xA2\x1C\xC4\xA1\xC7\xC2\x91\xC5\x81\xC6\xB2\xFD\xAA\xBC\xD7\xA9\x22\x5A\xCC\x10\x2D\xB0\xBF\x08\x10\xC8\xAF\x31\xB1\xE2\x68\xBD\x69\xC9\xCA\xFF\xA4\x9D\xDA\xAA\xA5\x92\xC4\x2E\xD2\xA3\xCB\x3C\xB7\x12\xBB\x77\xC7\x38\x1C\xB2\xA2\xC0\xCB\xF1\x13\x10\x82\xC8\xCA\xD9\xBA\xCA\x24\x10\x1C\x1F\x0E\xC9\x88\xC7\xB1\xD5\x25\xCC\xA4\xC1\xCB\xC9\xC4\x7C\xF7\xB5\xBF\x26\xA0\x1C\x52\xB0\xCD\x03\xC9\x14\x66\xC2\xCA\x9F\x1D\xCD\xD1\x9E\xC7\x3F\x8A\xC9\x84\x10\xC7\xBA\xC7\xCA\x04\x14\xCE\xF4\x92\xA9\x6D\xCE\xC6\x78\xC4\x30\x7A\xCC\xCE\x03\x1E\xCE\x11\xA0\xCF\x47\x86\xCC\x62\xB7\xCD\xB0\xB4\xB1\x0A\xCB\xCD\xF2\x6E\xCD\x9F\xC4\x12\x79\xCB\xCE\xAF\xC5\xCD\xC7\xC5\x25\xA6\xCB\xBA\x1F\xC1\xD0\xB7\x98\x11\x25\x04\xD0\xB0\xA2\x1C\xEA\xC4\xD1\x02\xDD\xC1\x14\xDB\x9B\xB5\xAD\x4D\xE2\xC3\xC1\x4E\xC2\xAF\x85\x72\xCF\x38\x11\xCA\x49\xAC\xB3\xD2\xB3\xC2\xE0\xBC\x51\xFC\xCB\x24\x0D\xD2\x3D\xCB\xC7\xCB\x30\xA9\xCB\xE2\x99\xAB\xD1\xB1\xB2\x1F\xC3\xB2\x75\x9D\xCB\xCF\x24\xCB\x72\xC6\xCB\xCC\xB4\x1B\x34\xD2\x9D\x36\xD4\x10\x29\xDA\xAC\x2B\xD1\x52\x2D\xD8\xCC\x2F\xD5\xCB\x31\xD1\xD4\xF3\xCC\x10\x02\xBB\x9B\x45\xD3\x10\x47\xD7\xB0\x01\xCA\xD4\x0A\xDD\xCF\x4D\xD4\xC3\x00\xD7\x85\x26\xA8\xB1\xF5\xCA\xCC\x56\xD8\xD3\x84\xCA\xD3\xBC\xC5\xB2\xBE\xCC\x10\xFC\xB0\xC3\xEB\x6B\xB2\x43\xD1\x9D\x55\xD2\x10\x57\xD5\x97\xA8\xBB\xD4\x0C\xDB\xD6\x64\xDF\xD3\xEA\xA1\xD1\x0C\x16\x92\x1B\xD8\x2D\x26\xA1\xCE\x81\xD5\xD8\x86\xD4\xD1",
};

			void XmlGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void XmlMergeTextFragment(vl::collections::List<vl::Ptr<XmlNode>>& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeAttributeValue(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeCData(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);
			extern void XmlUnescapeComment(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class XmlTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				void Fill(vl::Ptr<XmlNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<XmlText> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<XmlCData> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						XmlUnescapeCData(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<XmlAttribute> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					if(SetMember(tree->value, obj->GetMember(L"value"), tokens))
					{
						XmlUnescapeAttributeValue(tree->value, tokens);
					}
				}

				void Fill(vl::Ptr<XmlComment> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						XmlUnescapeComment(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<XmlElement> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					SetMember(tree->closingName, obj->GetMember(L"closingName"), tokens);
					SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
					if(SetMember(tree->subNodes, obj->GetMember(L"subNodes"), tokens))
					{
						XmlMergeTextFragment(tree->subNodes, tokens);
					}
				}

				void Fill(vl::Ptr<XmlInstruction> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->name, obj->GetMember(L"name"), tokens);
					SetMember(tree->attributes, obj->GetMember(L"attributes"), tokens);
				}

				void Fill(vl::Ptr<XmlDocument> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->prologs, obj->GetMember(L"prologs"), tokens);
					SetMember(tree->rootElement, obj->GetMember(L"rootElement"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Text")
					{
						vl::Ptr<XmlText> tree = new XmlText;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"CData")
					{
						vl::Ptr<XmlCData> tree = new XmlCData;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Attribute")
					{
						vl::Ptr<XmlAttribute> tree = new XmlAttribute;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Comment")
					{
						vl::Ptr<XmlComment> tree = new XmlComment;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Element")
					{
						vl::Ptr<XmlElement> tree = new XmlElement;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Instruction")
					{
						vl::Ptr<XmlInstruction> tree = new XmlInstruction;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Document")
					{
						vl::Ptr<XmlDocument> tree = new XmlDocument;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<XmlNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> XmlConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				XmlTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<XmlText> XmlText::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlText>();
			}

			vl::Ptr<XmlCData> XmlCData::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlCData>();
			}

			vl::Ptr<XmlAttribute> XmlAttribute::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlAttribute>();
			}

			vl::Ptr<XmlComment> XmlComment::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlComment>();
			}

			vl::Ptr<XmlElement> XmlElement::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlElement>();
			}

			vl::Ptr<XmlInstruction> XmlInstruction::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlInstruction>();
			}

			vl::Ptr<XmlDocument> XmlDocument::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return XmlConvertParsingTreeNode(node, tokens).Cast<XmlDocument>();
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseDocumentAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XDocument");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseDocumentAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseDocumentAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<XmlDocument> XmlParseDocument(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XDocument");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return XmlConvertParsingTreeNode(node, state.GetTokens()).Cast<XmlDocument>();
				}
				return 0;
			}

			vl::Ptr<XmlDocument> XmlParseDocument(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseDocument(input, table, errors, codeIndex);
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseElementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XElement");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> XmlParseElementAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseElementAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<XmlElement> XmlParseElement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"XElement");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return XmlConvertParsingTreeNode(node, state.GetTokens()).Cast<XmlElement>();
				}
				return 0;
			}

			vl::Ptr<XmlElement> XmlParseElement(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return XmlParseElement(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> XmlLoadTable()
			{
				vl::stream::MemoryStream stream;
				XmlGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
