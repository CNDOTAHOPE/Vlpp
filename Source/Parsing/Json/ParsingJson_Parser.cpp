/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::ParsingJson.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/

#include "../Parsing.h"
#include "../ParsingDefinitions.h"
#include "../ParsingAutomaton.h"
#include "ParsingJson_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace json
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Literal:Node"
L"\r\n" L"{"
L"\r\n" L"\tenum Value"
L"\r\n" L"\t{"
L"\r\n" L"\t\tTrue,"
L"\r\n" L"\t\tFalse,"
L"\r\n" L"\t\tNull,"
L"\r\n" L"\t}"
L"\r\n" L""
L"\r\n" L"\tValue value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class String:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content(JsonUnescapingString)\t\t\t\t@Color(\"String\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Number:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Array:Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] items;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ObjectField:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name(JsonUnescapingString)\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\tNode value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Object:Node"
L"\r\n" L"{"
L"\r\n" L"\tObjectField[] fields;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Lexer"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"token TRUEVALUE = \"true\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token FALSEVALUE = \"false\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token NULLVALUE = \"null\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token OBJOPEN = \"\\{\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token OBJCLOSE = \"\\}\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARROPEN = \"\\[\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARRCLOSE = \"\\]\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMMA = \",\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token NUMBER = \"[\\-]?\\d+(.\\d+)?([eE][+\\-]?\\d+)?\"\t@Color(\"Number\");"
L"\r\n" L"token STRING = \"\"\"([^\\\\\"\"]|\\\\[^u]|\\\\u\\d{4})*\"\"\"\t\t@ContextColor();"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"\\s+\";"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rules"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule Node JLiteral"
L"\r\n" L"\t= STRING:content as String"
L"\r\n" L"\t= NUMBER:content as Number"
L"\r\n" L"\t= \"true\" as Literal with {value = \"True\"}"
L"\r\n" L"\t= \"false\" as Literal with {value = \"False\"}"
L"\r\n" L"\t= \"null\" as Literal with {value = \"Null\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ObjectField JField"
L"\r\n" L"\t= STRING:name \":\" JValue:value as ObjectField"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Object JObject"
L"\r\n" L"\t= \"{\" [JField:fields {\",\" JField:fields} ] \"}\" as Object"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Array JArray"
L"\r\n" L"\t= \"[\" [JValue:items {\",\" JValue:items} ] \"]\" as Array"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JValue"
L"\r\n" L"\t= !JLiteral"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JRoot"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
;

			vl::WString JsonGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 3815; // 17748 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 743;
const vint parserBufferRows = 4;
const char* parserBuffer[] = {
"\x00\x0B\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x86\x81\x21\x6F\x6C\x2F\x32\x37\x84\x86\x02\x86\x00\x17\x82\x93\x24\x3A\x39\x34\x37\x67\x06\x98\x8A\x88\x8E\x84\x00\x88\x12\x94\x98\x87\x0B\x93\x81\x20\x3A\x74\x4E\x21\x2D\x35\x32\x90\x86\x92\x0C\xA6\xA8\x93\x85\x88\x84\x96\x86\x3F\x80\x0B\x25\x39\x3F\x3B\x88\x32\x36\x88\xB8\x88\x8A\x99\x88\x9F\x96\x40\x83\x83\xA5\xA7\xA1\xA4\x83\xA5\x04\xCD\xA9\x9D\x94\x81\xA1\xAE\xA9\x44\xC6\xB2\x28\xAC\xA9\x86\x93\xAC\x03\xBB\xAA\x8C\x88\x00\x8D\xB6\x81\x42\x6F\x35\x2E\x34\x31\x32\x39\x3C\x56\xE6\xA5\x89\xBE\xA3\xB4\x85\xB7\x7F\x83\xB1\xB3\xB5\xBF\xB9\xBC\x81\x58\x83\x9A\xAF\xAC\xB6\xB6\xC0\xB9\x74\xF6\xB8\xA5\xB8\xC7\xB2\xC4\xBE\x5B\x8E\xCD\xD0\xB0\xCD\xC3\xC9\x91\x96\x8D\x98\xCC\xC8\x82\x8D\xD3\x81\x4E\x75\x2D\x22\x35\x32\x3B\xC3\x82\x0C\x18\xB1\xCF\x8F\x36\x34\x3B\x32\x78\x74\x2A\xB8\x80\x06\xAF\xCB\x9C\x2E\xF2\x32\x21\x38\xBF\x7E\xE3\xE3\xFF\x3E\xC2\x81\xAC\x21\x37\xDB\xE1\x6C\x48\xC8\xE4\x08\x8C\xEA\x80\x27\x6F\x64\x35\x92\xE6\xE6\xD0\x82\xD3\xA9\xAB\xED\xDC\xED\xE8\x8E\xD3\x27\x62\x6A\x25\x23\x34\x3C\xF3\x7F\x80\x0C\xF0\xC0\x08\xFA\xF4\xF6\x23\x34\x65\x6C\x08\xA4\xFE\xEB\x82\xD2\x8E\x1E\x60\x4E\x7A\x72\x00\x21\x65\x81\x70\xC3\x79\x16\x82\x49\xCE\x65\x1D\x1B\x1C\x03\x90\x50\x01\x73\xCF\x61\x1C\x1B\x82\x03\x76\x16\x85\x1D\xDB\x5C\x7D\x7E\x40\xE0\x6A\x6C\x6A\x1C\x04\x81\x53\x19\x6D\xB7\x76\x6E\x7B\x87\x19\x43\x44\x7F\x7A\x74\x2C\x86\x6A\x19\xF8\x7A\x70\x84\x79\xF2\x44\x42\x7F\x8B\xF6\x75\x84\x1A\x75\x08\x40\x9E\x1B\x4C\x65\x14\x60\x40\x46\x3B\xA9\x70\x8F\x7D\xF9\x64\x18\x86\x40\x1A\xAC\x1C\x87\x8A\xE6\x43\x40\x83\x47\x67\x25\x83\x43\x89\xB6\x65\x16\x6C\x6F\x0F\x18\x44\x08\x46\x61\xBC\x66\x9A\x52\xEE\x64\x77\x9B\x4D\x69\x9C\x7B\x98\x9A\x6D\x88\x7F\x9B\x55\x71\x88\x79\x00\x46\x77\x82\x44\x16\x14\x55\x05\x16\x15\x10\x4C\x3D\x90\x90\x41\x40\x9D\x4C\x84\x6F\x02\x18\x4A\x02\xA2\x03\x46\x10\xA3\x14\x7E\x80\xAD\x9F\x93\x00\x26\x16\x87\x1C\x45\x98\x43\x00\x9E\x9C\x97\x75\x14\x13\x4C\x3F\x91\xA1\x11\x83\x83\x42\x91\x1D\x6C\x2C\x19\xA0\x43\xA5\x8B\x72\x87\x13\x42\x0A\x1F\x10\x14\x45\x0E\x1B\xA8\x42\xB7\x9C\x1B\x1F\xA6\xC0\x5B\x61\x62\x40\xB0\x8A\x13\x10\x13\x4F\x10\xA7\xAC\x41\xB9\xBD\x1D\xA9\x8B\x51\x4D\xB0\x01\x10\x52\x12\x13\xAD\xAD\xC7\x83\x49\xAF\x16\x06\x84\x80\x60\x41\x80\x50\xB2\x17\xB0\xC5\x85\x15\xB6\x40\xB9\x9D\x1C\x8B\xB6\xBF\x4C\x59\x5B\x13\x4D\x0D\x11\x12\x91\x3D\x6C\x04\x82\x7B\x94\x83\x1F\x10\xB1\x4E\x30\xB3\x42\x0E\xE8\x88\x6C\x7D\x95\x9E\x8D\x12\x11\x11\x52\x1F\x08\x46\xC1\x02\x5B\x1C\x15\x0B\x5D\x3F\x0C\x14\x19\x2B\x28\x0E\x0B\xC3\x2B\x29\x0F\x0C\x0A\x5B\x25\x15\x11\x17\x5B\x2B\x0B\xC1\xC3\x14\xD6\xC9\x9C\x42\x23\xDF\x70\xC0\x00\x53\x3B\x99\x12\x13\x47\x1B\x08\x46\xCB\x02\x62\x08\xC6\x17\x5C\x1C\x12\x09\x17\x7C\x35\xCB\x16\x17\x75\x38\xC5\xCD\x1D\x0F\xFB\x14\x0D\x1F\x29\x2A\x02\x0B\xA2\x0C\x48\xD8\x42\x91\x94\x93\x10\x15\x10\x43\x05\x1C\xAC\x42\x53\xDC\x13\x1F\x0A\x39\x89\x44\x7B\x98\xCE\x9F\x52\x42\xAC\x4A\xAC\x71\x04\x46\x63\xDF\xDC\x8C\x1D\x2E\x12\x1F\x1B\x1B\x74\x1C\x46\x5C\x1D\xB3\x48\x41\xDC\x10\x20\x24\x0C\x0C\xD8\xF5\x74\x1E\x0E\x96\x66\xE1\xD4\x1D\x03\x18\x40\xED\xDD\xDE\x2E\x2E\xD2\x1C\x1D\x59\xC2\x42\x7C\xDD\x77\xE7\xDB\xDE\x84\x78\xF0\x85\xCB\x40\x23\xD1\xEC\x7A\x0B\x31\x09\x18\x46\xE6\x02\x4D\xEE\xDE\x0F\x3A\x20\x02\x0B\x1E\x22\x34\xDB\x14\x08\x4A\x0C\x9A\x7C\x08\xA1\xF4\x8D\x93\x1C\x20\x3B\x12\xE8\x0B\x22\x28\xEA\xE8\x19\xAC\xE0\x0E\xEA\x8D\x20\x3D\x10\x09\x17\xA2\xFD\x15\xED\x18\xB0\xE7\xDC\xDC\x00\x96\xF4\x13\xE6\x40\x95\xE7\xDE\x0B\x0C\x9C\xC8\x41\xF6\xE7\x79\xE0\xE2\xE8\xE9\x20\x27\xE9\xEA\x8F\xB9\xFB\xE4\x18\xEC\xB2\xE2\x04\xEE\xED\xDC\xED\xEE\x8C\xEC\xBE\xC0\xF2\x0A\xF0\x20\x04\xF0\x0B\xD9\x40\x32\x83\x43\xF6\x4D\xBD\xB0\x00\x60\xF4\xFA\x78\xE6\x0E\x18\x7C\xFD\xE5\xFE\x64\x16\x79\xCA\x52\x0B\x65\x23\x39\x73\x48\x34\x34\x6E\x08\x3A\x05\x76\x25\x16\x0B\x43\x65\x19\x75\x94\x1C\x4D\x7D\xE2\x7E\x6F\x76\xC7\x69\x79\x99\x08\x2B\x83\xE4\x69\x6B\x6D\x74\x05\x08\x5D\x71\x64\x21\xB8\x76\x69\x79\x3E\x00\x05\xFC\x27\x6E\x80\x08\xB6\x78\x7F\x0F\x92\x49\x19\x18\x7D\x06\x8C\x35\x87\x7F\x31\x9C\x42\xF5\x21\x0A\x08\x0A\x6D\x36\x42\x40\x0D\x02\x02\x77\x69\x87",
"\x32\x3B\x81\x79\x41\x83\x89\x0B\xB2\x87\x89\x20\x02\x3C\x38\x40\x14\x52\x12\x6A\x6C\x6D\x0C\x94\x88\x6D\x31\x05\x04\x46\x5A\x8F\x7F\x2B\x87\x88\x7E\x42\x97\x6E\x17\xA1\x7C\x86\x27\x89\x43\x85\x16\x33\x7F\xED\x2F\x8A\x8C\x1F\x6E\x02\x06\xFE\x68\x21\x1C\xF7\x67\x76\x01\xAA\x64\x65\x07\x84\x4A\xE8\x0C\x84\x6F\x25\x94\x81\x74\x13\x91\x82\xFB\x67\x67\x76\xF9\x5F\x6B\x8D\x9A\x28\x7B\xED\x4F\x71\x8E\x82\x33\x88\x80\x76\x84\x80\x1E\xA1\x78\x81\x08\x8B\x85\x81\x45\x92\x80\x04\x95\x8F\x7D\x0B\xBE\x40\x8D\xA7\x3F\x6A\x19\xC4\x3C\x8C\x51\x8F\x89\x0F\x2E\x15\x04\x23\x18\x2B\x95\xFF\x63\x91\x0F\xD6\x62\x07\x16\x35\x7A\x7B\x4C\xA1\x75\x41\x0F\x4A\x85\xF8\x63\x7E\x8F\x08\xB7\x97\x36\xB9\x89\x7E\xE8\x5D\x03\x78\xD8\x6F\x91\x8C\x4A\x0F\x95\x2C\xB3\x99\x7A\xD4\x76\x90\x04\xB8\x93\x0C\xDD\x3B\x98\x93\x4D\xBF\x96\x41\xE8\x7F\x77\x30\xC5\x90\x05\x57\x86\x90\x79\x45\x8E\x00\x46\x62\x9F\x6B\x22\x9F\x84\x6D\x22\x84\x0D\xE2\x47\x42\x21\x13\x85\x89\x85\x51\x9B\x2F\xD7\x57\x82\x70\x84\x35\x9B\x8A\x20\x87\x9D\x08\xF4\x2A\x68\x82\x0A\x6F\x84\x5E\x8A\x85\x29\xC8\x7E\x86\xE8\x3D\x9B\x20\x4A\x7D\x85\x83\x50\x38\x72\x7D\x18\x26\xA1\xFF\x65\xA2\x85\x56\x7E\x09\x2A\x02\x64\x60\xB9\x7C\x49\x8A\x74\x0C\x93\xF0\x23\x41\x89\x77\x72\xA0\x1B\x11\x95\x81\x8C\xA8\x46\x4B\x1C\xAE\x7F\x95\x20\x20\xA4\x85\x95\x43\xA4\xA1\x62\x06\xA1\x65\x0C\x9A\x91\xB4\x6F\x0E\xCE\x28\x0D\xEC\x20\x01\x90\x10\x3D\x02\x74\x54\x12\x0C\x87\x35\x7D\x0E\x64\xA2\xA1\x96\x6E\x08\x54\x1B\x35\xAB\xA0\x20\xA0\x00\xA7\x74\x1A\xA6\xEC\x3D\xAF\xA6\x11\x29\x31\x55\x44\xA6\xA9\x53\xB0\xA2\x74\x4B\x6C\x08\x53\x4C\xAF\xA7\x4D\xB9\xAB\xA6\xAA\xA2\x76\x08\x97\x54\xA5\xEF\x5F\x99\x99\x53\x83\xA5\xAD\x09\x58\x71\x11\x18\x23\xAE\x57\xA7\x93\x99\xA5\x6D\x99\x2F\xB9\x71\x9B\x9D\xA2\x7D\x9A\x32\x9C\xAC\x30\xD9\x9A\x7C\x62\x9C\x97\x95\x19\x87\x6F\xF2\x00\x0D\x78\xBF\x6F\x8C\x12\x18\x30\xB3\xFF\x0E\x71\xA6\xEC\x5A\x7F\x76\xDD\x67\x7F\x34\xB3\x7D\x80\xCC\xA6\x7F\x75\xBD\x7A\x9B\xFA\x5C\x97\x6C\x64\x94\xB7\x7A\xB4\x84\x7D\x93\x19\xB0\xB4\x20\x14\x9A\xB5\xAB\x7F\xB0\xEF\x42\x93\xB4\x4E\xA7\x6C\xAD\xB7\x64\x9C\x42\x3A\xB0\x80\x7D\xA9\x9B\x9D\xF2\x27\x85\x1D\xAA\x8C\xAD\x57\xAF\xAF\x95\x6F\x95\xAC\x42\x4A\xB7\x6E\x65\xB1\xA4\x99\xB5\x96\x98\x34\x83\xBE\xAE\x5E\x8F\x9D\xAF\xB4\xA6\xB2\xFB\x2F\x90\x94\x93\x66\x91\x41\xC7\xA7\x97\xF3\x4A\xB4\x20\xE6\xB0\xAC\x38\x78\xBA\xAF\x75\xD4\xB4\x9B\x3E\xAB\xB8\x9B\xA1\xA5\xB0\x37\xC6\xB9\x90\x97\xBF\x84\x0D\x10\x18\x21\x7E\xDF\x62\xA4\xDF\xB4\x2D\x9E\x04\x35\x9F\x09\xC7\xAA\x85\xC4\xBE\x6B\xB1\x8D\xA4\x70\x0D\x51\x74\x21\xE9\x68\x85\xB2\xA9\xA0\x80\x6B\xBC\x7D\xBC\xD8\xB8\x72\xB6\xDF\x71\xBD\xF0\x24\xBE\x6F\xE2\xA7\x92\xB7\x04\x3C\xB4\x72\xD7\x8F\xB6\x24\x43\x27\x84\xCA\x84\xB8\x0B\xB7\x7B\xBE\x84\x2D\xC5\xB7\x57\x86\x70\xE2\x26\xC2\x20\xBA\x42\xBE\x47\x3E\x18\xB6\x8F\x24\x83\x21\xB8\x7D\xB2\xC6\x07\xA2\x22\xD2\x0C\x70\x92\x0F\xC9\x45\xC5\x04\x2F\xC7\x88\xA0\x82\xC6\xE0\x83\x26\xC6\xCD\xB7\xAE\x91\xC4\x3C\xC6\x81\x3E\xC0\xB9\x40\xCC\x51\x8D\xA0\x01\xCB\x04\x79\xC4\x85\x45\x88\xCB\x40\x2F\xC6\x9D\x18\xF4\x0F\x6D\x4E\xDB\xCA\x3B\x90\x8F\xCB\x34\xA5\x98\x82\x55\xC0\x02\x8F\xE6\x99\xCB\xA4\x4F\xCC\xCB\xBD\x9E\x06\x14\xD7\x8B\x82\x82\x1D\x87\x8A\xFA\x95\xCC\x42\x43\xC5\x6E\x31\xA0\x82\xCF\xF2\x88\x7B\x15\xE9\xCA\xD1\x7C\xB2\xC0\xC1\x77\xC6\xD0\xDB\x3E\x0F\xAC\x91\x92\x00\x23\x97\xDC\xBF\x56\x81\xD7\xCD\xC3\x40\xC3\x20\xF5\x90\xCA\x7D\xD0\x34\xD3\xFA\xA2\xA0\xC4\x03\x3C\xB5\x7F\xB2\xC1\xCF\xB9\x78\xCF\xA8\x06\xD9\x6C\xA4\x83\x70\x47\x54\x8C\xC3\x20\x0E\xC7\xB7\xE8\x11\xCE\xB2\xDD\x67\x7D\xBA\x9D\xA5\x7E\xAF\xA0\xB4\xB6\xF6\x43\x96\x6F\xDD\xBE\x3D\x1B\xF5\x75\xBF\x45\xB4\x05\x91\xFB\x43\x20\x1D\xB8\xC1\x75\x01\xA5\xA4\x92\x7A\x97\x92\x33\xD2\xBD\xA7\x63\xF9\x6F\x76\xC9\xC0\x47\xFC\x74\xBE\x57\xF3\xA8\x94\x06\xE4\xA3\x22\x79\xCE\xB2\x74\xE8\x9B\xD9\xB0\xD7\x99\x97\x6B\xFB\xA1\xDE\xC2\x9B\x9F\xB0\xA7\x80\x09\xA5\xDB\xA1\xC8\x00\x09\xA5\xBF\x32\x10\xA0\x42\x02\xE1\xA5\xAD\x94\xA6\xA2\x03\x72\x0A\x49\xDD\x46\x37\x8E\xA2\x45\x35\x2D\xA7\xA9\x4C\xB3\xA1\xAD\xFB\x8F\xAC\xAC\x53\xBB\x91\x55\xC1\xA3\xA9\xDE\x51\xE6\xE0\xD5\xD7\x8E\x01\xA1\x7A\xA2\x94\x9C\x93\xA5\x67\x1F\xE3\x4B\xC8\xAA\xA9\x8A",
"\xD0\x3F\xE2\x51\xA5\xAE\xC6\xA2\x77\xAB\xA5\x9E\xE2\xAB\x2B\xF1\xA6\x57\xE0\xAC\x92\x91\xB0\xE2\xAA\x3C\xB3\xE6\x08\x68\xAF\xAA\xB5\xBD\x09\xDC\xBD\x30\x73\x6D\xA7\x67\x6D\x39\x5A\x6E\x43\x2B\xDE\x44\xA3\x84\x9E\x46\xDE\x16\x03\x24\xFF\x4E\xCC\xF2\x2F\x94\x53\x57\xBC\x30\x03\x58\xF0\xEA\xD6\xBD\x9B\x58\x20\x58\x3A\x3B\xBC\x3A\x01\xD8\xD2\x3B\xCE\x10\xA5\xE8\x35\xD9\x25\x0C\x6F\x1C\x0B\xEC\xE4\x3B\xDF\xA5\x6F\xF7\x39\xDC\xBC\x3E\x03\xBA\xC7\x3C\x03\xE3\x4F\x37\x3F\x3C\x36\x48\xA7\xC6\xF7\xF0\x82\xE4\x43\xB8\x07\xFC\xF1\x91\x06\x4F\x1F\xF6\x73\x69\xE3\x86\xF2\xF0\x54\xC2\x23\x59\x87\xEB\xF2\x81\x0B\xF7\xF1\x58\xF0\x45\xF0\xD5\x21\xF6\x40\x15\x9C\x36\x1D\xCD\x4D\x20\x8F\xEC\x6B\xE4\x84\x20\xF4\xA7\xDF\x9D\xE9\x12\x5E\x68\xF2\x67\x6F\x1F\xC5\xF5\xF1\xF6\x6B\x46\x49\x07\x1A\x5B\xF4\x65\xDA\xE8\xF6\x5D\x63\x21\x50\x49\x7C\x45\xDD\xFD\xF1\xE9\xCE\x49\x7A\xE4\xC7\xFA\x5D\x5E\x4D\xD4\x6D\xB7\xFA\xEB\x9B\x46\x40\x66\xAA\x4C\xFF\xF5\x7E\x7C\x36\xE7\xEC\x3C\x45\xEA\xEB\xF3\xFB\x74\x0B\xF8\xF3\xBE\xF1\x94\x70\x90\x83\xFC\x82\xF1\xCE\xFD\x63\xFD\xF0\xC1\xC6\x4B\x9D\xE8\xE2\xFD\x41\x0B\xFD\xDE\xC2\xD8\xD0\x23\x8B\xEC\x45\xA6\xBD\xFC\xAD\x22\x9C\xF1\xD1\x68\x12\x10\xD1\x45\x7A\x2C\x4F\x4A\xD1\x73\x68\x86\x76\x24\x96\x70\x00\xF9\x73\x4E\xD7\x70\x66\x10\x4F\x7F\xCE\x71\x80\x00\x03\x80\x27\x3E\x5D\x5B\x77\x4A\x07\x84\x10\x8B\x56\x7F\xBE\x28\x2C\x17\x83\x10\xEB\x76\x78\xFD\x70\x41\xAD\x7D\x7C\x28\x81\x48\x04\x83\x76\xB7\x33\x27\xEE\x72\x1B\xEC\x7C\x7C\x82\x7B\x2C\x9F\x6D\x78\xCB\x26\x20\x23\x8E\x7A\x51\x7D\x24\x06\x2E\x7D\x93\x75\x82\x32\x48\x79\x00\x89\x2E\x81\x49\x77\x00\x0C\x71\x65\x07\x77\xF7\x5D\x79\x12\x22\x52\xBC\x1A\x84\xD0\x12\x78\x06\x25\x83\x8C\x77\x83\x89\x4B\x7A\xA6\x7A\x1F\x3D\x8F\x80\x63\x75\x44\x42\x83\x81\x44\x80\x41\x94\x24\x74\x98\x20\x85\x16\x2C\x84\xCE\x2E\x84\x57\x82\x82\xF3\x32\x52\x82\x7C\x22\x54\x87\x78\x56\x8F\x81\x3F\x8B\x83\x5A\x8F\x32\x5C\x85\x7E\x64\x76\x78\x94\x25\x84\xA2\x70\x00\x35\x76\x86\x6C\x08\x86\x3E\x13\x10\x6A\x84\x87\x02\x18\x3F\x6E\x8F\x78\x8A\x7C\x7C\x9A\x7B\x86\x8D\x79\x85\x4E\x28\x87\xC7\x70\x84\x87\x22\x78\x8B\x5B\x80\x99\x73\x84\x89\x89\x87\x18\x80\x40\x5B\x85\x89\x10\x82\x43\x09\x1F\x78\x54\x81\x87\x86\x73\x87\xBF\x2C\x7F\x76\x83\x89\x0C\x1E\x83\x91\x83\x8A\x1C\x27\x82\xB2\x72\x7B\x25\x7F\x25\x90\x87\x3F\x6D\x8B\x55\x87\x7F\x4D\x1E\x5D\x1A\x4F\x86\x6A\x5B\x55\x79\x81\x3C\x7C\xAA\x8C\x2D\x9E\x84\x7E\xA0\x84\x89\xAC\x8D\x85\x26\x86\x78\xC7\x37\x8B\x74\x01\x8C\xE5\x67\x88\x73\x2F\x4D\x28\x74\x8D\xAB\x83\x6A\x67\x8F\x82\x0C\x12\x66\x8D\x74\x8B\x6B\x23\x75\x9E\x47\x7A\x21\x82\x6E\x87\x4E\x23\x1B\x89\x10\x8B\x7D\x67\xB9\x78\x11\x14\x0C\x7B\xC7\x74\x8E\xDF\x65\x75\xE7\x8C\x2C\x8A\x4E\x23\x2C\x21\x8F\xA2\x8C\x82\x3E\x22\x81\xE5\x78\x81\xDE\x33\x07\xDA\x7A\x74\x7E\x3B\x8E\x02\x1E\x8E\x67\x26\x24\x8B\x72\x7F\x87\x74\x8F\x4B\x26\x8F\xD2\x7A\x8C\x85\x48\x7F\xC9\x88\x8E\xF9\x8D\x24\x00\x98\x81\x02\x97\x3E\x05\x99\x7C\xC0\x73\x79\x82\x7D\x6F\x65\x31\x83\xA5\x83\x12\xEB\x4B\x7F\x26\x9B\x92\x8E\x7D\x92\x0C\x13\x01\x2C\x98\x18\x8F\x7D\x80\x4E\x74\x7D\x16\x93\x91\x02\x10\x8B\x8C\x72\x88\x0E\x97\x91\xF8\x8D\x4B\x88\x7F\x78\x34\x86\x8C\x9C\x80\x00\x9A\x84\x82\x05\x87\x4A\xA1\x8D\x8C\x7A\x8E\x85\x7C\x89\x68\x7E\x8C\x2A\x03\x18\x84\x82\x84\x88\xB2\x76\x8D\xC8\x85\x8D\xC3\x8F\x78\x53\x84\x94\x60\x82\x10\x47\x9A\x83\x63\x7C\x75\xCC\x88\x85\xB2\x85\x06\x5F\x88\x82\x14\x81\x48\x63\x89\x56\x55\x90\x8D\x4D\x8C\x8B\xB9\x8A\x88\x5B\x93\x12\x70\x8E\x95\x6A\x99\x6A\x3E\x96\x1A\xE6\x6B\x94\x66\x9E\x8C\x41\x8F\x94\xCE\x71\x95\x41\x28\x1A\x4A\x5F\x96\x4E\x77\x3C\x58\x9C\x86\x5A\x9F\x52\x89\x77\x93\xBD\x7F\x88\x0C\x11\x96\xD7\x89\x94\x09\x2E\x97\x75\x80\x98\x97\x8F\x78\x99\x8E\x88\x45\x94\x99\x6F\x23\x65\x0A\x25\x96\x99\x9D\x94\x10\x43\x92\x64\x31\x93\x27\x97\x13\xA7\x88\x97\x14\x81\x62\x7B\x93\x6E\x4A\x94\x9A\xB1\x8A\x99\x99\x29\x98\x12\x22\x8D\xDA\x89\x95\x04\x52\x97\x62\x95\x7E\xBF\x82\x07\xBB\x9C\x98\xBD\x9E\x98\x8F\x7B\x80\xA8\x8E\x74\xC7\x8A\x97\xFD\x8A\x87\x64\x9F\x8A\xB1\x9F\x66\x32\x42\x8E\xAE\x2E\x2C\xBA\x93\x97\xBB\x8F\x52\xBD\x87\x32\xD9\x88\x9D\x9A\x6A\x9D\x2E\x9A\x14\x91\x7A\x9A\x32\x98\x92\xF0\x84\x9E\xED\x79\x7A",
"\x18\x15\x01\xCC\x74\x9D\x66\x2D\x75\xA7\x4B\x82\xCE\x9A\x81\xB6\x7B\x78\x04\x2E\x81\x08\x16\x7C\xD6\x77\x7C\xF0\x99\x20\xF2\x9F\x89\xDE\x48\x11\xFA\x9F\x97\xF3\x99\x20\x3D\x9C\x9F\x89\x68\x4F\xD0\x74\x93\x73\x26\x93\x0C\x17\xA0\x73\x2D\x9F\xC4\x1F\x9F\xCA\x81\xA0\xD0\x9D\x9C\x00\xA7\x4A\x10\xA4\xA0\x9F\x85\x44\x41\x93\x12\x43\x97\x7C\xCB\x92\x10\x2A\x95\x9A\x19\xA7\x99\xB4\x9C\x78\x96\x88\x96\x82\x99\x82\x10\x46\x84\x54\x92\x8C\xE0\x98\x9B\x69\x8E\x9B\xAB\x8C\x9B\xDC\x81\x1D\x5C\x95\x8C\x22\xA5\x94\x25\xA5\x9B\x05\xA4\x1C\x98\x90\xA4\x1D\xAF\xA2\x2D\xAB\x96\x62\x89\x68\x64\x89\x84\x32\xAB\x84\x70\x95\xA3\x33\xA7\xA3\xC4\x99\xA3\x6F\x8C\xA3\xBD\x73\xA2\x00\x0F\xA3\x2A\xA6\x99\x42\xA9\xA2\xDB\x96\x9B\x69\x9F\x9A\x61\x81\x98\x52\x97\x1D\x87\x9D\xA4\xD0\x16\x95\xC2\x76\x88\x36\xAC\x9B\x38\xAB\x88\x23\x1D\x88\xC7\x72\x99\x08\x1A\xA5\x5F\xA1\xA4\xA3\x97\xA1\x4C\x95\xA4\xA4\x88\x89\x0E\x83\xA7\x3E\xA1\x9D\x19\x88\xA2\x7A\xAC\xA1\xCA\x8E\xA1\xE5\x9C\x9A\x56\xAB\x7A\x58\xA6\xA7\x48\x93\x96\xB3\x95\xA8\x26\xA7\xA8\xCF\x84\xA3\x85\x82\x10\xD7\x98\x88\xBA\x8F\x9D\x4E\xAF\x9B\x18\x81\x9C\xC3\x9D\x89\x9C\xA1\x85\xC7\x9B\xA8\x93\x7D\xA8\x82\xAD\x97\x5E\xAF\xA8\xA6\x93\x9D\x4F\xA7\xA9\x00\x09\xA9\x52\xA2\xAA\xC5\x9D\xA9\x95\x9A\x75\xDD\x9A\xA9\x74\x91\xA5\xEC\x74\x8C\x65\xA1\x99\x45\x9C\x8F\xBD\x70\x7E\xEE\x96\x84\xA4\x77\x8F\x7C\x9D\x82\x4E\x72\x78\xBC\x17\x01\xE8\x91\x83\xBE\xA5\x98\xC7\x7A\x2F\xCA\x9F\x87\xC7\xA8\x93\x3F\x97\x3B\xCC\xA8\x11\x19\x0F\xAC\xAB\x7E\xA7\x93\x9E\xAD\xA8\x73\x12\xBC\x1A\x93\xE2\xA7\x13\x42\x96\xAA\x8D\x72\x7F\x43\xAB\xA5\x60\xA7\xA4\x63\xAC\x21\x30\xA2\x54\x4C\xAD\x98\xB6\xAF\x26\x8A\x9D\xA6\xC4\x9F\xA6\x75\x97\x13\x5D\x97\x7C\xEC\xAB\xAA\x9E\xA4\xA9\x64\xA1\xA1\x50\x99\xA4\xCE\x7B\xA4\x88\x93\x27\xF9\xAC\xAB\xFB\xA3\xA5\x70\xA7\x13\x77\x90\xB0\x45\x96\xAE\xAC\xAC\xA7\xF2\xA0\xAF\xA2\x10\x25\x46\xAF\xAB\x81\x88\xA6\x67\x8F\xAA\x57\x9A\xAF\xB4\xAC\xAF\xC6\x91\xA7\x90\x9B\x7A\xAA\x72\xA9\x44\xA4\xB0\x9B\x93\x12\x9D\x93\xAD\x15\xB9\xAA\x88\xA3\xAE\x8A\xAC\x10\xC9\x93\x27\x01\xBC\xB2\xEE\xAD\xAA\xB3\x82\xB2\x6B\xA8\xA9\x27\x58\x8B\xBA\xA9\x9D\xF7\xAB\x26\xBE\x8F\x70\xC2\x9E\x9D\xB5\xA4\xAA\x23\x18\x9C\xCC\x7B\xB3\x08\x16\xB1\x03\xB8\x91\xBD\x4E\x9E\xD1\x83\xB4\xD3\x8C\xB4\x39\xA7\xA7\x18\x89\xAB\xB3\xAB\xA9\x4D\xB6\x21\xDB\xAC\x10\x03\xA7\xAE\x6B\x2F\x98\x0C\x1B\x91\xEF\x8F\x95\x00\x07\xB6\x8D\x7D\x76\x6C\x36\xB3\x4A\x11\xB3\xBD\x7B\xB2\xF9\x9C\x7C\x72\xBB\xB5\xAB\x9A\x14\xBC\x18\x30\x68\xB6\x26\x33\x8A\xAE\x8C\x7B\x78\x61\xA9\x2E\x48\xA5\xB0\x84\x23\x95\xF4\xAB\xB0\xF8\xA1\x97\x0E\xB5\xB2\x10\xBD\xAF\x4A\x1F\xAF\xC0\xAF\xAB\x6F\x2D\x87\x08\xB8\x82\x0A\xB0\xB2\x83\x80\xB4\xD5\x93\x21\x24\xB2\xB6\x26\xB7\x5F\x55\xA8\xB3\x9E\x98\xB9\x6B\x2A\xB9\x8A\xB6\x2A\x86\x99\x2A\x8E\xBB\x26\x0D\xB7\xB4\x92\xB4\xAB\x5D\xBA\x14\xA6\x84\xB8\x9B\x8C\x10\x58\xB9\x9B\x5A\xB1\xAA\x62\xB7\xBB\x55\xB8\x8F\xA0\xAC\xB5\x11\xBA\x14\x50\xB0\xA8\xBC\xB0\xBA\xC8\x71\xAB\xBF\xB6\xBC\xA3\xB4\xA1\x18\x90\xB6\x6E\xA3\xB9\x91\xB1\xB8\x4E\x70",
};

			void JsonGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void JsonUnescapingString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class JsonTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				bool SetMember(JsonLiteral::JsonValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
				{
					vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
					if(token)
					{
						if(token->GetValue()==L"True") { member=JsonLiteral::JsonValue::True; return true; }
						else if(token->GetValue()==L"False") { member=JsonLiteral::JsonValue::False; return true; }
						else if(token->GetValue()==L"Null") { member=JsonLiteral::JsonValue::Null; return true; }
						else { member=JsonLiteral::JsonValue::True; return false; }
					}
					member=JsonLiteral::JsonValue::True;
					return false;
				}

				void Fill(vl::Ptr<JsonNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<JsonLiteral> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonString> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						JsonUnescapingString(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<JsonNumber> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<JsonArray> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->items, obj->GetMember(L"items"), tokens);
				}

				void Fill(vl::Ptr<JsonObjectField> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->name, obj->GetMember(L"name"), tokens))
					{
						JsonUnescapingString(tree->name, tokens);
					}
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonObject> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->fields, obj->GetMember(L"fields"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Literal")
					{
						vl::Ptr<JsonLiteral> tree = new JsonLiteral;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"String")
					{
						vl::Ptr<JsonString> tree = new JsonString;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Number")
					{
						vl::Ptr<JsonNumber> tree = new JsonNumber;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Array")
					{
						vl::Ptr<JsonArray> tree = new JsonArray;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"ObjectField")
					{
						vl::Ptr<JsonObjectField> tree = new JsonObjectField;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Object")
					{
						vl::Ptr<JsonObject> tree = new JsonObject;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> JsonConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				JsonTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<JsonLiteral> JsonLiteral::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonLiteral>();
			}

			vl::Ptr<JsonString> JsonString::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonString>();
			}

			vl::Ptr<JsonNumber> JsonNumber::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonNumber>();
			}

			vl::Ptr<JsonArray> JsonArray::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonArray>();
			}

			vl::Ptr<JsonObjectField> JsonObjectField::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObjectField>();
			}

			vl::Ptr<JsonObject> JsonObject::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObject>();
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParseAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return JsonConvertParsingTreeNode(node, state.GetTokens()).Cast<JsonNode>();
				}
				return 0;
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParse(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> JsonLoadTable()
			{
				vl::stream::MemoryStream stream;
				JsonGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
