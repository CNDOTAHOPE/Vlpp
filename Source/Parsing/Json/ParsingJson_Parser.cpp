#include "ParsingJson_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace json
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Literal:Node"
L"\r\n" L"{"
L"\r\n" L"\tenum Value"
L"\r\n" L"\t{"
L"\r\n" L"\t\tTrue,"
L"\r\n" L"\t\tFalse,"
L"\r\n" L"\t\tNull,"
L"\r\n" L"\t}"
L"\r\n" L""
L"\r\n" L"\tValue value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class String:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content(JsonUnescapingString)\t\t\t\t@Color(\"String\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Number:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Array:Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] items;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ObjectField:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name(JsonUnescapingString)\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\tNode value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Object:Node"
L"\r\n" L"{"
L"\r\n" L"\tObjectField[] fields;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token TRUEVALUE = \"true\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token FALSEVALUE = \"false\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token NULLVALUE = \"null\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token OBJOPEN = \"\\{\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token OBJCLOSE = \"\\}\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARROPEN = \"\\[\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARRCLOSE = \"\\]\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMMA = \",\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token NUMBER = \"[\\-]?\\d+(.\\d+)?([eE][+\\-]?\\d+)?\"\t@Color(\"Number\");"
L"\r\n" L"token STRING = \"\"\"([^\\\\\"\"]|\\\\[^u]|\\\\u\\d{4})*\"\"\"\t\t@ContextColor();"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"\\s+\";"
L"\r\n" L""
L"\r\n" L"rule Node JLiteral"
L"\r\n" L"\t= STRING:content as String"
L"\r\n" L"\t= NUMBER:content as Number"
L"\r\n" L"\t= \"true\" as Literal with {value = \"True\"}"
L"\r\n" L"\t= \"false\" as Literal with {value = \"False\"}"
L"\r\n" L"\t= \"null\" as Literal with {value = \"Null\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ObjectField JField"
L"\r\n" L"\t= STRING:name \":\" JValue:value as ObjectField"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Object JObject"
L"\r\n" L"\t= \"{\" [JField:fields {\",\" JField:fields} ] \"}\" as Object"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Array JArray"
L"\r\n" L"\t= \"[\" [JValue:items {\",\" JValue:items} ] \"]\" as Array"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JValue"
L"\r\n" L"\t= !JLiteral"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JRoot"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
;

			vl::WString JsonGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 3791; // 17748 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 719;
const vint parserBufferRows = 4;
const char* parserBuffer[] = {
"\x00\x0B\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x86\x81\x21\x6F\x6C\x2F\x32\x37\x84\x86\x02\x86\x00\x17\x82\x93\x24\x3A\x39\x34\x37\x67\x06\x98\x8A\x88\x8E\x84\x00\x88\x12\x94\x98\x87\x0B\x93\x81\x20\x3A\x74\x4E\x21\x2D\x35\x32\x90\x86\x92\x0C\xA6\xA8\x93\x85\x88\x84\x96\x86\x3F\x80\x0B\x25\x39\x3F\x3B\x88\x32\x36\x88\xB8\x88\x8A\x99\x88\x9F\x96\x40\x83\x83\xA5\xA7\xA1\xA4\x83\xA5\x04\xCD\xA9\x9D\x94\x81\xA1\xAE\xA9\x44\xC6\xB2\x28\xAC\xA9\x86\x93\xAC\x03\xBB\xAA\x8C\x88\x00\x8D\xB6\x81\x42\x6F\x35\x2E\x34\x31\x32\x39\x3C\x56\xE6\xA5\x89\xBE\xA3\xB4\x85\xB7\x7F\x83\xB1\xB3\xB5\xBF\xB9\xBC\x81\x58\x83\x9A\xAF\xAC\xB6\xB6\xC0\xB9\x74\xF6\xB8\xA5\xB8\xC7\xB2\xC4\xBE\x5B\x8E\xCD\xD0\xB0\xCD\xC3\xC9\x91\x96\x8D\x98\xCC\xC8\x82\x8D\xD3\x81\x4E\x75\x2D\x22\x35\x32\x3B\xC3\x82\x0C\x18\xB1\xCF\x8F\x36\x34\x3B\x32\x78\x74\x2A\xB8\x80\x06\xAF\xCB\x9C\x2E\xF2\x32\x21\x38\xBF\x7E\xE3\xE3\xFF\x3E\xC2\x81\xAC\x21\x37\xDB\xE1\x6C\x48\xC8\xE4\x08\x8C\xEA\x80\x27\x6F\x64\x35\x92\xE6\xE6\xD0\x82\xD3\xA9\xAB\xED\xDC\xED\xE8\x8E\xD3\x27\x62\x6A\x25\x23\x34\x3C\xF3\x7F\x80\x0C\xF0\xC0\x08\xFA\xF4\xF6\x23\x34\x65\x6C\x08\xA4\xFE\xEB\x82\xD2\x8E\x1E\x60\x4E\x7A\x72\x00\x21\x65\x81\x70\xC3\x79\x16\x82\x49\xCE\x65\x1D\x1B\x1C\x03\x90\x50\x01\x73\xCF\x61\x1C\x1B\x82\x03\x76\x16\x85\x1D\xDB\x5C\x7D\x7E\x40\xE0\x6A\x6C\x6A\x1C\x04\x81\x53\x19\x6D\xB7\x76\x6E\x7B\x87\x19\x43\x44\x7F\x7A\x74\x2C\x86\x6A\x19\xF8\x7A\x70\x84\x79\xF2\x44\x42\x7F\x8B\xF6\x75\x84\x1A\x75\x08\x40\x9E\x1B\x4C\x65\x14\x60\x40\x46\x3B\xA9\x70\x8F\x7D\xF9\x64\x18\x86\x40\x1A\xAC\x1C\x87\x8A\xE6\x43\x40\x83\x47\x67\x25\x83\x43\x89\xB6\x65\x16\x6C\x6F\x0F\x18\x44\x08\x46\x61\xBC\x66\x9A\x52\xEE\x64\x77\x9B\x4D\x69\x9C\x7B\x98\x9A\x6D\x88\x7F\x9B\x55\x71\x88\x79\x00\x46\x77\x82\x44\x16\x14\x55\x05\x16\x15\x10\x4C\x3D\x90\x90\x41\x40\x9D\x4C\x84\x6F\x02\x18\x4A\x02\xA2\x03\x46\x10\xA3\x14\x7E\x80\xAD\x9F\x93\x00\x26\x16\x87\x1C\x45\x98\x43\x00\x9E\x9C\x97\x75\x14\x13\x4C\x3F\x91\xA1\x11\x83\x83\x42\x91\x1D\x6C\x2C\x19\xA0\x43\xA5\x8B\x72\x87\x13\x42\x0A\x1F\x10\x14\x45\x0E\x1B\xA8\x42\xB7\x9C\x1B\x1F\xA6\xC0\x5B\x61\x62\x40\xB0\x8A\x13\x10\x13\x4F\x10\xA7\xAC\x41\xB9\xBD\x1D\xA9\x8B\x51\x4D\xB0\x01\x10\x52\x12\x13\xAD\xAD\xC7\x83\x49\xAF\x16\x06\x84\x80\x60\x41\x80\x50\xB2\x17\xB0\xC5\x85\x15\xB6\x40\xB9\x9D\x1C\x8B\xB6\xBF\x4C\x59\x5B\x13\x4D\x0D\x11\x12\x91\x3D\x6C\x04\x82\x7B\x94\x83\x1F\x10\xB1\x4E\x30\xB3\x42\x0E\xE8\x88\x6C\x7D\x95\x9E\x8D\x12\x11\x11\x52\x1F\x08\x46\xC1\x02\x5B\x1C\x15\x0B\x5D\x3F\x0C\x14\x19\x2B\x28\x0E\x0B\xC3\x2B\x29\x0F\x0C\x0A\x5B\x25\x15\x11\x17\x5B\x2B\x0B\xC1\xC3\x14\xD6\xC9\x9C\x42\x23\xDF\x70\xC0\x00\x53\x3B\x99\x12\x13\x47\x1B\x08\x46\xCB\x02\x62\x08\xC6\x17\x5C\x1C\x12\x09\x17\x7C\x35\xCB\x16\x17\x75\x38\xC5\xCD\x1D\x0F\xFB\x14\x0D\x1F\x29\x2A\x02\x0B\xA2\x0C\x48\xD8\x42\x91\x94\x93\x10\x15\x10\x43\x05\x1C\xAC\x42\x53\xDC\x13\x1F\x0A\x39\x89\x44\x7B\x98\xBD\xAA\xB2\x42\x12\x52\x2F\x1F\x18\x1D\x65\x88\x45\xD8\xD8\x62\xF4\x1E\x09\xD8\x63\xDC\x46\x5C\x1D\x4A\xC4\x4A\xD0\x10\x20\x24\x0C\x0C\xDA\x63\xFE\x04\xA4\xDE\x74\x19\xD2\x42\x7C\x7C\xEE\x0E\xDA\x1C\x74\x25\xC3\x43\xC8\x74\xF7\xDC\xD8\x1D\x3E\x1A\x9F\xD4\x8F\x85\xDD\xA0\x02\xAC\x4A\xAC\x7E\x09\x0C\x49\x18\x49\xE6\x40\x77\xD0\xEE\x0E\x0E\x20\x22\x0B\x1E\x08\x74\xDB\x10\x0A\x12\x4C\xBA\x70\x08\xE8\x34\x8D\x93\x1C\x08\x7B\x21\xEC\x0A\x08\xA7\xE9\xE4\x1B\xEA\x20\x2D\xE6\x8C\x08\x7D\x20\x0D\x15\xE8\x7D\x34\xE1\x1B\xEB\x90\xF2\x83\x42\x12\x41\x02\x74\x71\xBF\x00\x00\x68\xF2\xF2\x79\x17\xE5\x10\x46\xD3\xDC\xEF\xF1\x82\x9F\xE1\xEB\x14\xE9\x20\x26\xEA\x12\x15\x1B\xA5\x18\xED\x83\x0F\xB0\xE2\xEC\xED\xDF\xE1\xF3\xFB\x6D\xE5\xFD\xEF\xEF\xCD\xC2\xEF\xE9\xF1\x82\x8E\xD3\xE0\xE6\xE1\x02\x63\xC4\xE5\x7D\x6A\xF3\x0B\xE4\x42\xFF\x7D\x71\xE5\x0C\x70\x74\xD1\x74\x76\x7B\xB6\x78\x76\xEE\x64\x0F\x75\xD8\x62\x03\x76\xB5\x7E\x46\x02\xBE\x4F\x74\xF7\x40\x79\x7E\x20\x10\x70\x10\x46\x7F\x6A\xDB\x4C\x7E\x79\xB6\x77\x72\x0E\x18\x23\x84\xEB\x76\x71\x7B\x29\x72\x0B\xCA\x47\x08\x77\x21\x74\x24\x6E\x22\x1A\x04\xFA\x60\x72\x4A\xF1\x60\x71\x4A\x1C\x40\x07\xF0\x19\x83\x80\xDB\x5C\x83\x72\xF3\x6B\x7A\x66\x40\x80\x7A",
"\x17\x32\x05\x7A\x08\x28\x8B\xDD\x41\x89\x0F\xEC\x62\x03\x7B\xDD\x67\x74\x0D\xB9\x80\x74\xF2\x4D\x87\x7C\x52\x8A\x7D\x15\xEC\x75\x82\xDF\x61\x75\x0B\x18\x8C\x88\x10\x1F\x87\x78\x0A\x6D\x36\x42\x71\x63\x22\xD2\x4A\x06\x8C\xE8\x17\x72\x1F\x18\x30\x8E\xF5\x6D\x86\x42\x27\xAE\x08\x55\x6C\x18\x80\x1D\xEC\x04\x6F\x3B\x0E\x38\x0D\xE6\x78\x86\xF8\x3D\x01\x75\xD4\x29\x54\x76\x7D\x0D\x02\x02\x77\x6B\x8E\x27\x96\x54\x0D\x98\x5A\x8D\x83\x50\x3D\x8F\x3F\x81\x92\x7D\x84\x82\x06\x11\x17\x55\x0C\x44\x8A\x94\x91\x93\x95\x8D\x01\x86\x5D\x92\x1D\xAF\x73\x8F\x95\x94\x0C\x20\xB1\x72\x90\x10\x19\x94\x0A\x72\x1C\x42\x27\x8B\x9C\x8D\x50\xAC\x08\x85\x2A\x6C\x64\xEE\x5C\x49\x44\x3A\x26\x90\x04\x57\x40\x24\x10\x1F\x95\x97\x0A\x77\x90\x74\x4E\x15\x0A\xC0\x04\x6B\x96\x14\x5E\x4E\x97\x3B\x81\x3F\x88\x40\x0B\x6F\xC5\x75\x79\x70\x31\x05\x04\x46\x5A\x96\x7B\xC5\x59\x79\x04\xD7\x64\x3B\x30\xB4\x9E\x9A\xD0\x60\x9A\x83\xD7\x90\x71\xD9\x04\x27\x6C\xC8\x6B\x69\x6D\x45\x14\x2F\x6C\x08\x23\x9E\xBB\x7B\x78\x46\x3E\x00\x07\x06\xA7\x69\x7D\x1A\xA4\x8F\x6B\x53\x85\x0F\xE5\x3D\x08\x22\x82\x96\x79\xA0\xDF\x85\x9B\x19\xFC\x84\x98\x84\xA6\x99\x9C\x79\x03\x9F\xDD\x0E\xA0\x05\x73\x83\x83\x9F\x16\x27\x7A\x07\xC3\x88\x74\x1F\x46\x8D\x84\x08\x20\xA7\xDD\x27\x80\x75\x14\xAB\x85\x85\x44\x41\x76\x0C\xF4\x6D\x9E\x2A\xA0\x05\x95\x3B\x90\x72\x0F\xFC\x9C\x88\x07\x18\x26\xA6\x5F\x6C\x8B\x3B\xE3\x61\x9E\x32\x3E\x6F\x48\x02\x36\x9C\x13\xF9\x93\x8C\x8E\xBB\x88\x02\x18\x28\xAB\xD7\x7B\x8B\xA6\x3A\x3D\xA5\x01\x18\x30\xA9\x50\xA0\x96\x98\xA2\x95\x99\x6D\x52\xA8\x21\x56\x81\x7B\x71\x9E\xA9\x8A\x20\x4A\x76\x9E\x37\xFA\x9F\x87\x96\xA5\x08\xA7\x08\x28\xAE\x59\xCD\xAD\xA7\x9F\xB2\x3E\x9E\x08\xA4\xAC\x4D\xD0\x7F\x9E\x22\x89\x46\x05\x35\x0C\x10\x46\x7A\xA6\x7B\xA1\x85\x80\x8A\xDE\x61\xA3\xFA\x0E\x4F\x74\x20\x0E\x80\x82\x66\xA3\xB1\xFB\x5E\x80\x7F\x5F\x8C\x8C\x98\x7E\xBA\x7B\x01\xD9\x85\x86\xC5\xB3\x0C\x6E\x87\xB3\x86\x16\xA0\x06\x8A\xDE\x4C\xB0\x8C\x8E\xB0\x79\x59\x9B\xAE\x57\x8E\x8D\x4E\x05\x33\x00\xA4\x41\x22\xA6\xB4\xFD\x38\x92\x85\xBA\x80\x76\x0B\xE2\x71\x86\xCD\x95\xB7\x86\xEA\x71\xA5\x0F\xBE\x48\xA3\xD3\x39\xA4\xAE\x1C\xBA\xA7\x0C\x48\x84\x20\x25\x90\xA6\x89\x80\xB4\xB2\x4B\x9D\xB9\xB2\x96\x82\xB3\x8B\x84\xBE\xB3\xFB\x20\xBB\x86\x26\xA9\x9B\x80\xF8\x60\x02\xFE\x6E\x92\x06\x4A\x18\x26\xBB\xD6\x7E\x71\x01\xA3\x71\x8B\xD6\xB7\x74\x75\x14\x98\xB0\x16\xE6\xB3\x82\xD7\x52\xBF\x82\xBF\x90\x70\x31\xE2\xB1\x74\xF2\x88\x82\x82\xE8\xAE\xBE\x61\xEB\xB9\x81\xFC\xBB\x76\x82\x22\x01\x79\x7C\x83\x83\xB4\x1F\x68\xAC\x20\x6A\xA1\x85\x57\xF4\x2E\xAD\x81\x36\x9F\x84\xFA\x97\xB8\xFF\x59\xBB\xBB\x01\xAE\x04\x06\xFF\x64\x21\x00\xF7\x9C\x3C\x27\xB6\xB9\x82\x4D\x4D\xBF\xEE\x4D\xB0\xC4\xD5\x7E\xBC\x81\xEF\xA1\xC0\x06\x90\x72\xC2\x18\x51\x00\x23\x2F\xCF\x72\x85\x8B\x73\x70\x3A\x33\x9C\x20\xF3\x94\x6E\x3D\x9E\x7D\xC4\xF6\x19\xAC\x20\x5B\xAE\x9D\x8D\x8D\xC2\x21\xC4\x5C\xC4\x71\x65\xA1\xA2\x52\x88\x2B\xC9\xB5\xB4\xC4\x0E\x6F\x64\xC8\x00\x3A\xC3\xA3\xF0\x7E\x01\xC9\xE1\x77\xC7\x40\x73\x9B\xAD\x1A\xDF\xA8\x00\x73\x60\x05\x95\xB5\x8E\x07\xBA\x8A\xA0\x3A\x12\x18\x21\x9A\xCB\xA6\x97\xA6\xB5\xC7\xC7\x03\x39\xA8\x95\xE7\xC5\x8E\x33\xFB\x8F\xC0\x03\x2A\xAC\x53\xB5\xCA\xCA\x81\x39\xC2\xCC\x74\xD7\x95\x59\xCC\x8B\xC8\x82\x0D\xCA\xA7\x4F\xD1\xC8\x92\x03\x23\xCF\xA1\x83\xD0\x7A\x7D\xC0\x00\x97\xBA\xAE\xCA\x46\x45\xC8\xD0\x8E\xDC\x9E\xED\x05\xD3\x21\x26\xCA\xC1\x6D\x43\xCB\xD3\xA5\x8F\xCE\x47\x2B\xDA\xD6\x47\x91\xDC\xC9\x08\x95\xD9\x68\x46\xC0\xD7\x84\x3D\xD1\x70\x43\x15\xCC\x7E\xBC\x99\xC3\x20\x1B\xD4\xBE\x01\xE5\xBD\xBF\xDC\x54\x86\x7C\x0F\x88\x7D\xAF\x8B\x8D\x8B\xF7\x42\xC2\xB7\xFC\x65\xA9\x69\xFB\x8F\xCB\x35\x8C\xAA\x06\x72\x88\x21\xB4\xD4\xAB\xA0\x47\x9C\x92\x92\xC6\x80\x06\x1F\xAA\x97\x93\xCA\x99\x93\x93\x90\x85\x95\x1F\x12\xA1\xD0\x27\xA4\x90\xDB\x0B\xBA\xDA\x25\xAC\x98\x93\xD0\x70\x92\x96\xBC\x64\xDD\x23\x85\x87\x8F\x43\xBF\x93\x8F\xEA\xDC\xD8\xBB\xDE\xD5\x90\x3C\x88\x92\xDE\xB6\x8F\xB7\x49\xA0\x7C\x97\x67\xBF\x91\x98\x67\x00\xE1\x55\xC8\x9A\x99\x81\x52\x0D\x99\x5D\x56\x37\x2F\xD2\x9D\x35\xDE\xA6\x67\xB7\x09\x46\xCE\x4E\xB4\x04\xB9\x81\x06\xB9\xB2\x4F\x93\xB1\x62\xD0\xB5\x7D\xCC\x8A\xBE\x86\x9C\xBC\x89\x8A\xD4\xB2\x7E\xE8",
"\x56\xE6\x3F\x1A\xBE\x46\x99\xA1\x84\x06\xD5\xBB\x5B\x20\x23\xA5\xD5\x49\xB9\x9C\x84\xD9\xA9\xA5\xB6\x27\xF8\x74\x4C\xC4\x7B\xB7\x26\x6F\xE2\x34\x5D\x7C\x6F\xB2\x40\x48\x3A\xED\x33\x4A\x6B\xDC\x31\xD7\x0F\x90\x7C\x36\x0B\x23\x27\x5F\x19\xA0\xA1\xF8\x4B\xE8\x35\xEC\x25\x0C\x37\x18\x17\xE8\x77\x76\xC6\x96\xAE\xD7\x3E\xEB\xBC\x3A\x02\xD8\xD2\x3F\xD1\x04\x54\x54\x89\xBC\x3C\x03\xDA\xC8\x35\xC1\x26\x52\xCA\xA6\x3E\x5C\x36\x07\x73\xE7\x38\x0E\x23\x5F\x35\xFF\x1C\x36\x91\x4F\xE4\xF1\xC2\xC0\xF4\x40\xE3\x45\xF0\x00\x4C\x68\x23\xC1\xC4\xF7\xAA\x63\x65\x22\x91\x7F\x19\xBB\xA9\x4A\xF3\x20\x8C\xEC\x22\xE3\xCF\xE0\xF2\x3A\x33\x48\xF0\xCC\x6B\x5B\xE5\xEB\x40\xF0\x3C\xC8\xEB\xF4\xE4\x5B\x2C\x43\x09\xF5\xF1\x58\xDB\xF1\x48\xD5\x23\x23\x6C\xBC\x35\xEE\xFD\x17\x2B\xF2\xCB\x44\x41\xE1\xCB\x56\x40\xCB\xE3\xF5\xED\xC4\x26\x41\x06\x28\xF0\xE7\xAC\xD3\x71\xA0\xA2\xEA\xF6\xD7\x00\x02\x90\xB3\xC0\x07\xDD\x65\x04\xEE\x31\xAD\xF2\x43\x3D\xBC\x32\xFA\x0B\xA0\xF1\xB6\x44\xF2\x20\xDE\xDA\x54\xFB\xCC\x5E\xB6\x5D\xC1\xF8\x23\xE1\xDC\xF8\xCB\x35\x89\xF9\xD7\x68\x20\x4B\xF0\x54\x50\xDC\x98\x58\xF8\x74\x54\xFE\x58\xEB\xC3\x8C\x5B\x65\x96\x94\xE0\xAC\x4A\xF6\xC2\xDE\xFC\x21\xBE\x77\x79\xC0\x7A\x20\xE5\x70\x7E\xE8\x7C\x21\xEA\x7B\x7C\xEC\x7C\x7C\x5B\x71\x7B\xD7\x18\x47\xF2\x76\x21\xF4\x7E\x13\x03\x16\x7F\xBE\x28\x7F\x6C\x66\x4C\x87\x78\x11\xAC\x74\x78\x89\x7D\x7B\x06\x83\x57\x6E\x75\x80\xE7\x7C\x4F\x01\x52\x79\x23\x15\x79\xE0\x7F\x81\xDF\x75\x82\xC6\x70\x51\xC2\x71\x82\x2F\x81\x50\x80\x7F\x65\x2C\x20\x7E\x09\x13\x79\x70\x6E\x2A\xDC\x7F\x7F\x54\x32\x83\xE2\x70\x83\x24\x84\x7C\x07\x89\x29\x4F\x75\x3F\x05\x7F\x25\xF7\x73\x10\xCE\x36\x81\x73\x2F\x43\x14\x72\x07\xD7\x76\x54\xFA\x73\x79\xA6\x7D\x1B\xE0\x7E\x83\x04\x11\x80\x8A\x73\x80\x31\x8E\x82\x41\x81\x50\xAF\x7F\x15\xCE\x29\x84\x9E\x7B\x84\x02\x1D\x84\xB6\x45\x78\x3F\x48\x70\x53\x8B\x6C\x6B\x80\x78\x46\x29\x5D\x85\x73\x86\x6B\x23\x75\x03\x4C\x1B\xB1\x6F\x0F\x89\x7C\x87\x96\x63\x27\x46\x26\x7E\x3F\x80\x86\x17\x73\x1F\x79\x82\x21\x64\x86\x3F\x04\x63\x84\xA8\x71\x6B\x5C\x88\x83\x45\x8E\x87\x17\x8B\x26\xFA\x20\x80\x40\x85\x88\x54\x78\x88\x03\x11\x14\x47\x6C\x22\x76\x87\x26\x8E\x88\x83\xCA\x7B\x80\x7C\x38\x83\x80\x71\x69\x3F\x52\x8A\x88\x13\x79\x46\x21\x69\x75\x80\x7E\x6F\x70\x3D\xB4\x72\x82\xC4\x12\x89\x4A\x19\x78\x5F\x62\x78\x8C\x83\x10\x8F\x8F\x78\xCA\x70\x77\x27\x35\x88\x10\x5C\x22\x82\x88\x7A\x03\x8D\x8B\x84\x85\x7C\xC7\x71\x3E\xB6\x88\x81\x80\x8D\x78\x2D\x84\x7C\xB1\x89\x20\xB3\x8F\x82\x4C\x4E\x89\x97\x8A\x8C\x10\x58\x8C\xD2\x8A\x7C\xA5\x8F\x26\x72\x81\x55\xAA\x8A\x14\x93\x78\x8B\x84\x71\x88\x1C\x81\x8C\x03\x15\x8C\xA3\x71\x81\x6C\x0C\x8D\xC6\x86\x82\xE1\x3F\x79\xAC\x87\x53\xE3\x87\x8F\xE4\x83\x12\x46\x2B\x4E\xE3\x8F\x0F\x5C\x8D\x8C\x9D\x67\x8E\x6A\x69\x8E\xC6\x74\x10\x6B\x64\x84\xF2\x85\x43\x1D\x8B\x7E\xE9\x26\x45\xD5\x81\x84\x4C\x40\x90\x02\x11\x63\xCF\x81\x1F\x04\x92\x7E\x3A\x29\x8D\x20\x27\x3C\x62\x8E\x8B\x5D\x32\x48\x0F\x92\x8C\xB6\x32\x91\x00\x0C\x69\x67\x26\x24\x5C\x89\x78\x2C\x20\x8F\x77\x89\x90\x1C\x2B\x90\x0A\x8D\x90\x5C\x41\x92\xDA\x80\x8C\x4F\x70\x78\xB9\x79\x85\xA3\x83\x10\xA9\x84\x78\xB5\x7E\x24\xBB\x82\x80\x2E\x95\x06\x09\x8B\x80\x0B\x8D\x7C\x0E\x8F\x7C\xB1\x41\x7D\x54\x83\x7D\x84\x75\x3F\x4E\x8E\x8C\xCE\x81\x68\xDA\x7A\x89\x97\x7A\x85\x3C\x9A\x91\xE1\x76\x5E\x5F\x88\x90\x33\x8D\x80\x9C\x7A\x7C\x82\x4F\x7E\x9C\x4E\x8E\x13\x89\x88\x51\x9C\x84\x4D\x99\x7D\x93\x7C\x7F\x3A\x9C\x90\x7F\x3A\x95\xA6\x1C\x95\x41\x9D\x85\x43\x95\x94\xE9\x27\x94\x60\x90\x7B\x0F\x89\x2A\x66\x9F\x94\xD5\x7B\x86\x68\x8D\x3C\xF9\x7A\x81\x93\x78\x78\x2B\x8B\x93\x71\x99\x8C\x1B\x9D\x41\x3E\x2D\x95\xF1\x8F\x95\x35\x48\x82\x37\x1A\x82\xDC\x7C\x82\x16\x9C\x98\x5B\x96\x3B\x90\x9F\x7B\x43\x99\x83\x23\x1B\x83\x58\x8D\x83\x8A\x90\x54\x5E\x91\x84\x9C\x95\x97\x6C\x83\x94\x9F\x83\x9A\x14\x82\x10\x66\x8F\x86\xBF\x23\x39\x69\x97\x26\x50\x82\x22\xAD\x12\x9B\x53\x9B\x47\xA5\x76\x95\x8A\x78\x95\x8B\x97\x9A\x22\x9F\x98\xAA\x9E\x93\xAC\x90\x98\x65\x8E\x4C\x4A\x83\x89\x69\x85\x98\x0B\x5B\x9A\xC6\x7E\x86\x83\x9A\x86\x4E\x98\x8F\xD6\x96\x26\x35\x8A\x8E\xAA\x80\x78\x3F\x57\x90\xD7\x94\x99\xF9\x8C\x10\x14\x00\x7E\xAD\x9C\x1B\x77\x75\x74\xB6\x7A\x9D",
"\x9B\x9E\x23\x24\x94\x92\x13\x02\x90\x0C\x15\x01\xD1\x88\x7A\xE7\x9C\x3F\xB6\x34\x93\x8D\x93\x39\x33\x51\x9F\x72\x91\x73\x4D\x20\x93\x85\x85\x88\xC4\x6A\x87\x12\x27\x64\xEE\x90\x9F\xB8\x23\x9F\xA3\x75\x9F\x4B\x29\x77\xEA\x93\x97\xFB\x99\xA0\x9A\x90\xA1\x3E\x20\xA0\xCA\x82\xA0\x14\x44\xA0\xCE\x27\x64\x86\x78\x7B\xBE\x9B\x7B\xA5\x9E\x9D\x9E\x96\x8D\xD0\x3D\x99\x42\x92\x99\x08\x8E\x91\xCB\x78\x94\xAC\x23\x10\xD0\x7F\x97\x47\x81\x98\xD5\x93\x9B\xBB\x95\x85\xA0\x1F\xA1\xFE\x71\xA2\xFD\x98\x71\xE4\x7C\x10\xEC\x87\xA2\x61\x8B\x97\x6F\x24\x29\x63\x9A\x7C\xF0\x7C\x94\x70\x83\xA3\x6F\x20\x95\x82\x9C\x9C\x84\x99\x81\x6C\x93\x12\x6E\x94\x9A\x70\x90\x00\x22\xA0\xA4\xC2\x8C\x44\x26\xA6\x97\x28\xA4\x94\x2A\xAA\x97\xE9\x79\x94\x86\x4C\x06\x30\xA3\x27\x4C\xAA\xA4\x6A\x99\xA4\x51\xA7\x13\x88\x97\x99\x3A\xA3\xA1\xC7\x3A\xA5\xC5\x9F\x74\x45\x80\x9E\x57\x16\x99\xC4\x78\x99\x08\x17\xA5\x5C\xA0\x91\x25\xA3\xA7\x4F\x8F\x99\xAB\x81\x9A\x38\xAF\x74\xC0\x96\xA5\x3B\xA3\x7E\x04\x8E\xA3\x89\xA6\x56\xAD\x98\x84\xCA\x97\x86\x4E\xA4\x9D\xCF\x96\x9C\xC6\x71\x85\xBA\x99\xA6\xB4\x96\xA3\x37\x17\x85\xFD\x76\xA8\x6F\xA2\x9C\x35\x9F\xA7\x8C\xA0\xA7\x5A\x75\x43\x8F\xA2\x21\xB1\x93\x9D\xCE\x93\x7F\x96\xA2\x7E\xD2\x93\xA9\xAD\xA2\x81\xFA\x83\x12\xA1\x7F\x9D\x76\xA9\x10\x3F\x52\x9F\xB8\xA8\x8F\xBD\x95\xA5\x85\x7A\xA7\x04\x1C\xAB\xC4\x7E\x7A\x39\xAD\xA2\x02\x13\x7B\x0F\xAE\x9F\xFA\x10\x78\xBC\x17\x01\xBD\xA7\x79\x1B\x8B\x7A\xD1\xA0\x9A\x37\x1C\x1B\x3F\xA5\xAD\xB5\xA7\x13\x39\x9C\x7D\x5C\x8B\xA5\xD0\x91\xA4\x61\xA1\x96\x1F\x92\xA4\xA6\x2E\xA2\x4B\x95\xA6\x4B\xA2\xA3\x95\xA2\xAB\x50\xA0\x1D\x55\x9E\x2C\xA8\x7F\xAD\x80\xAF\x26\x45\x88\x97\xA7\x70\xA6\x1C\x24\x96\xE1\x6A\xAE\x6B\x27\xA6\xED\xA4\xA3\x9A\xA4\x95\x6D\x95\xA8\x73\x24\xAF\xA5\xA2\xAA\xF9\x96\x56\xF8\xA7\x20\xE5\xA3\xAE\x7C\x90\x00\x63\xAE\xAF\xA0\x8C\xAE\xAE\xAE\xAE\x9B\xA6\x98\x23\x1D\xA6\xC4\x79\x79\x08\x19\xAD\xE1\xA2\x8C\x27\x80\x78\x78\xA8\x7A\x1E\xB4\x10\x20\xBF\xAA\x22\xB3\x8F\x83\xA7\x13\xA2\x9F\xA9\x07\xB5\x9A\x29\xB4\xA7\xC7\x91\xA3\xC9\x91\x71\x92\xA2\xB0\xCD\x9F\xAE\xB4\xA4\xB3\x97\xA8\x9B\x52\x8C\xAA\x3C\xB1\x1D\x56\x86\xB0\x6F\x28\xB0\x1F\xBD\xA8\x1D\x96\xB3\xAF\x90\x00\xAB\xA8\xB1\x81\x61\xB2\xCA\x81\xAB\x3A\xBF\xA4\x19\xBB\xA6\x4A\x1C\x1B\x30\x3A\xAD\x67\x28\x93\x46\xBB\x26\x89\x7D\xB0\x44\xA6\xAE\xDD\x78\xAE\x1C\x24\xB1\x66\x20\xB0\x17\xB5\xB5\x94\xA0\xAF\x93\x7B\x7D\x6E\xA8\xAC\x73\x23\xB6\x35\x4C\xAF\xF1\x7B\x96\x6B\xBB\xAE\xF5\x7D\xA4\x6C\xB3\xAB\x44\xB2\xA5\x5F\xB7\x26\x61\xBF\xA5\xE9\x2C\xA2\x11\xB3\xB1\x78\xBD\xB3\x66\xA6\xB1\x8A\xB2\x95\x03\xB9\x96\x80\x7F\xB2\x89\x9A\x79\xC8\x9D\xB4\x4F\xBD\xB7\x43\xB2\xB5\xF9\x98\xA9\x42\xB7\xB5\x6E\xB3\x12\x9E\xA3\xB9\x4B\x35\xB9\x89\x87\xB9\x8E\xBB\xB3\x9E\xBD\xB8\x2D\x91\x9D\x1D\x18\x25\x99\xA8\xBA\x04\xB3\x12\xBC\x1D\x01\x5C\xBD\xA1\x29\x8A\xA0\xD7\x9E\xAC\x07\x35\xBB\xA8\x7F\xAB\x31\x97\x79\x95\x83\x27\xCE\x7A\xAC\x05\x9A\x8D\xF7\x9C\xBB\xA3\x70",
};

			void JsonGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void JsonUnescapingString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class JsonTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				bool SetMember(JsonLiteral::JsonValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
				{
					vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
					if(token)
					{
						if(token->GetValue()==L"True") { member=JsonLiteral::JsonValue::True; return true; }
						else if(token->GetValue()==L"False") { member=JsonLiteral::JsonValue::False; return true; }
						else if(token->GetValue()==L"Null") { member=JsonLiteral::JsonValue::Null; return true; }
						else { member=JsonLiteral::JsonValue::True; return false; }
					}
					member=JsonLiteral::JsonValue::True;
					return false;
				}

				void Fill(vl::Ptr<JsonNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<JsonLiteral> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonString> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						JsonUnescapingString(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<JsonNumber> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<JsonArray> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->items, obj->GetMember(L"items"), tokens);
				}

				void Fill(vl::Ptr<JsonObjectField> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->name, obj->GetMember(L"name"), tokens))
					{
						JsonUnescapingString(tree->name, tokens);
					}
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonObject> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->fields, obj->GetMember(L"fields"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Literal")
					{
						vl::Ptr<JsonLiteral> tree = new JsonLiteral;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"String")
					{
						vl::Ptr<JsonString> tree = new JsonString;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Number")
					{
						vl::Ptr<JsonNumber> tree = new JsonNumber;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Array")
					{
						vl::Ptr<JsonArray> tree = new JsonArray;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"ObjectField")
					{
						vl::Ptr<JsonObjectField> tree = new JsonObjectField;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Object")
					{
						vl::Ptr<JsonObject> tree = new JsonObject;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> JsonConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				JsonTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<JsonLiteral> JsonLiteral::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonLiteral>();
			}

			vl::Ptr<JsonString> JsonString::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonString>();
			}

			vl::Ptr<JsonNumber> JsonNumber::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonNumber>();
			}

			vl::Ptr<JsonArray> JsonArray::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonArray>();
			}

			vl::Ptr<JsonObjectField> JsonObjectField::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObjectField>();
			}

			vl::Ptr<JsonObject> JsonObject::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObject>();
			}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

			void JsonLiteral::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonString::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonNumber::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonArray::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObjectField::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

			void JsonObject::Accept(JsonNode::IVisitor* visitor)
			{
				visitor->Visit(this);
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParseAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return JsonConvertParsingTreeNode(node, state.GetTokens()).Cast<JsonNode>();
				}
				return 0;
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParse(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> JsonLoadTable()
			{
				vl::stream::MemoryStream stream;
				JsonGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::parsing::json;

#define PARSING_TOKEN_FIELD(NAME)\
			CLASS_MEMBER_EXTERNALMETHOD(get_##NAME, NO_PARAMETER, vl::WString(XmlText::*)(), [](XmlText* node) { return node->NAME.value; })\
			CLASS_MEMBER_EXTERNALMETHOD(set_##NAME, { L"value" }, void(XmlText::*)(const vl::WString&), [](XmlText* node, const vl::WString& value) { node->NAME.value = value; })\
			CLASS_MEMBER_PROPERTY_REFERENCETEMPLATE(NAME, get_##NAME, set_##NAME, L"$This->$Name.value")\

			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonNode, system::JsonNode)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonLiteral, system::JsonLiteral)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonLiteral::JsonValue, system::JsonLiteral::JsonValue)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonString, system::JsonString)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonNumber, system::JsonNumber)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonArray, system::JsonArray)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonObjectField, system::JsonObjectField)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonObject, system::JsonObject)
			IMPL_TYPE_INFO_RENAME(vl::parsing::json::JsonNode::IVisitor, system::JsonNode::IVisitor)

			BEGIN_CLASS_MEMBER(JsonNode)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(JsonNode)

			BEGIN_CLASS_MEMBER(JsonLiteral)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonLiteral>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonLiteral)

			BEGIN_ENUM_ITEM(JsonLiteral::JsonValue)
				ENUM_ITEM_NAMESPACE(JsonLiteral::JsonValue)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
				ENUM_NAMESPACE_ITEM(Null)
			END_ENUM_ITEM(JsonLiteral::JsonValue)

			BEGIN_CLASS_MEMBER(JsonString)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonString>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(content)
			END_CLASS_MEMBER(JsonString)

			BEGIN_CLASS_MEMBER(JsonNumber)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonNumber>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(content)
			END_CLASS_MEMBER(JsonNumber)

			BEGIN_CLASS_MEMBER(JsonArray)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonArray>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(JsonArray)

			BEGIN_CLASS_MEMBER(JsonObjectField)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObjectField>(), NO_PARAMETER)

				PARSING_TOKEN_FIELD(name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(JsonObjectField)

			BEGIN_CLASS_MEMBER(JsonObject)
				CLASS_MEMBER_BASE(JsonNode)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<JsonObject>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(fields)
			END_CLASS_MEMBER(JsonObject)

			BEGIN_INTERFACE_MEMBER(JsonNode::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonLiteral* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonString* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonNumber* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonArray* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObjectField* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(JsonNode::IVisitor::*)(JsonObject* node))
			END_INTERFACE_MEMBER(JsonNode)

#undef PARSING_TOKEN_FIELD

			class JsonTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::parsing::json::JsonNode)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral)
					ADD_TYPE_INFO(vl::parsing::json::JsonLiteral::JsonValue)
					ADD_TYPE_INFO(vl::parsing::json::JsonString)
					ADD_TYPE_INFO(vl::parsing::json::JsonNumber)
					ADD_TYPE_INFO(vl::parsing::json::JsonArray)
					ADD_TYPE_INFO(vl::parsing::json::JsonObjectField)
					ADD_TYPE_INFO(vl::parsing::json::JsonObject)
					ADD_TYPE_INFO(vl::parsing::json::JsonNode::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool JsonLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new JsonTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
