/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::ParsingJson.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/

#include "../Parsing.h"
#include "../ParsingDefinitions.h"
#include "../ParsingAutomaton.h"
#include "ParsingJson_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace json
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Literal:Node"
L"\r\n" L"{"
L"\r\n" L"\tenum Value"
L"\r\n" L"\t{"
L"\r\n" L"\t\tTrue,"
L"\r\n" L"\t\tFalse,"
L"\r\n" L"\t\tNull,"
L"\r\n" L"\t}"
L"\r\n" L""
L"\r\n" L"\tValue value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class String:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content(JsonUnescapingString)\t\t\t\t@Color(\"String\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Number:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Array:Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] items;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ObjectField:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name(JsonUnescapingString)\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\tNode value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Object:Node"
L"\r\n" L"{"
L"\r\n" L"\tObjectField[] fields;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Lexer"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"token TRUEVALUE = \"true\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token FALSEVALUE = \"false\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token NULLVALUE = \"null\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token OBJOPEN = \"\\{\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token OBJCLOSE = \"\\}\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARROPEN = \"\\[\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARRCLOSE = \"\\]\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMMA = \",\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token NUMBER = \"[\\-]?\\d+(.\\d+)?([eE][+\\-]?\\d+)?\"\t@Color(\"Number\");"
L"\r\n" L"token STRING = \"\"\"([^\\\\\"\"]|\\\\[^u]|\\\\u\\d{4})*\"\"\"\t\t@ContextColor();"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"\\s+\";"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rules"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule Node JLiteral"
L"\r\n" L"\t= STRING:content as String"
L"\r\n" L"\t= NUMBER:content as Number"
L"\r\n" L"\t= \"true\" as Literal with {value = \"True\"}"
L"\r\n" L"\t= \"false\" as Literal with {value = \"False\"}"
L"\r\n" L"\t= \"null\" as Literal with {value = \"Null\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ObjectField JField"
L"\r\n" L"\t= STRING:name \":\" JValue:value as ObjectField"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Object JObject"
L"\r\n" L"\t= \"{\" [JField:fields {\",\" JField:fields} ] \"}\" as Object"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Array JArray"
L"\r\n" L"\t= \"[\" [JValue:items {\",\" JValue:items} ] \"]\" as Array"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JValue"
L"\r\n" L"\t= !JLiteral"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JRoot"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
;

			vl::WString JsonGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 3821; // 17748 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 749;
const vint parserBufferRows = 4;
const char* parserBuffer[] = {
"\x00\x0B\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x86\x81\x21\x6F\x6C\x2F\x32\x37\x84\x86\x02\x86\x00\x17\x82\x93\x24\x3A\x39\x34\x37\x67\x06\x98\x8A\x88\x8E\x84\x00\x88\x12\x94\x98\x87\x0B\x93\x81\x20\x3A\x74\x4E\x21\x2D\x35\x32\x90\x86\x92\x0C\xA6\xA8\x93\x85\x88\x84\x96\x86\x3F\x80\x0B\x25\x39\x3F\x3B\x88\x32\x36\x88\xB8\x88\x8A\x99\x88\x9F\x96\x40\x83\x83\xA5\xA7\xA1\xA4\x83\xA5\x04\xCD\xA9\x9D\x94\x81\xA1\xAE\xA9\x44\xC6\xB2\x28\xAC\xA9\x86\x93\xAC\x03\xBB\xAA\x8C\x88\x00\x8D\xB6\x81\x42\x6F\x35\x2E\x34\x31\x32\x39\x3C\x56\xE6\xA5\x89\xBE\xA3\xB4\x85\xB7\x7F\x83\xB1\xB3\xB5\xBF\xB9\xBC\x81\x58\x83\x9A\xAF\xAC\xB6\xB6\xC0\xB9\x74\xF6\xB8\xA5\xB8\xC7\xB2\xC4\xBE\x5B\x8E\xCD\xD0\xB0\xCD\xC3\xC9\x91\x96\x8D\x98\xCC\xC8\x82\x8D\xD3\x81\x4E\x75\x2D\x22\x35\x32\x3B\xC3\x82\x0C\x18\xB1\xCF\x8F\x36\x34\x3B\x32\x78\x74\x2A\xB8\x80\x06\xAF\xCB\x9C\x2E\xF2\x32\x21\x38\xBF\x7E\xE3\xE3\xFF\x3E\xC2\x81\xAC\x21\x37\xDB\xE1\x6C\x48\xC8\xE4\x08\x8C\xEA\x80\x27\x6F\x64\x35\x92\xE6\xE6\xD0\x82\xD3\xA9\xAB\xED\xDC\xED\xE8\x8E\xD3\x27\x62\x6A\x25\x23\x34\x3C\xF3\x7F\x80\x0C\xF0\xC0\x08\xFA\xF4\xF6\x23\x34\x65\x6C\x08\xA4\xFE\xEB\x82\xD2\x8E\x1E\x60\x4E\x7A\x72\x00\x21\x65\x81\x70\xC3\x79\x16\x82\x49\xCE\x65\x1D\x1B\x1C\x03\x90\x50\x01\x73\xCF\x61\x1C\x1B\x82\x03\x76\x16\x85\x1D\xDB\x5C\x7D\x7E\x40\xE0\x6A\x6C\x6A\x1C\x04\x81\x53\x19\x6D\xB7\x76\x6E\x7B\x87\x19\x43\x44\x7F\x7A\x74\x2C\x86\x6A\x19\xF8\x7A\x70\x84\x79\xF2\x44\x42\x7F\x8B\xF6\x75\x84\x1A\x75\x08\x40\x9E\x1B\x4C\x65\x14\x60\x40\x46\x3B\xA9\x70\x8F\x7D\xF9\x64\x18\x86\x40\x1A\xAC\x1C\x87\x8A\xE6\x43\x40\x83\x47\x67\x25\x83\x43\x89\xB6\x65\x16\x6C\x6F\x0F\x18\x44\x08\x46\x61\xBC\x66\x9A\x52\xEE\x64\x77\x9B\x4D\x69\x9C\x7B\x98\x9A\x6D\x88\x7F\x9B\x55\x71\x88\x79\x00\x46\x77\x82\x44\x16\x14\x55\x05\x16\x15\x10\x4C\x3D\x90\x90\x41\x40\x9D\x4C\x84\x6F\x02\x18\x4A\x02\xA2\x03\x46\x10\xA3\x14\x7E\x80\xAD\x9F\x93\x00\x26\x16\x87\x1C\x45\x98\x43\x00\x9E\x9C\x97\x75\x14\x13\x4C\x3F\x91\xA1\x11\x83\x83\x42\x91\x1D\x6C\x2C\x19\xA0\x43\xA5\x8B\x72\x87\x13\x42\x0A\x1F\x10\x14\x45\x0E\x1B\xA8\x42\xB7\x9C\x1B\x1F\xA6\xC0\x5B\x61\x62\x40\xB0\x8A\x13\x10\x13\x4F\x10\xA7\xAC\x41\xB9\xBD\x1D\xA9\x8B\x51\x4D\xB0\x01\x10\x52\x12\x13\xAD\xAD\xC7\x83\x49\xAF\x16\x06\x84\x80\x60\x41\x80\x50\xB2\x17\xB0\xC5\x85\x15\xB6\x40\xB9\x9D\x1C\x8B\xB6\xBF\x4C\x59\x5B\x13\x4D\x0D\x11\x12\x91\x3D\x6C\x04\x82\x7B\x94\x83\x1F\x10\xB1\x4E\x30\xB3\x42\x0E\xE8\x88\x6C\x7D\x95\x9E\x8D\x12\x11\x11\x52\x1F\x08\x46\xC1\x02\x5B\x1C\x15\x0B\x5D\x3F\x0C\x14\x19\x2B\x28\x0E\x0B\xC3\x2B\x29\x0F\x0C\x0A\x5B\x25\x15\x11\x17\x5B\x2B\x0B\xC1\xC3\x14\xD6\xC9\x9C\x42\x23\xDF\x70\xC0\x00\x53\x3B\x99\x12\x13\x47\x1B\x08\x46\xCB\x02\x62\x08\xC6\x17\x5C\x1C\x12\x09\x17\x7C\x35\xCB\x16\x17\x75\x38\xC5\xCD\x1D\x0F\xFB\x14\x0D\x1F\x29\x2A\x02\x0B\xA2\x0C\x48\xD8\x42\x91\x94\x93\x10\x15\x10\x43\x05\x1C\xAC\x42\x53\xDC\x13\x1F\x0A\x39\x89\x44\x7B\x98\xBE\x9C\xB3\x42\x12\x14\xAD\x66\x86\x04\x18\x64\xD2\x40\xD8\x0D\x90\x7E\x0A\x14\x6F\x2F\x14\x1C\x47\x76\x74\x1D\x00\x46\x73\xC2\x40\x10\x08\x24\x3C\x08\xD9\x85\x6C\x3E\x0D\xBC\x00\x80\x7B\xD2\xD8\x1B\x0E\x18\x45\xE3\xD9\x61\xEA\xD0\xDE\x1C\x74\x33\x68\x42\xE3\x77\xFA\xD9\xE2\x85\x7E\xDA\x60\x02\xE0\xD0\x4A\xD4\x42\xD2\x98\xD6\x8E\x09\x0C\xFA\x18\x41\xEA\x40\x92\xE9\xD4\xE6\x0E\x20\x0E\x15\x16\xC0\x04\xE0\x08\xE8\x97\x29\xB4\x10\x09\x18\x73\x29\xE2\x89\x6B\x40\x0D\x0A\x01\xE9\x7C\xFE\x08\xEA\x08\x86\xA5\x12\x0B\xEC\xB5\xD3\xEC\x1B\xDD\x77\x0E\x78\x18\x08\x7B\x20\x01\x94\x87\x20\x3D\x00\x0A\x08\x54\x32\x1C\x87\xF0\x7D\x3A\xEC\xEF\xE0\xBE\xD3\xFE\x18\xAA\x6C\x03\xF4\xEC\x08\xC6\xC8\xFA\xF0\xF3\xCE\xDB\x85\x19\xF4\xD3\xE9\x69\xA8\xF6\xDA\xDD\xED\xDF\xEF\x96\xAC\x18\xA6\xF8\xC5\xE6\xE7\xF0\x08\xC9\xF4\x1B\xF1\xF3\xCF\x6B\x7E\xF4\x22\x06\x09\x4B\x42\x78\x04\xD9\x7B\x76\xFC\x5D\x79\x64\x29\x2B\x67\x08\xAE\x60\x04\xEC\x5E\x42\x77\xF1\x57\x48\x24\x40\x1F\x6D\xE0\x46\x70\x02\x8C\x1D\x80\x71\xFA\x6B\x6D\xDB\x74\x05\x08\xBA\x35\x68\x21\x27\x99\x6F\x02\xA0\x00\x08\x19\x5F\x6E\x0A\xEA\x7A\x83\x0B\xEA\x7F\x73\x1E\x18\x26\x86\xA4\x6A\x08\x0C\xD2\x45\x0D\xEE\x61\x02\x09\x41\x02\x38\x71\x39\x7A\x81",
"\x1D\x9C\x46\x87\xF2\x64\x8A\xDE\x46\x8D\x86\xD4\x7F\x84\x47\x74\x0D\x87\xC9\x4A\x0C\x48\xFD\x32\x87\x6C\x55\x84\x0E\x0B\x33\x0A\x06\x8C\x1D\x89\x87\x59\x8C\x82\xCA\x2C\x61\x83\x21\x74\x23\x7A\x3A\x03\x7A\x0E\xEA\x71\x83\x00\x84\x78\x04\x50\x99\x8A\x14\x96\x23\x86\x1E\x87\x70\x21\x77\x8B\x8C\x0F\xA2\x8E\x6D\x12\xA4\x09\x6B\x02\x32\x3E\x0A\xCC\x8E\x06\x16\xAE\x87\x6C\x41\x89\x43\x15\x97\x79\x90\xE2\x2E\x02\x06\x8C\x18\x21\x24\xB9\x8D\x91\x3C\x1D\x7A\x04\x5B\x03\x7B\x16\x20\x0A\x8E\xE8\x68\x75\x41\x0F\x57\x6D\xF3\x22\x0C\x04\x35\x8C\x89\x82\xA0\x95\x75\x1F\x20\x0D\x0B\xE9\x5D\x08\x7F\x20\x15\x91\xFC\x15\x97\x93\x4C\xA0\x03\x93\x9D\x8B\x7F\x27\xB7\x3F\x40\x16\xA3\x95\x94\x9C\x87\x97\x2E\x8E\x4A\x94\x56\xAE\x90\x96\x95\x87\x93\xE5\x59\x87\x8E\x82\x39\x89\x8B\x7C\x84\x84\x5D\x00\x97\x48\x81\x2A\x81\x8C\x2C\x9A\x4B\xD9\x50\x85\x65\x81\x23\x62\x56\x4A\x4C\x3F\x23\x94\x18\x22\x72\xB9\x80\x8A\x97\x9B\x0E\x26\x9C\x99\x8B\x08\xB4\x45\x49\x73\x02\x97\xF4\x40\x94\x8A\x1F\x6E\x9E\x47\xC5\x8D\x96\x08\x7D\x00\x96\x28\xB1\x78\x9D\xBF\x6A\x9F\x2D\xEC\x96\x9E\xD4\x6F\x9E\x46\xBE\x93\x9E\x1A\xED\x96\xA0\x7C\x88\x86\x98\xFB\x9D\x9D\x38\xB1\x43\x8B\x4A\x8B\x90\x88\x42\x99\x0F\x16\xC5\x08\x22\x8E\x94\x91\xA3\xB5\x8B\x9D\x2E\xA8\x9C\x97\xDA\x7F\x96\x94\x6C\x83\x99\x2F\xAB\x9A\x9F\x57\xAF\x8D\x92\x73\x87\x34\x22\x99\xA7\xA3\x4A\xAE\x04\x06\x1E\xA8\x21\x4E\xFA\x64\x97\xDF\x76\x90\x97\xC2\x80\x05\x2A\xE8\x74\x94\x11\x37\x6B\xA4\x2A\xB9\x9F\x31\xAF\xA9\xA2\x6D\x97\x74\x9B\x9D\x4F\xAB\x44\xDB\x89\x08\x8C\x15\xAF\x9C\x13\xA9\x9E\x48\x8C\xA0\x05\x83\xA4\x0E\xA4\x0A\xA4\xA1\x93\x77\x90\x9F\x87\xBA\x9C\x9F\x6F\x90\x88\x10\x4E\xA0\x9D\xFA\x34\x0D\x9B\x02\x3F\x98\x14\xB7\xA7\xAA\x84\x35\xAA\x6F\x00\xB3\x7A\x40\xB8\x9C\xAA\xAF\xA0\xAD\xA8\x47\xBD\xAE\x43\xAC\xA3\x7A\xB4\xA3\x78\x8A\x94\x4A\x08\xDB\x6E\x6C\xAD\xC5\xB4\x0F\x73\x25\x18\x21\x64\xB9\x8E\xB0\x24\xAA\xA9\x7E\x95\xAE\x88\x46\x89\x41\xA6\x93\x73\xA1\x41\xCD\x83\x21\x1E\xB6\xAE\xB0\x3F\x94\x9A\x90\x3C\xA0\xA5\x36\x92\x4D\xAC\x18\x70\xA8\x00\x72\xB3\xA9\x0C\x75\xA4\x21\xBB\xAD\xB4\x3D\x5A\xB7\x6C\x5F\x85\xAD\xAA\x87\xA7\xA2\xAC\xFA\x24\xAC\x42\x84\xB1\xA3\xB4\x93\xA2\x99\x9B\xA4\x39\x4D\x99\xAF\x73\x9C\x84\x23\xA7\xC9\xB6\x92\x4F\xC6\xA3\xA0\xA4\x82\xAD\xA4\x44\xB4\x9D\x50\xC3\xA4\xB8\x97\xA3\x7D\x92\x6C\xB0\x89\x99\x08\x23\xBD\xDB\x8F\xB5\xB4\x74\x2E\x70\x41\x0E\x7A\x84\x74\x86\x93\x8A\x59\x97\xA0\x34\xB1\x0F\x8A\x84\x35\xBA\x6F\x61\x88\x75\x03\x8F\x85\x8C\x22\x77\x6A\x04\x69\x81\x99\x4A\xE9\x7C\x86\xE3\xAE\xA9\x8B\x89\xAE\xB3\x09\x84\x27\x84\xC5\xA3\x81\x9A\x7E\x9A\x73\x40\x4A\x6A\x85\xCA\xAF\xBC\x8E\x58\x9E\x46\x7C\xBE\x4F\x91\xFA\x84\x27\xBE\xF5\x8D\x4A\x18\x8E\x84\x8C\xD4\x66\x8B\x7D\x00\xD4\xBA\x75\xEE\x87\xB1\x89\x99\x88\xB9\x59\x9F\x80\x42\x32\xC1\xC4\xFD\x11\x9B\x71\x74\x07\xB7\x40\x77\x67\x9A\x1F\x7E\x00\xC6\x3E\x4A\xBF\x40\x0E\x75\xC6\x2D\xB8\xC2\xC2\x02\x2A\x69\xE4\x45\xCE\x07\xF0\x93\xA1\x02\x18\x30\xCB\x36\xD3\xAE\xB0\x1C\xC2\xCA\x20\x90\x78\x6C\x5E\xD9\xAE\xC8\xB7\x8B\xC3\x20\x0D\xD3\xAC\x8E\xBA\xC6\x6E\x10\x1B\xCE\xAD\x3E\x09\xC3\x08\xE3\xB4\x21\xF2\x8E\xB7\xC6\x74\x11\x6C\x92\x80\x0A\xC8\x2D\xCE\xC6\x6D\x69\xDB\x2F\xD9\x0E\xB4\xCD\xCB\x6F\xC8\xC7\xAF\xA3\x67\x92\x95\xB8\xB8\x26\xB2\xC4\x20\x34\xCC\x88\x9C\xF1\x6D\xCE\x1E\xCB\x8A\x7D\x3F\xD3\x88\x13\xD7\xC0\x00\x22\xCA\xD7\xC8\x8C\x45\xCF\xA3\xBC\x81\xD2\x0C\xCC\x91\xA3\x87\xC3\x20\x8D\xA4\xB3\x85\x31\xC8\x4B\xC7\x76\xD4\x94\x72\x95\x94\xD2\x22\xF6\xA0\xD3\x49\x68\xD5\x6A\x89\x45\x72\x5F\x72\x7B\xCE\x9C\x66\x7B\x23\xA3\x78\x20\x5E\xDB\x78\x3A\x97\x81\x78\x2C\xC6\x7C\x7F\xF3\x40\x84\x8D\x03\x95\x7B\xF5\x08\x8A\x89\x05\xB4\x7E\x80\xC3\xDA\x7D\xB1\xFE\x78\x7C\x37\x83\x85\x80\xF6\x67\x81\x1F\x4D\xD6\x79\x4B\x9F\x7F\x7D\x6F\x84\xD9\xFF\x7F\x74\xC0\xE8\x43\x86\x7D\xE1\x6C\xD9\xFC\x5D\xDA\xBF\x31\x90\x87\x75\x28\x54\x83\x1B\x97\x87\x0C\x6E\xFA\x7D\x7B\xAA\x6C\x76\x14\x11\x83\x82\xDB\x2F\x89\x3C\x23\x5D\xB2\x7F\x5F\x61\xBE\xCB\x45\xCF\xA6\x1E\xDB\x5F\x40\x78\xBE\xC7\x76\xE4\xC7\xDD\x20\x07\xC4\x1A\xA8\xA5\xC0\xD4\x6C\xC5\x76\x71\x9E\x47\x5A\xAC\xB0\xAA\x86\x31\xB6\xAD\x2E\x15\x04\x6D\x83\x26\xB7\xBC\xA2\x03\xAF\xC0\xA4\x0E\x70\xDF\xA9\xBB\x85",
"\xBC\xB6\xAF\x66\xA5\xB2\x44\xEE\xA2\xE0\x10\x5F\x6E\xA2\x06\xF6\xA5\x0D\x4E\xB3\x20\xE8\xBD\xA3\x7A\x3F\xA2\xC1\xC5\xD7\xB4\x99\x96\xC2\xEE\x93\x44\xEB\xA4\x44\xDE\xB5\x76\x98\xA7\x5E\xE0\xC6\x6B\x58\x90\x58\x3A\x3B\x39\x5A\x6E\x43\xF0\xBE\x45\x9F\x99\xED\x48\xDE\x16\x03\x24\xE4\x3D\xC8\x8C\x4A\x90\x8A\xDE\x18\x00\xEC\xDC\x2A\xCE\xDB\x52\xE8\x35\xEC\x25\x0C\x37\x1A\x08\xEE\x74\x05\xDA\x7C\xB6\xD7\x3E\xED\xBC\x3C\x02\xDC\xC8\x3B\xD5\x8C\x94\x55\x92\xBC\x3E\x03\xDE\xC7\x3C\x03\x71\x6F\x37\x1F\xBC\x26\x4A\xD5\x8B\xF3\x4F\xC3\xCB\x5B\x5C\x8C\xE0\x00\xE4\xCB\x5C\x36\x4A\x41\x86\xEE\x00\x0A\xD9\x19\x17\xA6\x78\xC6\xCE\xAD\xF3\x96\x7E\x68\x08\xFC\x67\xF0\x03\x50\xF4\xF1\x93\xEB\xF2\xE5\xEA\x74\x52\x6C\xD8\x54\xF3\xFA\x7E\xF2\x84\x20\xFD\x6B\x81\x1B\x82\x7F\x87\xEC\x47\xE9\x8B\xF9\xF4\xAB\xEB\xF4\x87\x98\xE8\xDC\xEC\xFC\x62\xF6\x67\x74\xF7\x57\xC8\xF2\x7F\x4D\x46\x4F\x1F\x2F\xE4\x59\xF2\x0C\x30\xF2\xE2\x92\x4F\x2A\x81\x3D\xDC\x0E\xBC\x23\xFB\xE0\x0C\xFA\x98\x80\xED\x31\xFB\x50\xF8\xF4\xF3\xA1\xBF\xF8\xE8\xC8\x58\x23\xD3\xEE\x59\xF5\x80\x07\xFA\xF0\xF6\xD7\xF8\x6F\x4A\x98\xBD\xEE\xF9\xF9\xCE\xC7\xF6\x48\x53\x66\xFE\x99\x07\xFD\xF7\x39\x46\x4D\x03\x18\x10\x79\x2C\x20\x80\xFA\x72\x10\xDA\x70\x1D\xF9\x75\x80\x9E\x6E\x59\x97\x3C\x44\x0A\x8B\x7C\x23\x16\x24\x2C\x2F\x80\x05\x19\x80\x88\x10\x79\x06\x29\x78\x18\x15\x01\x01\x87\x32\x04\x1C\x81\x0A\x84\x77\x3C\x49\x7E\xEA\x2D\x2B\x00\x01\x40\xBC\x10\x64\x4D\x2F\x0F\x90\x74\x20\x1A\x8C\x10\x52\x68\x2B\x1E\x83\x10\x31\x8A\x7F\x22\x8C\x21\xBB\x76\x82\x68\x12\x10\xA9\x49\x82\x15\x59\x51\x2C\x84\x7D\x6B\x26\x24\xD4\x42\x80\xA7\x61\x82\x92\x6A\x3E\x39\x85\x82\x4C\x8D\x83\x33\x86\x73\x9F\x54\x1C\x8D\x7C\x7C\x46\x2F\x37\x8C\x74\x82\x6F\x2B\x75\x2E\x6E\x23\x3E\x8E\x69\x45\x61\x84\x37\x10\x79\xAF\x5F\x82\x33\x6A\x29\x0F\x8A\x85\x07\x6C\x85\x4F\x8C\x2C\xCB\x4E\x23\x2C\x21\x6A\xD0\x7A\x82\xFA\x1B\x84\x0C\x8C\x80\x7E\x5C\x1B\x62\x7C\x1E\x60\x84\x32\x8B\x76\x24\xCE\x70\x00\x16\x81\x79\x68\x8B\x24\x6A\x8B\x80\x03\x79\x61\x4D\x2C\x22\x7F\x8C\x7D\x59\x7D\x24\x74\x87\x88\x32\x55\x29\xF8\x48\x87\x1C\x73\x51\x14\x83\x85\x23\x18\x6B\x97\x80\x81\x37\x1D\x67\x9B\x8F\x89\x05\x1C\x7C\x7F\x34\x69\x9B\x87\x78\xD4\x4B\x88\x9F\x87\x7F\x64\x2F\x80\x58\x8B\x26\x7F\x79\x51\x5D\x81\x89\xD1\x5B\x87\x57\x1D\x7F\x6F\x2F\x7F\x66\x8A\x80\xAF\x89\x20\xB1\x8C\x80\xD1\x53\x80\x0F\x8D\x77\x09\x21\x88\x14\x87\x83\x35\x10\x79\xE4\x76\x26\x46\x20\x33\x54\x3F\x80\xBB\x82\x85\x6B\x86\x1A\xBF\x8F\x32\xC1\x8F\x83\xC3\x80\x8A\xE9\x2B\x83\x7E\x63\x42\x8C\x7E\x78\x1D\x8A\x80\xCB\x26\x20\xD4\x4C\x88\x5E\x85\x49\x06\x24\x80\x05\x86\x8C\x94\x7A\x67\x4C\x87\x79\xD5\x13\x10\x9A\x77\x80\x16\x25\x7C\x3E\x13\x10\xF0\x76\x7B\xE1\x74\x7A\xCC\x76\x7A\x0F\x81\x8E\x47\x89\x8E\xD6\x84\x1C\xE7\x85\x8D\x5E\x8C\x44\xEB\x8A\x83\xE9\x21\x40\xAD\x76\x40\xF2\x8C\x06\xF4\x8B\x7E\xF7\x86\x80\xF9\x83\x38\xB9\x7F\x8D\x05\x8E\x8F\xF1\x14\x90\xB2\x86\x8E\x18\x18\x8E\x36\x89\x84\xC0\x7A\x7A\xEC\x8E\x8E\xAC\x28\x1A\xE0\x3D\x90\x0F\x93\x10\xCC\x11\x7B\xA1\x78\x8F\xA3\x74\x91\xCC\x74\x20\x70\x81\x79\x18\x8F\x8F\x1F\x95\x8E\x7E\x7D\x91\x1A\x9E\x8B\x0E\x87\x78\xAF\x55\x83\xE6\x75\x93\x19\x98\x84\x38\x99\x20\x03\x94\x94\xB2\x8E\x80\x88\x1C\x7C\x7F\x8F\x88\x67\x28\x91\x08\x13\x8E\x8B\x72\x8C\x02\x9A\x93\x48\x9C\x93\xEA\x3D\x8A\xAE\x2E\x2C\xED\x7D\x92\x12\x9F\x92\xD0\x14\x8E\x91\x8E\x7D\x72\x04\x7F\xA2\x77\x39\xC6\x37\x78\xC9\x8E\x94\x66\x20\x95\x3A\x2B\x93\x90\x81\x5D\x47\x90\x90\x05\x99\x95\x8B\x7E\x54\x5D\x95\x7B\x5F\x98\x96\x2C\x96\x75\xF2\x7D\x11\x58\x26\x96\x2E\x9C\x97\xC4\x7A\x8A\x0C\x16\x36\x05\x8A\x95\x66\x24\x76\x96\x82\x84\x5B\x92\x55\x6E\x54\x8B\x09\x16\x8B\x43\x86\x95\xCD\x87\x95\x90\x85\x76\x8E\x9D\x1B\x5F\x30\x45\xC0\x8A\x80\x79\x84\x07\xC4\x80\x97\x50\x8D\x80\xEA\x32\x99\x02\x19\x8C\x64\x84\x10\xCC\x84\x10\xA3\x9E\x97\x27\x3A\x99\xEA\x7A\x92\x9D\x97\x5C\xD4\x80\x9A\x95\x8E\x56\xAF\x95\x80\x6A\x78\x7D\x97\x8A\x96\x18\x13\x01\x0F\x82\x94\x28\x4F\x80\xA1\x9A\x98\x98\x77\x62\xBD\x81\x97\x59\x41\x8A\x11\x88\x11\x14\x08\x8D\xD2\x9C\x1B\x87\x73\x8A\xD3\x9A\x14\xE3\x71\x9C\xC3\x9C\x8E\x88\x66\x9C\xB9\x90\x23\xC8\x9F\x8E\x02\x1A\x9C\xD1\x84\x70\x85\x8E\x9C\x37\x1F\x78",
"\xFD\x8C\x9D\x34\x84\x9A\x6C\x82\x97\x96\x97\x93\x49\x95\x77\x22\x96\x82\x24\x91\x24\xF0\x86\x3D\x9B\x73\x91\x61\x97\x97\xB3\x7D\x97\xC8\x77\x96\xF2\x35\x7A\x16\x9A\x7F\x6E\x9D\x9E\x98\x95\x9A\xF0\x9C\x10\x1E\x96\x7E\xEA\x85\x9F\xED\x8C\x7A\xEC\x8E\x7A\xFB\x9F\x7E\x00\xAF\x26\x9F\x77\xA1\x83\x92\xA0\x69\x9C\x7C\xBA\x7B\x9E\x08\x92\x10\x40\x91\x87\x01\x9A\x20\xF1\x9E\xA0\x20\x9C\x21\x07\x9C\x84\xDA\x87\x9F\x84\x26\x92\xA9\x28\x92\xFE\x96\x7C\x1A\xAB\x97\x1C\xA2\x7E\x23\x12\x93\xDB\x91\xA2\x00\x03\xA2\x91\x74\x95\x26\xAC\xA0\xEE\x92\x8D\x3D\x9C\x7C\x3F\x9B\xA3\x2C\xA8\xA0\x74\x9B\x91\x39\x92\xA4\x09\xAF\x9E\x4C\x47\x78\x9A\x87\x9D\x87\x7D\x94\x20\xA9\xA4\x22\xA3\xA4\x37\x7D\xA4\x08\x1D\xA0\x24\xA5\x97\x23\x83\xA3\xF5\x86\x7D\xF1\x6F\x25\x5E\x90\x38\x5F\x31\x91\x8B\x97\x32\x64\x92\x98\x7B\x93\xA0\xD9\x91\x7D\x57\xAA\x8D\x04\x1E\xA3\x62\x9E\x8B\x1C\x9E\xA4\x4B\xA8\x95\x61\xA6\x75\x78\x95\xA6\xBE\x9A\x97\x68\xA0\x96\xF3\x83\x95\x27\x33\x7F\x67\xA7\x7B\xC4\x75\x8A\xCC\x74\x69\x20\x87\x9D\xD0\x7E\x8D\x72\xA0\x8E\xEC\x92\x10\x8F\xA2\x9F\xBE\x88\x60\x27\xAF\xA5\xF3\x91\x92\xBE\x73\x92\xF4\x95\x92\x7A\x2A\x9F\x32\xAE\xA7\xFF\x9B\xA8\x82\xAA\xA8\x30\x90\x1A\x05\xA6\x7E\x07\xA6\xA9\x5A\xA8\x88\xFA\x13\x97\x98\xA1\x97\x06\x90\xA1\x2D\xA2\xA1\x26\x84\xA1\xA5\xA3\x27\x19\xA8\xAA\x01\xA3\x98\x70\xA3\x12\x1F\xA4\xA9\x3C\xA7\xA9\x28\xAE\x85\x9A\xAA\xA7\xB5\xAA\xA0\xB7\xAF\xA9\xF6\x91\xAA\xF8\x97\x1D\x27\x9C\x9F\x85\xA6\xAA\x34\xA0\xAC\x67\x97\xA3\xFA\x89\xA3\x1E\x48\xA4\x74\xA3\x10\xC8\xAC\xA9\x99\xAE\x23\xB4\xA9\xAC\x9D\xA7\x28\x3E\x91\x65\xE0\xA9\x8D\xE2\xA1\xAB\x6D\x8D\x24\xE7\xA4\xAE\xB6\xAA\x3E\x09\x1C\x94\xAD\xA0\x7D\xAF\xA0\x00\xE3\xAF\xA3\x8D\x83\xAB\x9B\xAE\xAF\x60\xAC\x21\x8A\x9F\xA7\x5D\x26\xA6\xA9\xA9\xA6\x35\xAB\xA6\x9E\x6D\xA6\x89\xAA\xB0\xDD\xA7\x13\x6B\x93\xA7\xEE\xA0\xAB\x4F\xA2\x8D\xCB\xAD\xA5\xF0\xA9\x4B\x05\xB2\x21\x79\x91\xAC\x6F\xAA\xA6\xCB\x95\x9A\x88\xA9\xB0\x84\xA1\x1D\xCC\x7C\x1B\x17\x00\xA9\x8C\xA3\x12\xC9\x82\x9C\x0A\x8A\x2F\x56\x79\x9C\x44\x23\xB2\xEF\x99\x45\x87\x7C\x1B\x19\x0C\xB2\x91\xA1\x93\xDF\xAC\xB3\x4B\x93\x12\xBC\x1D\x9A\x40\xBF\x26\x87\x7A\xA3\x31\xB5\xA9\x00\x04\xB4\xD0\x7D\x9B\xE8\x9A\x14\x47\xA9\xB4\x3C\xAC\xB4\x91\x7E\xB4\x57\x19\xB2\x01\xB5\xB4\xD8\x93\x12\xEA\x9A\x80\x81\x83\xAF\x02\xB9\xAE\x65\x0B\xA2\xE1\xA2\x1A\x50\x22\xAD\x2F\xA3\xAA\x1C\x2D\xAB\x18\xA7\xAA\xDB\x7F\xB0\x27\xB4\xA0\x93\xA5\x80\x5F\xB9\xB5\x86\xA3\xB0\x63\xB8\xAB\x09\x9A\xAB\x4C\x8C\xAB\xD6\xAE\x90\x62\xA0\x91\x0B\xBD\x90\x15\x93\xB7\xFA\x75\xB7\xCC\xA8\xAE\x7C\xAA\xA2\x7A\xB6\xB6\x27\x88\xB6\xA6\x20\xA3\x6C\x0C\xB6\x6B\x2F\xAB\x6F\xB6\xB2\x84\x9B\xAA\x37\x18\xB4\x89\x9A\xB4\x5E\xA1\xB6\x8B\xBF\x76\xEB\xA0\x83\xAC\x8E\xB9\x1B\xBA\x94\x4F\xB7\x15\x56\xAE\xB5\xA6\xB7\xB1\x75\x44\xB0\x81\xB4\x9B\x64\xA7\xB0\x81\xA0\xB2\x83\xA9\xB9\xFD\x90\x9B\x0D\xB7\x3B\x65\x90\xB7\xB8\xB6\x21\xC0\x96\xB8\xE6\x78\xB8\x1A\xBE\xBA\x67\x3C\x44\x1D\xBC\x95\x80\xAE\xA6\xB7\xBA\x7C\x77\xB1\x89\x25\xB6\xBB\xAA\xA0\x1D\x39\xB7\x30\x5A\xBD\x8D\x46\xAC\xAE\xD7\xBB\xBD\x8C\x70",
};

			void JsonGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void JsonUnescapingString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class JsonTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				bool SetMember(JsonLiteral::JsonValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
				{
					vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
					if(token)
					{
						if(token->GetValue()==L"True") { member=JsonLiteral::JsonValue::True; return true; }
						else if(token->GetValue()==L"False") { member=JsonLiteral::JsonValue::False; return true; }
						else if(token->GetValue()==L"Null") { member=JsonLiteral::JsonValue::Null; return true; }
						else { member=JsonLiteral::JsonValue::True; return false; }
					}
					member=JsonLiteral::JsonValue::True;
					return false;
				}

				void Fill(vl::Ptr<JsonNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<JsonLiteral> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonString> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						JsonUnescapingString(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<JsonNumber> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<JsonArray> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->items, obj->GetMember(L"items"), tokens);
				}

				void Fill(vl::Ptr<JsonObjectField> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->name, obj->GetMember(L"name"), tokens))
					{
						JsonUnescapingString(tree->name, tokens);
					}
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonObject> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->fields, obj->GetMember(L"fields"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Literal")
					{
						vl::Ptr<JsonLiteral> tree = new JsonLiteral;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"String")
					{
						vl::Ptr<JsonString> tree = new JsonString;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Number")
					{
						vl::Ptr<JsonNumber> tree = new JsonNumber;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Array")
					{
						vl::Ptr<JsonArray> tree = new JsonArray;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"ObjectField")
					{
						vl::Ptr<JsonObjectField> tree = new JsonObjectField;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Object")
					{
						vl::Ptr<JsonObject> tree = new JsonObject;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> JsonConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				JsonTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<JsonLiteral> JsonLiteral::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonLiteral>();
			}

			vl::Ptr<JsonString> JsonString::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonString>();
			}

			vl::Ptr<JsonNumber> JsonNumber::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonNumber>();
			}

			vl::Ptr<JsonArray> JsonArray::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonArray>();
			}

			vl::Ptr<JsonObjectField> JsonObjectField::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObjectField>();
			}

			vl::Ptr<JsonObject> JsonObject::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObject>();
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParseAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return JsonConvertParsingTreeNode(node, state.GetTokens()).Cast<JsonNode>();
				}
				return 0;
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParse(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> JsonLoadTable()
			{
				vl::stream::MemoryStream stream;
				JsonGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
