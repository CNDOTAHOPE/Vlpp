/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::ParsingJson.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/

#include "../Parsing.h"
#include "../ParsingDefinitions.h"
#include "../ParsingAutomaton.h"
#include "ParsingJson_Parser.h"

namespace vl
{
	namespace parsing
	{
		namespace json
		{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// AST"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"class Node"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Literal:Node"
L"\r\n" L"{"
L"\r\n" L"\tenum Value"
L"\r\n" L"\t{"
L"\r\n" L"\t\tTrue,"
L"\r\n" L"\t\tFalse,"
L"\r\n" L"\t\tNull,"
L"\r\n" L"\t}"
L"\r\n" L""
L"\r\n" L"\tValue value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class String:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content(JsonUnescapingString)\t\t\t\t@Color(\"String\");"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Number:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken content;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Array:Node"
L"\r\n" L"{"
L"\r\n" L"\tNode[] items;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class ObjectField:Node"
L"\r\n" L"{"
L"\r\n" L"\ttoken name(JsonUnescapingString)\t\t\t\t@Color(\"AttName\");"
L"\r\n" L"\tNode value;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class Object:Node"
L"\r\n" L"{"
L"\r\n" L"\tObjectField[] fields;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Lexer"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"token TRUEVALUE = \"true\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token FALSEVALUE = \"false\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token NULLVALUE = \"null\"\t\t\t\t\t\t\t@Color(\"Keyword\");"
L"\r\n" L"token OBJOPEN = \"\\{\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token OBJCLOSE = \"\\}\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARROPEN = \"\\[\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token ARRCLOSE = \"\\]\"\t\t\t\t\t\t\t\t@Color(\"Boundary\");"
L"\r\n" L"token COMMA = \",\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token NUMBER = \"[\\-]?\\d+(.\\d+)?([eE][+\\-]?\\d+)?\"\t@Color(\"Number\");"
L"\r\n" L"token STRING = \"\"\"([^\\\\\"\"]|\\\\[^u]|\\\\u\\d{4})*\"\"\"\t\t@ContextColor();"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"\\s+\";"
L"\r\n" L""
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L"// Rules"
L"\r\n" L"//////////////////////////////////////////////////////////////////"
L"\r\n" L""
L"\r\n" L"rule Node JLiteral"
L"\r\n" L"\t= STRING:content as String"
L"\r\n" L"\t= NUMBER:content as Number"
L"\r\n" L"\t= \"true\" as Literal with {value = \"True\"}"
L"\r\n" L"\t= \"false\" as Literal with {value = \"False\"}"
L"\r\n" L"\t= \"null\" as Literal with {value = \"Null\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule ObjectField JField"
L"\r\n" L"\t= STRING:name \":\" JValue:value as ObjectField"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Object JObject"
L"\r\n" L"\t= \"{\" [JField:fields {\",\" JField:fields} ] \"}\" as Object"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Array JArray"
L"\r\n" L"\t= \"[\" [JValue:items {\",\" JValue:items} ] \"]\" as Array"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JValue"
L"\r\n" L"\t= !JLiteral"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Node JRoot"
L"\r\n" L"\t= !JObject"
L"\r\n" L"\t= !JArray"
L"\r\n" L"\t;"
;

			vl::WString JsonGetParserTextBuffer()
			{
				return parserTextBuffer;
			}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 3779; // 17748 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 707;
const vint parserBufferRows = 4;
const char* parserBuffer[] = {
"\x00\x0B\x00\x02\x83\x80\x07\x7D\x00\x82\x03\xFF\x45\x08\x82\x83\x86\x81\x21\x6F\x6C\x2F\x32\x37\x84\x86\x02\x86\x00\x17\x82\x93\x24\x3A\x39\x34\x37\x67\x06\x98\x8A\x88\x8E\x84\x00\x88\x12\x94\x98\x87\x0B\x93\x81\x20\x3A\x74\x4E\x21\x2D\x35\x32\x90\x86\x92\x0C\xA6\xA8\x93\x85\x88\x84\x96\x86\x3F\x80\x0B\x25\x39\x3F\x3B\x88\x32\x36\x88\xB8\x88\x8A\x99\x88\x9F\x96\x40\x83\x83\xA5\xA7\xA1\xA4\x83\xA5\x04\xCD\xA9\x9D\x94\x81\xA1\xAE\xA9\x44\xC6\xB2\x28\xAC\xA9\x86\x93\xAC\x03\xBB\xAA\x8C\x88\x00\x8D\xB6\x81\x42\x6F\x35\x2E\x34\x31\x32\x39\x3C\x56\xE6\xA5\x89\xBE\xA3\xB4\x85\xB7\x7F\x83\xB1\xB3\xB5\xBF\xB9\xBC\x81\x58\x83\x9A\xAF\xAC\xB6\xB6\xC0\xB9\x74\xF6\xB8\xA5\xB8\xC7\xB2\xC4\xBE\x5B\x8E\xCD\xD0\xB0\xCD\xC3\xC9\x91\x96\x8D\x98\xCC\xC8\x82\x8D\xD3\x81\x4E\x75\x2D\x22\x35\x32\x3B\xC3\x82\x0C\x18\xB1\xCF\x8F\x36\x34\x3B\x32\x78\x74\x2A\xB8\x80\x06\xAF\xCB\x9C\x2E\xF2\x32\x21\x38\xBF\x7E\xE3\xE3\xFF\x3E\xC2\x81\xAC\x21\x37\xDB\xE1\x6C\x48\xC8\xE4\x08\x8C\xEA\x80\x27\x6F\x64\x35\x92\xE6\xE6\xD0\x82\xD3\xA9\xAB\xED\xDC\xED\xE8\x8E\xD3\x27\x62\x6A\x25\x23\x34\x3C\xF3\x7F\x80\x0C\xF0\xC0\x08\xFA\xF4\xF6\x23\x34\x65\x6C\x08\xA4\xFE\xEB\x82\xD2\x8E\x1E\x60\x4E\x7A\x72\x00\x21\x65\x81\x70\xC3\x79\x16\x82\x49\xCE\x65\x1D\x1B\x1C\x03\x90\x50\x01\x73\xCF\x61\x1C\x1B\x82\x03\x76\x16\x85\x1D\xDB\x5C\x7D\x7E\x40\xE0\x6A\x6C\x6A\x1C\x04\x81\x53\x19\x6D\xB7\x76\x6E\x7B\x87\x19\x43\x44\x7F\x7A\x74\x2C\x86\x6A\x19\xF8\x7A\x70\x84\x79\xF2\x44\x42\x7F\x8B\xF6\x75\x84\x1A\x75\x08\x40\x9E\x1B\x4C\x65\x14\x60\x40\x46\x3B\xA9\x70\x8F\x7D\xF9\x64\x18\x86\x40\x1A\xAC\x1C\x87\x8A\xE6\x43\x40\x83\x47\x67\x25\x83\x43\x89\xB6\x65\x16\x6C\x6F\x0F\x18\x44\x08\x46\x61\xBC\x66\x9A\x52\xEE\x64\x77\x9B\x4D\x69\x9C\x7B\x98\x9A\x6D\x88\x7F\x9B\x55\x71\x88\x79\x00\x46\x77\x82\x44\x16\x14\x55\x05\x16\x15\x10\x4C\x3D\x90\x90\x41\x40\x9D\x4C\x84\x6F\x02\x18\x4A\x02\xA2\x03\x46\x10\xA3\x14\x7E\x80\xAD\x9F\x93\x00\x26\x16\x87\x1C\x45\x98\x43\x00\x9E\x9C\x97\x75\x14\x13\x4C\x3F\x91\xA1\x11\x83\x83\x42\x91\x1D\x6C\x2C\x19\xA0\x43\xA5\x8B\x72\x87\x13\x42\x0A\x1F\x10\x14\x45\x0E\x1B\xA8\x42\xB7\x9C\x1B\x1F\xA6\xC0\x5B\x61\x62\x40\xB0\x8A\x13\x10\x13\x4F\x10\xA7\xAC\x41\xB9\xBD\x1D\xA9\x8B\x51\x4D\xB0\x01\x10\x52\x12\x13\xAD\xAD\xC7\x83\x49\xAF\x16\x06\x84\x80\x60\x41\x80\x50\xB2\x17\xB0\xC5\x85\x15\xB6\x40\xB9\x9D\x1C\x8B\xB6\xBF\x4C\x59\x5B\x13\x4D\x0D\x11\x12\x91\x3D\x6C\x04\x82\x7B\x94\x83\x1F\x10\xB1\x4E\x30\xB3\x42\x0E\xE8\x88\x6C\x7D\x95\x9E\x8D\x12\x11\x11\x52\x1F\x08\x46\xC1\x02\x5B\x1C\x15\x0B\x5D\x3F\x0C\x14\x19\x2B\x28\x0E\x0B\xC3\x2B\x29\x0F\x0C\x0A\x5B\x25\x15\x11\x17\x5B\x2B\x0B\xC1\xC3\x14\xD6\xC9\x9C\x42\x23\xDF\x70\xC0\x00\x53\x3B\x99\x12\x13\x47\x1B\x08\x46\xCB\x02\x62\x08\xC6\x17\x5C\x1C\x12\x09\x17\x7C\x35\xCB\x16\x17\x75\x38\xC5\xCD\x1D\x0F\xFB\x14\x0D\x1F\x29\x2A\x02\x0B\xA2\x0C\x48\xD8\x42\x91\x94\x93\x10\x15\x10\x43\x05\x1C\xAC\x42\x53\xDC\x13\x1F\x0A\x39\x89\x44\x7B\x98\x16\x67\xCA\x10\x93\xFA\x50\x08\x46\xD8\x02\x5F\xDE\x8E\x0B\x52\x2F\x1F\x18\x1D\x1C\x76\x54\x1D\xD6\x02\x72\x70\x10\x08\x24\x3C\x06\xD9\x93\x3E\x32\x83\x43\xDD\xFA\x73\x68\x42\xDF\x7C\xE4\x1E\x09\xDB\x72\x34\x1A\xD0\x41\x4A\xF3\xD6\xDC\xD8\x64\x39\xDE\xD4\xE3\xFD\x80\x00\x61\xE0\x2E\x31\x0A\x0C\x46\x97\xC2\x4B\xE2\x8F\x3E\x3A\x00\x09\xCA\x52\x2B\xC7\x10\x08\x9E\xC3\x94\x4F\xDC\x22\x3A\x02\x08\x08\x4A\x16\x1B\x85\x19\xA4\xE0\x01\x94\x87\x20\x21\x13\x1C\x08\x3C\xB4\x1C\xE2\xDE\x65\xD0\xEA\x64\x00\x94\xF2\x09\xE4\x42\xC3\xDB\xE8\xDE\xE7\xA0\xE2\xE1\xEE\xE9\xB0\xE9\xE2\x0B\xDC\xAD\xEF\xE1\xEF\xEC\xB0\xF6\xE8\xEE\x92\x3D\x8D\x91\xE7\xE4\x14\xAD\x66\x87\xE1\x03\x4A\xDA\x11\xF7\xD0\x55\xEA\x3C\x46\xE7\xDA\xE3\xF9\x83\xD0\x5D\xE0\x0A\x08\x6E\x28\xAC\x1B\xEA\xD6\xE4\xF6\x87\xDC\x77\x0E\x78\x18\x08\x7B\x32\xE2\xF5\x0F\xEF\x69\x35\xAA\x2B\x7D\x0F\x06\x0A\x06\x6E\xF6\x6C\x0E\xFB\x22\x06\x52\x36\x18\x54\x7E\xB7\x69\x80\xFE\x7A\x7C\x7E\xFF\x52\x48\x76\x00\x82\x06\x11\x17\x55\x0C\x02\x86\x80\x81\xEC\x76\x42\xFB\x4E\x05\x0A\x81\x44\x61\x76\x5C\x49\x44\x1D\x35\x77\x77\xF0\x23\x40\x08\x1F\x8B\x7D\x85\x0A\x88\x78\x95\x6C\x60\x85\x28\x5E\x4B\x0A\xD6\x77\x4A\x90\x30\x87\x80\x32\x9E\x78\x0D\xEF\x76\x51",
"\x0E\xAC\x80\x04\x12\x80\x05\xFE\x74\x0B\x7F\xFE\x54\x78\x04\x19\x94\x0A\x1C\x1C\x44\x80\x2D\x65\x69\x77\x25\x63\x23\xC8\x32\x58\x7A\x3A\x15\x71\x09\x18\x20\x8E\xFA\x39\x7B\x81\x3D\x0F\x78\x04\x5B\x0C\x74\xE3\x31\x74\x47\x26\x77\x75\x7F\x22\x0C\x07\xEA\x01\x7C\x8C\x1F\x77\x75\x0F\x20\x1D\x0B\xFB\x7D\x00\x83\xEB\x75\x39\x46\x5E\x61\x0A\x70\x44\x3B\x7B\xBD\x42\x91\x41\x95\x65\x08\x46\x0A\x9A\x7D\x43\x84\x3B\x81\x5B\x07\x8D\x1A\xD1\x77\x83\xD8\x4D\x47\x41\x15\x91\x8F\x1C\xAE\x75\x92\xCF\x57\x97\x8E\x79\x8F\x7D\x17\x7D\x8E\x91\x3C\x05\x95\x6C\x09\x84\x6C\x42\x2A\x91\x89\xF2\x69\x6B\x6D\x45\x14\x2D\x03\x18\x23\x96\x81\x35\x6D\x95\x22\x80\x04\x10\x3C\x70\x78\x4E\x9C\x47\x94\xBD\x8F\x75\xE5\x3D\x08\x22\x62\xAA\x7E\x97\x65\x0E\x7D\x08\x4A\x05\x95\x1F\xB6\x68\x99\xCA\x98\x94\x1B\x4E\x94\x92\x0E\x51\x99\x77\x40\x16\x88\xF0\x58\x8D\x53\x6D\x9D\x8E\x05\x32\x02\x8C\x42\x62\x96\x6E\x32\x9E\x72\x04\x66\x88\x8E\x1A\xBE\x45\x8E\x37\x99\x92\x8E\xEB\x8D\x49\x3B\xB6\x40\x04\x3C\xBA\x8A\x04\x7C\x87\x88\x36\xBC\x9C\x99\x41\xA6\x97\x77\xFD\x88\x93\x0C\x0C\x98\x20\x82\xB6\x6D\x94\x90\x8B\x77\x24\xC8\x96\x93\xDB\x18\x90\x8E\xF0\x95\x98\xEC\x1E\x9E\xA0\x50\xB7\x9B\x94\x47\x8D\x98\x3F\xBE\x7E\x56\xCA\x73\x03\x78\x04\x25\x79\xE0\x6E\x79\x79\x1B\xA5\x74\x48\xEF\x6A\x74\xEB\x0C\xAE\x73\x27\x96\x79\x77\x8C\x7B\x95\x20\xFE\x90\x99\x80\x84\x38\x9C\x8C\x18\x21\x4E\x8D\x9E\x9F\x84\xAA\x9A\xA2\x0D\xAE\x43\x1C\x73\x60\xA3\x4D\x92\x7C\xA2\x42\xB5\x9D\x28\xB7\x64\x94\x7F\xB1\x80\xA1\xE7\x91\x93\x4F\xAC\xA0\x05\x4F\xBA\x95\xA8\x2B\xA7\xA9\x55\x95\xAA\xA9\x8B\x8D\xA9\x41\xFC\x88\x9A\x03\x18\x23\xAD\xB2\x48\x98\x6D\x6A\x74\x0D\x2C\xE4\x00\x6F\x23\x76\x97\x99\xAF\x7E\x06\x2E\xDA\x9C\x8B\x3F\xA5\x48\x21\x77\xB5\xAC\x8C\x68\xA0\x96\xBA\x3E\x6C\x20\x7E\x77\x94\x19\xBA\x94\x52\x25\x2F\x94\x0E\x74\xA7\xB1\xE5\x25\x08\x22\xC6\xAA\x7F\xB0\xD7\x9D\x88\x35\x90\xBE\x73\x65\x9A\xA3\xA6\x09\x45\xAC\x42\x1A\xB6\xA7\x3C\x3C\xAA\xAD\x74\x2D\xAE\x7C\x37\x98\xA0\x5D\x9B\xA6\x47\x9A\xA4\x20\x67\x8C\x7F\xB3\xB5\xA2\xB3\x20\xB7\x8C\x72\x5C\xD9\x92\x42\xBD\xAC\x39\x8B\x02\x3B\x89\xEE\x2E\x05\x06\x4A\x18\x26\xB7\x63\x9D\x89\x19\x8A\xA1\x9E\xFD\x33\x9C\x0C\xB7\x60\x08\x56\xF4\x8E\x73\x36\xB4\x9E\x9E\x7B\x9D\x8D\xEE\x31\x86\x9D\xF7\x69\x9B\x92\x6B\x8D\xBA\x1D\xC4\xAF\x7D\x88\x99\xB8\x04\xCE\xA8\xB9\x57\xD1\xBA\x9F\x2E\xBC\x9D\x94\x35\xA5\x96\x0B\x34\x04\xA0\x82\x06\xA5\xB3\x3E\xAB\xA2\x56\xD6\xA5\xA8\xE8\x54\xAE\xAA\xD0\xAC\xA9\x46\xFE\x95\xB1\xC3\xB5\x90\x21\xFF\xA6\xB1\x5A\xAD\xB4\x2E\xF0\x42\x22\x69\xB7\x90\xB3\x5C\xB5\xBC\x9A\x86\x3A\xB7\x9B\x33\x02\x9C\x41\x64\x96\xB6\x3A\x03\xBF\xA7\xDF\xA1\xBF\x1B\xDD\xB7\x8C\xE6\xA0\xBE\x8E\xE3\xB8\x9E\x74\xDD\x84\xAF\xDC\x51\x00\x23\x27\xD7\x8B\x37\x87\xB4\x70\x3A\x3F\xAB\x20\x7E\x73\x6E\x60\xC2\xB5\xC5\x2E\xBF\xBC\x20\x01\xDB\xB5\x8B\xAF\xB2\x20\xC5\x55\xC6\x07\x35\xA9\x82\x04\x18\x23\xC8\x54\xA1\x84\x0D\x9F\xAD\xC7\x8D\x83\x2F\xBE\x19\xE0\x83\x86\x40\xC0\xA1\x02\xA9\xB3\x20\xCE\x89\x83\x70\x74\x0E\x6F\x8B\x82\x21\xC6\x10\x0F\xCA\x88\x8E\x7D\x69\xD9\x25\x9A\x94\x82\x2C\x92\xBD\x2C\xD9\xC9\xE1\x3C\xC0\x00\x27\xF0\xBF\xBC\xFE\x9B\xC8\x00\x00\x7A\xBD\x16\xC6\xC0\x00\x89\x7E\xCB\x9B\xDE\x68\x99\x32\xC3\x24\x95\x67\xA9\xCE\xDB\x6C\xCE\xCC\x68\xA1\xAF\x75\x72\xC0\x73\x59\xF6\xCC\x51\x1E\xFA\xC8\x9A\xFD\xA9\xAF\x5D\x84\x29\xAE\xC5\x82\xD5\x70\x77\xD9\xCD\x82\xE9\xAE\x07\x48\xEB\x6C\xCD\x02\xCB\x6C\x96\xEE\x68\xB6\x00\x23\x66\xC7\x90\xA7\xB6\xF6\x00\xAC\xB4\x1A\x20\xA3\x5F\x03\x26\x7A\x7E\x24\xA6\x87\xD1\x67\xA4\x26\x29\xA6\xA9\x27\x96\x84\x77\x97\x9D\x89\xA6\x35\xDF\x8D\xA9\x8F\xCF\x8F\xF5\x92\xC3\x20\x14\xD5\xB8\x3A\xC4\xBE\xC2\x0D\xEF\x9B\x8E\x19\xC0\xC5\x7E\xF9\x9E\xD7\x3F\x80\x09\xC8\x47\xD9\xD3\xDE\x57\xC2\x07\xF4\x48\x26\xDB\x5F\xCD\x7F\x39\x8D\x8F\x81\x23\x89\x82\x89\x14\x8E\x8B\xFF\x6F\x7B\x82\x07\x86\x8D\x0F\xD4\x89\x83\x02\xF1\x73\x80\x73\xC7\xC8\xDD\x4C\x95\x83\x13\x99\x82\x81\xF9\x75\x99\xDE\x47\xC3\x85\x09\x83\x62\x0A\x1C\x9D\x4E\x36\x47\x8E\x85\x6B\x00\xE0\xCB\x1A\xA1\x76\xA4\x20\x09\x86\x0E\xC7\x8D\x87\x33\x0C\xE0\xCC\xE7\x85\x89\x1F\xE7\xDB\x89\x26\xBC\xD0\x83\xEF\x72\x88\x15\xFF\xD0\xCF\x04\x69\xBE\x9F\xBC\xAD\xBF\x40\x6F\xB0\xAB\xF7",
"\x52\xAA\xBE\xBB\xD4\xBC\x87\xD9\xA1\xE6\xAE\xB9\xB8\xA3\xD6\x77\xB2\x98\xA7\x3D\x76\x1F\x6C\xC8\xA6\x3E\x53\x4E\xD6\x5C\x31\xD8\x18\x7C\x91\x77\xBC\x36\x03\x48\x64\x38\xDB\x19\x8B\x58\x48\xD8\x3A\x38\x6F\x18\x0B\xE8\x0F\x58\xB4\x38\x94\x45\x94\x6F\x1A\x05\xEA\xE9\x07\xD7\x82\x4F\xE8\x35\x76\x65\x0C\x36\x0E\x1D\xE8\x39\x9E\xD4\x0D\xD8\xD7\x33\xEC\xDE\x1E\x07\xEC\xC7\x3C\x03\xB8\x2F\x3F\x1E\xDE\x06\x4A\xE8\x78\xF9\xEF\x48\x46\x4F\x1E\x2A\xE4\x5A\xEF\x0C\x3A\x5E\xD0\xEB\xE0\x00\xE6\x7C\x32\xD5\xFA\x2F\x4C\xDD\xF2\xC3\x6A\xC0\xF9\xEC\xEE\x84\xEE\xF0\x00\x4B\x56\x41\xC6\xCE\xF0\xF1\x4E\x58\x21\x07\x12\xFE\x3E\x3E\xEF\x73\x59\xBC\x34\x50\xF5\x04\xF2\xE5\x32\x0D\xEA\x88\x79\xFA\x99\x02\xBC\x37\xF4\xE8\x34\xEE\x40\xA0\xF8\xEC\xE5\x9A\x5C\xF2\x10\x4F\x76\x47\x06\x5B\xF1\xED\xDF\xEC\x43\xD8\xFD\x52\x5D\x50\x4F\x74\xA5\x6D\xD8\x53\xD6\xD6\x41\xF5\x12\x4B\xF7\xEF\x5C\x5B\xDB\x23\xF4\xEC\x45\xBE\xF3\x4F\xEC\x8C\x26\xF2\xC0\xD8\xF1\xF7\xB5\xEC\x58\xCF\xC1\x90\xEC\xBC\xE2\xF7\xF3\xD5\x28\x36\xFC\x46\xFC\x0C\xE4\xCE\x5A\xF9\xBE\x4C\xFA\x91\xB3\x84\xEE\x02\x46\x41\xEF\xE3\x47\x40\xF5\xD9\xF7\xFA\xCD\xF4\xFE\xF3\x17\x85\x20\xDF\xA5\xDC\x44\xF8\xFB\x2B\xFE\xBB\x77\x7B\x4D\x28\x7D\x01\x8B\x73\x12\x59\x10\x7C\x7B\x64\x02\x11\x7D\x6F\x23\x7D\x54\x37\x7F\x06\x8C\x38\x04\x8C\x79\xBC\x79\x29\x42\x7A\x4D\x12\x7F\x25\xCB\x73\x10\xDC\x37\x64\x79\x7C\x4B\x0A\x72\x07\xAC\x72\x65\xCE\x7C\x77\x7E\x73\x79\xD9\x7E\x80\x04\x15\x7D\x7A\x75\x7F\x0C\x1A\x7B\x14\x88\x7F\x1C\x27\x77\x12\x2F\x15\x02\x19\x81\x74\x03\x82\x1D\x58\x7E\x73\x2C\x4B\x15\x7A\x83\xBF\x20\x3C\xAB\x74\x77\x46\x24\x20\xD9\x7A\x7F\x23\x11\x7F\x91\x36\x77\xF6\x7C\x10\xF1\x7C\x22\x30\x82\x79\xE4\x7C\x82\x47\x85\x81\x92\x74\x77\x91\x35\x6A\x47\x8A\x14\x26\x88\x11\xF1\x7E\x7F\xBF\x78\x16\xB5\x75\x74\xEC\x14\x83\xAC\x21\x7E\x02\x16\x78\x27\x36\x32\x3D\x7D\x24\x57\x1C\x77\x91\x7E\x78\x2A\x8D\x79\x05\x8B\x7D\x9D\x53\x81\x92\x75\x81\x0C\x89\x2E\x62\x80\x00\xA3\x78\x86\x00\x05\x7A\xE4\x76\x7E\x3E\x13\x10\x3C\x8A\x7E\x41\x82\x4D\xAF\x70\x88\x92\x73\x87\xB6\x75\x87\x6C\x80\x3C\xA5\x48\x87\x97\x72\x83\x65\x0B\x87\xA2\x1F\x7B\xD4\x33\x7C\x1C\x43\x88\x78\x7A\x7A\x1E\x8B\x81\x02\x1D\x81\xEC\x7C\x77\xD0\x79\x82\xFF\x7B\x7D\x79\x87\x75\x0A\x2D\x84\x31\x86\x80\xC8\x48\x89\xF2\x70\x7C\x7E\x80\x7E\x67\x87\x1D\xE3\x74\x82\x33\x44\x88\x36\x83\x21\xA1\x89\x7E\x1C\x8D\x7C\xA5\x83\x12\xEE\x79\x7D\xF1\x76\x20\xFD\x78\x77\x25\x78\x75\xAE\x8B\x8A\xB0\x8F\x3A\x48\x87\x13\xFC\x76\x8C\xA9\x81\x89\xCE\x86\x87\x93\x8D\x8C\x95\x8F\x8C\x17\x44\x77\xDA\x6B\x85\x7B\x73\x12\x0A\x88\x82\xB5\x7E\x88\xDA\x77\x8D\x91\x87\x87\xDA\x86\x7D\x96\x86\x86\x85\x8E\x2C\x38\x80\x84\x88\x82\x4D\x1F\x87\x32\x21\x82\x8F\xC1\x8B\x7E\x42\x44\x77\x27\x82\x8B\xBC\x16\x8E\xC9\x82\x74\xCB\x8D\x8A\x2F\x80\x81\x76\x88\x4C\xEE\x8D\x8B\xBD\x81\x8F\xA2\x82\x39\xC2\x88\x7A\xCA\x87\x32\x3F\x8D\x90\xA4\x80\x91\x42\x74\x84\xB4\x40\x8E\x4A\x1C\x82\xFF\x01\x7F\x72\x6C\x84\x0C\x13\x01\x5E\x8B\x86\x03\x12\x92\x90\x84\x87\xDC\x7C\x21\x5F\x85\x8D\xE9\x2F\x49\x87\x7C\x8A\x1D\x92\x1B\x78\x76\x24\x2C\x2F\x84\x24\x9C\x8E\xDC\x8A\x92\xDE\x79\x8A\x2E\x97\x93\xDA\x7D\x59\x31\x91\x1F\x33\x94\x7B\x4E\x8E\x93\x54\x81\x91\x39\x96\x81\x73\x2F\x7D\xF9\x7E\x93\xA6\x11\x38\x73\x28\x91\x0C\x17\x82\x79\x79\x90\x6B\x27\x74\x5D\x4C\x1B\x64\x8D\x1E\xF1\x71\x94\x78\x53\x94\x0C\x18\x30\x0F\x87\x92\x8F\x83\x1F\x59\x95\x83\x03\x11\x14\x15\x6C\x22\x62\x92\x79\x5B\x97\x94\xB5\x79\x76\x5E\x98\x88\x6F\x26\x24\x51\x83\x10\x70\x9D\x83\x27\x38\x74\x68\x9E\x2A\x2A\x6F\x47\x50\x89\x7D\x6F\x9A\x91\xD6\x88\x92\x07\x8A\x78\x7C\x76\x24\x7E\x60\x78\x56\x97\x26\x59\x7E\x4F\x2F\x96\x80\xA5\x43\x97\x09\x11\x7F\x93\x6B\x26\x46\x2D\x96\x78\x99\x7D\x8F\x99\x20\x91\x98\x8D\xFE\x4C\x96\x06\x99\x8E\xA5\x49\x97\x92\x72\x97\x4A\x80\x96\x08\x17\x97\x02\x16\x9A\x6B\x2D\x99\xC4\x1F\x99\xA4\x91\x9A\xEB\x8D\x82\xAC\x8E\x9A\x38\x97\x90\xD0\x88\x98\xE1\x8C\x10\x29\x6C\x79\x8D\x96\x26\x3F\x7F\x6B\x41\x7E\x94\x7B\x3C\x38\x94\x98\x18\xF1\x75\x64\x73\x26\x24\x15\x04\x94\x9C\x73\x9C\x7F\x4C\x38\xB2\x96\x98\xBB\x38\x11\xCF\x94\x96\x3F\x9C\x38\x2B\x9B\x73\x91\x8A\x61\x5A\x9C\x60\x5D\x49\x9C\x00\x0C\x9C\x75\x9C\x92\xAD\x99\x7D",
"\xD2\x9B\x24\xC5\x9E\x9D\xD6\x9E\x23\x2C\x2F\x7E\x48\x96\x87\xDC\x93\x9F\xDF\x96\x47\xE1\x9E\x2C\x15\x65\x7B\xDE\x8D\x68\x84\x91\x8D\x4A\x1D\x56\x26\x9F\x9F\x04\xAF\x86\xBD\x98\x10\x14\x05\xA0\x0A\xAE\x78\x58\x8D\x4D\x04\xA4\x77\x6D\x59\x9D\x0B\xA8\x80\x23\x11\x87\x80\x76\x8E\x03\xA8\x8E\x86\x99\x8D\x05\x9A\x9D\x4F\x91\x8B\x3B\x9A\x89\xB6\x81\x24\x03\x12\x88\xBA\x86\x91\x73\x20\x8A\xBB\x84\x91\x0F\x9E\x7A\x7C\x70\x7B\xA8\x81\x86\x25\x93\x9A\x1B\xAC\x5F\xB5\x95\x8F\x49\x92\x8B\x4C\x9C\x21\x9C\x8E\x6E\x9E\x87\x81\xC9\x7F\x8B\x41\x83\x8F\x09\x4F\x7C\x8C\x82\x87\xE8\x90\x00\x19\xAB\x8D\xA0\x99\x20\x94\x89\x9B\xE9\x80\xA2\x42\x7B\xA3\x97\x80\x88\xFD\x6F\xA3\x29\xA1\xA4\x2B\xA0\x8C\xA3\x8D\xA2\x16\x2D\x7E\x49\xA0\x86\xB4\x84\x10\x4B\xA0\xA5\x35\xAE\xA4\x37\xA6\x9F\x86\x98\x4C\x00\xA7\x15\xD3\x85\x7B\xC7\x88\x11\x65\xA6\x9B\x92\x96\xA3\x1D\xAF\x8A\xBA\x9D\x94\x6D\xA9\x10\xE3\x8E\x8F\x47\xA9\x89\x08\x13\xA7\x38\xAD\xA4\xCC\x87\xA7\x1A\xA5\x96\x12\x51\x9C\x18\x89\x43\x1A\x8C\xA5\x0E\x9A\x8F\xD0\x13\xA8\x91\x87\x8F\x2C\xA0\xA9\x5F\xAD\x85\xB7\x8C\x79\x18\xA4\xA3\x88\xAC\xA1\xAB\x9C\xA9\x3F\x98\x90\x9F\x82\x21\x0C\x9E\xA8\x15\x91\xA9\x6A\xA5\x96\x13\x96\xAA\x5E\xA5\x7E\x84\x9C\x8F\x23\x90\xA7\x49\xA2\xA1\x6E\x92\x9E\x7F\x41\x9C\x84\x7A\x86\xEE\x98\xA8\xC8\x9C\x77\xBC\x17\x01\x13\xA0\x78\x60\xA2\xA3\x0B\xA4\x77\xBC\x19\x01\xC1\xA7\x91\x70\x8F\xA7\x7A\x71\x7F\x3A\xA9\x8A\x7F\x89\xA9\x26\xAB\x83\x42\xAF\x26\x2A\xA8\xA2\x74\x99\x8F\x42\x85\x82\xA0\x1C\xAC\x62\xA4\x28\x21\xA4\x8B\x9B\x89\x8A\xC4\x76\x7A\x27\xA8\xAA\x40\xA7\x7E\xD5\xAA\xAD\x44\xAC\xAD\x37\x17\x8A\xB2\xA9\xA9\x6F\x24\xA5\x84\x77\xA5\xE7\xA7\x7C\xA3\xAA\xAE\x5B\xA3\xA4\xDA\xA4\x8F\x5C\x82\x8E\xDE\xA8\x77\xF1\x7A\xA8\xA4\xAC\xA8\x39\x85\xA9\xDB\xAB\xAF\x6F\x20\x82\x22\x2D\x1A\xF8\x8D\xA5\x96\xA1\x1D\x98\xA4\xA2\xF1\xAB\x34\xF9\xAF\x8E\x00\x05\xAA\xFC\xA0\xB1\x09\xB8\xAD\x57\x92\x91\x1D\x18\x25\x0F\xBF\xA8\x1D\xBE\xA2\x23\x1C\x1B\x30\x39\xAC\x8F\x7B\x7F\x3E\x9F\x9F\xC6\xA9\xA6\x2A\xB4\xA1\x37\x16\xA1\x7A\x7C\x82\x4F\xA4\xA7\x79\xAD\x7B\xE1\xAD\x87\xD1\xA4\xB1\x81\x83\x45\xE6\xA4\xAD\x0A\xBB\x26\xD7\xA8\xAE\x1B\xB4\xB2\x8A\x8F\xA2\x01\xB2\x74\x36\xB0\xB3\x7A\x99\xA3\x3B\xB9\x2E\xE3\xAF\x7B\xE5\xA8\xA5\xD6\xAA\xA5\x1E\xBC\xB1\xED\xA3\x8C\xEF\xAB\xB4\x73\x2D\xB4\x86\xAC\xA4\x51\xA3\xA2\xF3\xA0\xAD\x64\xB6\x2A\xE2\x79\x2A\x56\xB4\xB4\x58\xB6\xB4\xD9\xAC\xB1\x49\xB4\x8C\x61\xAA\x9A\x7D\x84\x10\xAC\x98\xB3\x63\xB9\x7F\x74\x7F\xA6\xC0\x99\xA4\x77\xB2\xA9\x6B\xAB\x9B\x7B\xA8\x18\x7D\xA9\x7D\x60\xBF\xA9\x1E\xAB\x37\xA2\xA9\xAE\x18\xBA\xB1\x6F\xB8\xB4\x87\x8F\xB1\x3B\x74\xA9\xAC\xA1\xB1\xB0\xA2\xAF\x8E\x77\xB8\x76\xB0\xAA\x1F\xAF\x3A\x04\xB0\x8F\x06\xB3\xB2\xA7\xA8\xAF\x02\x90\xB2\x01\x27\x06\xA2\xBD\xAA\x2F\xB1\x96\x31\xBA\xAC\x72\xB4\xAC\x7A\x7C\x34\x07\x3C\x99\xA9\x81\x6A\x39\x8B\xB7\x2D\xB4\xB7\x7C\x83\x10\x9A\x90\x78\x69\x7D\xBA\xE0\x80",
};

			void JsonGetParserBuffer(vl::stream::MemoryStream& stream)
			{
				vl::stream::MemoryStream compressedStream;
				for (vint i = 0; i < parserBufferRows; i++)
				{
					vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
					compressedStream.Write((void*)parserBuffer[i], size);
				}
				compressedStream.SeekFromBegin(0);
				vl::stream::LzwDecoder decoder;
				vl::stream::DecoderStream decoderStream(compressedStream, decoder);
				vl::collections::Array<vl::vuint8_t> buffer(65536);
				while (true)
				{
					vl::vint size = decoderStream.Read(&buffer[0], 65536);
					if (size == 0) break;
					stream.Write(&buffer[0], size);
				}
				stream.SeekFromBegin(0);
			}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

			extern void JsonUnescapingString(vl::parsing::ParsingToken& value, const vl::collections::List<vl::regex::RegexToken>& tokens);

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

			class JsonTreeConverter : public vl::parsing::ParsingTreeConverter
			{
			public:
				using vl::parsing::ParsingTreeConverter::SetMember;

				bool SetMember(JsonLiteral::JsonValue& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
				{
					vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
					if(token)
					{
						if(token->GetValue()==L"True") { member=JsonLiteral::JsonValue::True; return true; }
						else if(token->GetValue()==L"False") { member=JsonLiteral::JsonValue::False; return true; }
						else if(token->GetValue()==L"Null") { member=JsonLiteral::JsonValue::Null; return true; }
						else { member=JsonLiteral::JsonValue::True; return false; }
					}
					member=JsonLiteral::JsonValue::True;
					return false;
				}

				void Fill(vl::Ptr<JsonNode> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
				}

				void Fill(vl::Ptr<JsonLiteral> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonString> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->content, obj->GetMember(L"content"), tokens))
					{
						JsonUnescapingString(tree->content, tokens);
					}
				}

				void Fill(vl::Ptr<JsonNumber> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->content, obj->GetMember(L"content"), tokens);
				}

				void Fill(vl::Ptr<JsonArray> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->items, obj->GetMember(L"items"), tokens);
				}

				void Fill(vl::Ptr<JsonObjectField> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					if(SetMember(tree->name, obj->GetMember(L"name"), tokens))
					{
						JsonUnescapingString(tree->name, tokens);
					}
					SetMember(tree->value, obj->GetMember(L"value"), tokens);
				}

				void Fill(vl::Ptr<JsonObject> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
				{
					SetMember(tree->fields, obj->GetMember(L"fields"), tokens);
				}

				vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
				{
					if(obj->GetType()==L"Literal")
					{
						vl::Ptr<JsonLiteral> tree = new JsonLiteral;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"String")
					{
						vl::Ptr<JsonString> tree = new JsonString;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Number")
					{
						vl::Ptr<JsonNumber> tree = new JsonNumber;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Array")
					{
						vl::Ptr<JsonArray> tree = new JsonArray;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"ObjectField")
					{
						vl::Ptr<JsonObjectField> tree = new JsonObjectField;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else if(obj->GetType()==L"Object")
					{
						vl::Ptr<JsonObject> tree = new JsonObject;
						vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
						Fill(tree, obj, tokens);
						Fill(tree.Cast<JsonNode>(), obj, tokens);
						return tree;
					}
					else 
						return 0;
				}
			};

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> JsonConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				JsonTreeConverter converter;
				vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
				converter.SetMember(tree, node, tokens);
				return tree;
			}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

			vl::Ptr<JsonLiteral> JsonLiteral::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonLiteral>();
			}

			vl::Ptr<JsonString> JsonString::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonString>();
			}

			vl::Ptr<JsonNumber> JsonNumber::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonNumber>();
			}

			vl::Ptr<JsonArray> JsonArray::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonArray>();
			}

			vl::Ptr<JsonObjectField> JsonObjectField::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObjectField>();
			}

			vl::Ptr<JsonObject> JsonObject::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
			{
				return JsonConvertParsingTreeNode(node, tokens).Cast<JsonObject>();
			}

/***********************************************************************
Parser Function
***********************************************************************/

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				return node;
			}

			vl::Ptr<vl::parsing::ParsingTreeNode> JsonParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParseAsParsingTreeNode(input, table, errors, codeIndex);
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
			{
				vl::parsing::tabling::ParsingState state(input, table, codeIndex);
				state.Reset(L"JRoot");
				vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
				vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
				if(node && errors.Count()==0)
				{
					return JsonConvertParsingTreeNode(node, state.GetTokens()).Cast<JsonNode>();
				}
				return 0;
			}

			vl::Ptr<JsonNode> JsonParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
			{
				vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
				return JsonParse(input, table, errors, codeIndex);
			}

/***********************************************************************
Table Generation
***********************************************************************/

			vl::Ptr<vl::parsing::tabling::ParsingTable> JsonLoadTable()
			{
				vl::stream::MemoryStream stream;
				JsonGetParserBuffer(stream);
				vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
				table->Initialize();
				return table;
			}

		}
	}
}
